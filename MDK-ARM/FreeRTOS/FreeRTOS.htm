<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [FreeRTOS\FreeRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image FreeRTOS\FreeRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Nov 03 23:50:43 2019
<BR><P>
<H3>Maximum Stack Usage =       1400 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Screen2View::handleTickEvent() &rArr; touchgfx::TextureMapper::updateAngles(float, float, float) &rArr; touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3b4]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[32]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_IRQHandler</a><BR>
 <LI><a href="#[664]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[664]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
 <LI><a href="#[66e]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</a><BR>
 <LI><a href="#[66d]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66d]">touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</a><BR>
 <LI><a href="#[411]">UpdateBTT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ce]">ScanTable</a><BR>
 <LI><a href="#[3ce]">ForceDataGc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40f]">RelocBlock</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[ed]">AbortSequence</a> from nand_membus.o(i.AbortSequence) referenced from nand_membus.o(.constdata)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[33]">CAN1_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[61]">CAN2_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[62]">CAN2_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5f]">CAN2_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[87]">CAN3_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[88]">CAN3_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[89]">CAN3_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[86]">CAN3_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7d]">CEC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e6]">ChipEnable</a> from nand_membus.o(i.ChipEnable) referenced from nand_membus.o(.constdata)
 <LI><a href="#[ee]">Control</a> from nand_membus.o(i.Control) referenced from nand_membus.o(.constdata)
 <LI><a href="#[6e]">DCMI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[81]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[82]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[83]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[84]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[79]">DMA2D_IRQHandler</a> from stm32f7xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream3_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream6_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e4]">DevicePower</a> from nand_membus.o(i.DevicePower) referenced from nand_membus.o(.constdata)
 <LI><a href="#[5d]">ETH_IRQHandler</a> from stm32f7xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5e]">ETH_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from stm32f7xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[fe]">EraseBlock</a> from fs_nand_media.o(i.EraseBlock) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[ec]">ExecuteSequence</a> from nand_membus.o(i.ExecuteSequence) referenced from nand_membus.o(.constdata)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[50]">FMC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[70]">FPU_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e0]">GetCapabilities</a> from nand_membus.o(i.GetCapabilities) referenced from nand_membus.o(.constdata)
 <LI><a href="#[e7]">GetDeviceBusy</a> from nand_membus.o(i.GetDeviceBusy) referenced from nand_membus.o(.constdata)
 <LI><a href="#[100]">GetFeatures</a> from fs_nand_media.o(i.GetFeatures) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[ef]">GetStatus</a> from nand_membus.o(i.GetStatus) referenced from nand_membus.o(.constdata)
 <LI><a href="#[df]">GetVersion</a> from nand_membus.o(i.GetVersion) referenced from nand_membus.o(.constdata)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7f]">I2C4_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7e]">I2C4_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e1]">Initialize</a> from nand_membus.o(i.Initialize) referenced 2 times from nand_membus.o(.constdata)
 <LI><a href="#[f0]">InquireECC</a> from nand_membus.o(i.InquireECC) referenced from nand_membus.o(.constdata)
 <LI><a href="#[8a]">JPEG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7c]">LPTIM1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[78]">LTDC_ER_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_ER_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[77]">LTDC_IRQHandler</a> from stm32f7xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8b]">MDIOS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[ad]">NAND0_HW_SignalEventHandler</a> from fs_config.o(i.NAND0_HW_SignalEventHandler) referenced from fs_config.o(i.fs_config_nand)
 <LI><a href="#[ae]">NAND0_Media_SignalEventHandler</a> from fs_config.o(i.NAND0_Media_SignalEventHandler) referenced from fs_config.o(i.fs_config_nand)
 <LI><a href="#[17]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[63]">OTG_FS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e3]">PowerControl</a> from nand_membus.o(i.PowerControl) referenced from nand_membus.o(.constdata)
 <LI><a href="#[7b]">QUADSPI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6f]">RNG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[ea]">ReadData</a> from nand_membus.o(i.ReadData) referenced from nand_membus.o(.constdata)
 <LI><a href="#[fa]">ReadID</a> from fs_nand_media.o(i.ReadID) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[fc]">ReadPage</a> from fs_nand_media.o(i.ReadPage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[fb]">ReadParamPage</a> from fs_nand_media.o(i.ReadParamPage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[ff]">ReadStatus</a> from fs_nand_media.o(i.ReadStatus) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[f9]">ResetDevice</a> from fs_nand_media.o(i.ResetDevice) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[76]">SAI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7a]">SAI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[51]">SDMMC1_IRQHandler</a> from stm32f7xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[85]">SDMMC2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[99]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[99]">SD_DMAError</a> from stm32f7xx_hal_sd.o(i.SD_DMAError) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[98]">SD_DMAReceiveCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[97]">SD_DMARxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[9a]">SD_DMATransmitCplt</a> from stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[96]">SD_DMATxAbort</a> from stm32f7xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[c5]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c9]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c7]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c6]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c8]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[80]">SPDIF_RX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[73]">SPI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[74]">SPI5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[75]">SPI6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e9]">SendAddress</a> from nand_membus.o(i.SendAddress) referenced from nand_membus.o(.constdata)
 <LI><a href="#[e8]">SendCommand</a> from nand_membus.o(i.SendCommand) referenced from nand_membus.o(.constdata)
 <LI><a href="#[101]">SetFeatures</a> from fs_nand_media.o(i.SetFeatures) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8c]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from stm32f7xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[56]">TIM6_DAC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[71]">UART7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[72]">UART8_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[9b]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[45]">USART1_IRQHandler</a> from stm32f7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[67]">USART6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e2]">Uninitialize</a> from nand_membus.o(i.Uninitialize) referenced 2 times from nand_membus.o(.constdata)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[eb]">WriteData</a> from nand_membus.o(i.WriteData) referenced from nand_membus.o(.constdata)
 <LI><a href="#[fd]">WritePage</a> from fs_nand_media.o(i.WritePage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[e5]">WriteProtect</a> from nand_membus.o(i.WriteProtect) referenced from nand_membus.o(.constdata)
 <LI><a href="#[c3]">StartTouchTask(const void*)</a> from main.o(i._Z14StartTouchTaskPKv) referenced from main.o(.constdata)
 <LI><a href="#[c2]">StartDefaultTask(const void*)</a> from main.o(i._Z16StartDefaultTaskPKv) referenced from main.o(.constdata)
 <LI><a href="#[c4]">StartUpdateFontTask(const void*)</a> from main.o(i._Z19StartUpdateFontTaskPKv) referenced from main.o(.constdata)
 <LI><a href="#[9f]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32f7dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
 <LI><a href="#[a0]">DMA2D_XferErrorCallback(__DMA2D_HandleTypeDef*)</a> from stm32f7dma.o(i._Z23DMA2D_XferErrorCallbackP21__DMA2D_HandleTypeDef) referenced from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
 <LI><a href="#[105]">STM32F7DMA::initialize()</a> from stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[102]">STM32F7DMA::getBlitCaps()</a> from stm32f7dma.o(i._ZN10STM32F7DMA11getBlitCapsEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10b]">STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32f7dma.o(i._ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10c]">STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32f7dma.o(i._ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[107]">STM32F7DMA::signalDMAInterrupt()</a> from stm32f7dma.o(i._ZN10STM32F7DMA18signalDMAInterruptEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[106]">STM32F7DMA::start()</a> from stm32f7dma.o(i._ZN10STM32F7DMA5startEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[a5]">STM32F7DMA::~STM32F7DMA()</a> from stm32f7dma.o(i._ZN10STM32F7DMAD1Ev) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[a5]">STM32F7DMA::~STM32F7DMA()</a> from stm32f7dma.o(i._ZN10STM32F7DMAD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[123]">STM32F7HAL::enableInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL16enableInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[111]">STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from stm32f7hal.o(i._ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[124]">STM32F7HAL::disableInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL17disableInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[128]">STM32F7HAL::getTFTCurrentLine()</a> from stm32f7hal.o(i._ZN10STM32F7HAL17getTFTCurrentLineEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12c]">STM32F7HAL::setTFTFrameBuffer(unsigned short*)</a> from stm32f7hal.o(i._ZN10STM32F7HAL17setTFTFrameBufferEPt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[122]">STM32F7HAL::configureInterrupts()</a> from stm32f7hal.o(i._ZN10STM32F7HAL19configureInterruptsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[125]">STM32F7HAL::enableLCDControllerInterrupt()</a> from stm32f7hal.o(i._ZN10STM32F7HAL28enableLCDControllerInterruptEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c1]">STM32F7HAL::~STM32F7HAL()</a> from boardconfiguration.o(i._ZN10STM32F7HALD1Ev) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[c1]">STM32F7HAL::~STM32F7HAL()</a> from boardconfiguration.o(i._ZN10STM32F7HALD1Ev) referenced from boardconfiguration.o(t._ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss)
 <LI><a href="#[ce]">ModalDialog::buttonClicked(const touchgfx::AbstractButton&)</a> from modaldialog.o(i._ZN11ModalDialog13buttonClickedERKN8touchgfx14AbstractButtonE) referenced from modaldialog.o(.constdata)
 <LI><a href="#[130]">ModalDialog::~ModalDialog()</a> from screen1view.o(i._ZN11ModalDialogD1Ev) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[14a]">Screen1View::setupScreen()</a> from screen1view.o(i._ZN11Screen1View11setupScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d0]">Screen1View::modalAnswered(ModalDialog::Answer)</a> from screen1view.o(i._ZN11Screen1View13modalAnsweredEN11ModalDialog6AnswerE) referenced from screen1view.o(.constdata)
 <LI><a href="#[cf]">Screen1View::dialogAnswered(ContainerDialog::Answer)</a> from screen1view.o(i._ZN11Screen1View14dialogAnsweredEN15ContainerDialog6AnswerE) referenced from screen1view.o(.constdata)
 <LI><a href="#[14c]">Screen1View::tearDownScreen()</a> from screen1view.o(i._ZN11Screen1View14tearDownScreenEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[153]">Screen1View::buttonUpClicked()</a> from screen1view.o(i._ZN11Screen1View15buttonUpClickedEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[14d]">Screen1View::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen1view.o(i._ZN11Screen1View16handleClickEventERKN8touchgfx10ClickEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d1]">Screen1View::keyboardFinished(ContainerKeyboard::SpecialKey)</a> from screen1view.o(i._ZN11Screen1View16keyboardFinishedEN17ContainerKeyboard10SpecialKeyE) referenced from screen1view.o(.constdata)
 <LI><a href="#[152]">Screen1View::buttonDownClicked()</a> from screen1view.o(i._ZN11Screen1View17buttonDownClickedEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[d2]">Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</a> from screen1view.o(i._ZN11Screen1View20TextAreaClickHandlerERKN8touchgfx23TextAreaWithOneWildcardERKNS0_10ClickEventE) referenced from screen1view.o(.constdata)
 <LI><a href="#[148]">Screen1View::~Screen1View()</a> from screen1view.o(i._ZN11Screen1ViewD1Ev) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[159]">Screen2View::addFanSpeed()</a> from screen2view.o(i._ZN11Screen2View11addFanSpeedEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[15b]">Screen2View::setFanSpeed(int)</a> from screen2view.o(i._ZN11Screen2View11setFanSpeedEi) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[155]">Screen2View::setupScreen()</a> from screen2view.o(i._ZN11Screen2View11setupScreenEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[15a]">Screen2View::minusFanSpeed()</a> from screen2view.o(i._ZN11Screen2View13minusFanSpeedEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[156]">Screen2View::tearDownScreen()</a> from screen2view.o(i._ZN11Screen2View14tearDownScreenEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[158]">Screen2View::handleTickEvent()</a> from screen2view.o(i._ZN11Screen2View15handleTickEventEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[154]">Screen2View::~Screen2View()</a> from screen2view.o(i._ZN11Screen2ViewD1Ev) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[bf]">FrontendHeap::~FrontendHeap()</a> from boardconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from boardconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[bf]">FrontendHeap::~FrontendHeap()</a> from boardconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
 <LI><a href="#[cb]">ContainerDialog::buttonClicked(const touchgfx::AbstractButton&)</a> from containerdialog.o(i._ZN15ContainerDialog13buttonClickedERKN8touchgfx14AbstractButtonE) referenced from containerdialog.o(.constdata)
 <LI><a href="#[15d]">ContainerDialog::~ContainerDialog()</a> from containerdialog.o(i._ZN15ContainerDialogD1Ev) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[15f]">Screen1ViewBase::setupScreen()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[162]">Screen1ViewBase::buttonUpClicked()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase15buttonUpClickedEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[161]">Screen1ViewBase::buttonDownClicked()</a> from screen1viewbase.o(i._ZN15Screen1ViewBase17buttonDownClickedEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[d6]">Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from screen1viewbase.o(i._ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from screen1viewbase.o(.constdata)
 <LI><a href="#[15e]">Screen1ViewBase::~Screen1ViewBase()</a> from screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[165]">Screen2ViewBase::addFanSpeed()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase11addFanSpeedEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[167]">Screen2ViewBase::setFanSpeed(int)</a> from screen2viewbase.o(i._ZN15Screen2ViewBase11setFanSpeedEi) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[164]">Screen2ViewBase::setupScreen()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase11setupScreenEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[166]">Screen2ViewBase::minusFanSpeed()</a> from screen2viewbase.o(i._ZN15Screen2ViewBase13minusFanSpeedEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[d7]">Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</a> from screen2viewbase.o(i._ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE) referenced from screen2viewbase.o(.constdata)
 <LI><a href="#[d8]">Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer&)</a> from screen2viewbase.o(i._ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE) referenced from screen2viewbase.o(.constdata)
 <LI><a href="#[d9]">Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)</a> from screen2viewbase.o(i._ZN15Screen2ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi) referenced from screen2viewbase.o(.constdata)
 <LI><a href="#[163]">Screen2ViewBase::~Screen2ViewBase()</a> from screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[15c]">FrontendHeapBase::gotoStartScreen(FrontendApplication&)</a> from boardconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication) referenced from boardconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[15c]">FrontendHeapBase::gotoStartScreen(FrontendApplication&)</a> from boardconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication) referenced from boardconfiguration.o(.constdata__ZTV16FrontendHeapBase)
 <LI><a href="#[168]">FrontendHeapBase::~FrontendHeapBase()</a> from boardconfiguration.o(i._ZN16FrontendHeapBaseD1Ev) referenced from boardconfiguration.o(.constdata__ZTV16FrontendHeapBase)
 <LI><a href="#[16a]">Screen1Presenter::deactivate()</a> from screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[169]">Screen1Presenter::activate()</a> from screen1presenter.o(i._ZN16Screen1Presenter8activateEv) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[16b]">Screen1Presenter::~Screen1Presenter()</a> from screen1presenter.o(i._ZN16Screen1PresenterD1Ev) referenced from screen1presenter.o(.constdata__ZTV16Screen1Presenter)
 <LI><a href="#[16d]">Screen2Presenter::deactivate()</a> from screen2presenter.o(i._ZN16Screen2Presenter10deactivateEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[16c]">Screen2Presenter::activate()</a> from screen2presenter.o(i._ZN16Screen2Presenter8activateEv) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[16e]">Screen2Presenter::~Screen2Presenter()</a> from screen2presenter.o(i._ZN16Screen2PresenterD1Ev) referenced from screen2presenter.o(.constdata__ZTV16Screen2Presenter)
 <LI><a href="#[16f]">ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char)</a> from containerkeyboard.o(i._ZN17ContainerKeyboard11setTextAreaERN8touchgfx23TextAreaWithOneWildcardEPth) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[cd]">ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)</a> from containerkeyboard.o(i._ZN17ContainerKeyboard22usualKeyPressedhandlerERKN8touchgfx14AbstractButtonE) referenced from containerkeyboard.o(.constdata)
 <LI><a href="#[cc]">ContainerKeyboard::specialKeyPressedhandler(const touchgfx::AbstractButton&)</a> from containerkeyboard.o(i._ZN17ContainerKeyboard24specialKeyPressedhandlerERKN8touchgfx14AbstractButtonE) referenced from containerkeyboard.o(.constdata)
 <LI><a href="#[170]">ContainerDialogBase::~ContainerDialogBase()</a> from containerdialog.o(i._ZN19ContainerDialogBaseD1Ev) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[175]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[17a]">ContainerKeyboardBase::~ContainerKeyboardBase()</a> from screen1view.o(i._ZN21ContainerKeyboardBaseD1Ev) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[a4]">ApplicationFontProvider::~ApplicationFontProvider()</a> from boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[a4]">ApplicationFontProvider::~ApplicationFontProvider()</a> from boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[d3]">FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[d4]">FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[d5]">FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[17c]">FrontendApplicationBase::~FrontendApplicationBase()</a> from boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[17e]">touchgfx::Transition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[181]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[181]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[181]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[181]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[180]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[180]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[17f]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[17f]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[17d]">touchgfx::Transition::~Transition()</a> from frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
 <LI><a href="#[174]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[174]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[174]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[174]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[172]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[172]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[172]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[172]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[17b]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[17b]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[17b]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[171]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[171]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[171]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[171]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[173]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[173]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[173]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[173]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[179]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[179]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[179]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[179]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[182]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[178]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[178]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[178]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[178]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[177]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[177]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[177]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[177]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[189]">touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[189]">touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[189]">touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[183]">touchgfx::CanvasWidget::~CanvasWidget__sub_object()</a> from canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18f]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[18e]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[192]">touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[198]">touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[195]">touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener()</a> from screen1view.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[103]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[103]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[19b]">touchgfx::DMA_Interface::initialize()</a> from dma.o(i._ZN8touchgfx13DMA_Interface10initializeEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[10d]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10d]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[10e]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10e]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[10a]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10a]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[109]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[109]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[10f]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[10f]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[104]">touchgfx::DMA_Interface::flush()</a> from stm32f7dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[104]">touchgfx::DMA_Interface::flush()</a> from stm32f7dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[19c]">touchgfx::DMA_Interface::start()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5startEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[108]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
 <LI><a href="#[108]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[1a0]">touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)</a> from painterrgb565.o(i._ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19e]">touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</a> from painterrgb565.o(i._ZN8touchgfx13PainterRGB5656renderEPhiiijPKh) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19d]">touchgfx::PainterRGB565::~PainterRGB565()</a> from screen2view.o(i._ZN8touchgfx13PainterRGB565D1Ev) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[1a6]">touchgfx::TextureMapper::updateAngles(float, float, float)</a> from texturemapper.o(i._ZN8touchgfx13TextureMapper12updateAnglesEfff) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a7]">touchgfx::TextureMapper::setBitmapPosition(float, float)</a> from texturemapper.o(i._ZN8touchgfx13TextureMapper17setBitmapPositionEff) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a5]">touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)</a> from texturemapper.o(i._ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a2]">touchgfx::TextureMapper::~TextureMapper()</a> from texturemapper.o(i._ZN8touchgfx13TextureMapperD1Ev) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a8]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[1a8]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1a8]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1a8]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[1ab]">touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from buttonwithicon.o(i._ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[176]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[176]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[176]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[1af]">touchgfx::SnapshotWidget::makeSnapshot()</a> from snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1ac]">touchgfx::SnapshotWidget::~SnapshotWidget()</a> from snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetD1Ev) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1b0]">touchgfx::AbstractPainter::~AbstractPainter__sub_object()</a> from abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev) referenced from abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[1b1]">touchgfx::ButtonWithLabel::~ButtonWithLabel()</a> from containerkeyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1b4]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[1b8]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1bb]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1bc]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1ba]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::init()</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1b9]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tearDown()</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1b7]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition()</a> from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
 <LI><a href="#[1be]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::handleTickEvent()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1c1]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::initMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1c2]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tickMoveDrawable(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1c0]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::init()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1bf]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tearDown()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1bd]">touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition()</a> from frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
 <LI><a href="#[1c6]">touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::handlePressedUpdated()</a> from screen2view.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[1c3]">touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle()</a> from screen2view.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEED1Ev) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[1c7]">touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from screen2view.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE10setBitmapsERKNS_6BitmapES5_) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[1c7]">touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from screen2view.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE10setBitmapsERKNS_6BitmapES5_) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[1c9]">touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated()</a> from screen2view.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[1c8]">touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle()</a> from screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEED1Ev) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[1ca]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[9e]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[9e]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z23getFont_verdana_20_4bppv)
 <LI><a href="#[9e]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z26getFont_STSONG_TTF_20_4bppv)
 <LI><a href="#[9e]">touchgfx::InternalFlashFont::~InternalFlashFont()</a> from fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev) referenced from fontgetters.o(i._Z26getFont_STSONG_TTF_40_4bppv)
 <LI><a href="#[1da]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1db]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1dc]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1d9]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1d8]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[1dd]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[1dd]">touchgfx::MCUInstrumentation::getCCConsumed()</a> from boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1de]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[1de]">touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</a> from boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1c5]">touchgfx::RepeatButtonTrigger::handleTickEvent()</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[1c5]">touchgfx::RepeatButtonTrigger::handleTickEvent()</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[1c5]">touchgfx::RepeatButtonTrigger::handleTickEvent()</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[1c4]">touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[1c4]">touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[1c4]">touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[1df]">touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger()</a> from screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTriggerD1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[1e1]">touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e9]">touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e4]">touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e5]">touchgfx::ScrollableContainer::handleTickEvent()</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleTickEventEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e2]">touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e3]">touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e8]">touchgfx::ScrollableContainer::moveChildrenRelative(short, short)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1e6]">touchgfx::ScrollableContainer::add(touchgfx::Drawable&)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[1ea]">touchgfx::ScrollableContainer::doScroll(short, short)</a> from scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer8doScrollEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[19f]">touchgfx::AbstractPainterRGB565::renderInit()</a> from painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[19f]">touchgfx::AbstractPainterRGB565::renderInit()</a> from painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[1a1]">touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh) referenced from painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
 <LI><a href="#[1a1]">touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[1eb]">touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</a> from abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[1ed]">touchgfx::STM32F7Instrumentation::getCPUCycles()</a> from stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[1ec]">touchgfx::STM32F7Instrumentation::init()</a> from stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation4initEv) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[a7]">touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev) referenced from stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
 <LI><a href="#[a7]">touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1ef]">touchgfx::STM32F7TouchController::sampleTouch(int&, int&)</a> from stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController11sampleTouchERiS1_) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[1ee]">touchgfx::STM32F7TouchController::init()</a> from stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController4initEv) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[a6]">touchgfx::STM32F7TouchController::~STM32F7TouchController()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev) referenced from stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
 <LI><a href="#[a6]">touchgfx::STM32F7TouchController::~STM32F7TouchController()</a> from boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1e0]">touchgfx::AbstractButtonContainer::handlePressedUpdated()</a> from screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[1e0]">touchgfx::AbstractButtonContainer::handlePressedUpdated()</a> from screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[1f0]">touchgfx::AbstractButtonContainer::~AbstractButtonContainer()</a> from screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainerD1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[199]">touchgfx::TextAreaWithOneWildcard::getTextHeight()</a> from containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[199]">touchgfx::TextAreaWithOneWildcard::getTextHeight()</a> from containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f1]">touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</a> from containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f2]">touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()</a> from containerkeyboardbase.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f6]">touchgfx::Box::~Box()</a> from screen1view.o(i._ZN8touchgfx3BoxD1Ev) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[12a]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12a]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[119]">touchgfx::HAL::getBlitCaps()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[119]">touchgfx::HAL::getBlitCaps()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11c]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11c]">touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</a> from hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[121]">touchgfx::HAL::backPorchExited()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[121]">touchgfx::HAL::backPorchExited()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[117]">touchgfx::HAL::cacheTextString(const unsigned short*)</a> from hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[117]">touchgfx::HAL::cacheTextString(const unsigned short*)</a> from hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[114]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[114]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11b]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11b]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[1f9]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[112]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[112]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[1fa]">touchgfx::HAL::getTFTCurrentLine()</a> from hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[115]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[115]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11f]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11f]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[120]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[120]">touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11e]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11e]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[126]">touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[126]">touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[12f]">touchgfx::HAL::performDisplayOrientationChange()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12f]">touchgfx::HAL::performDisplayOrientationChange()</a> from stm32f7hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[be]">touchgfx::HAL::lcd()</a> from frontendapplicationbase.o(i._ZN8touchgfx3HAL3lcdEv) referenced from frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv)
 <LI><a href="#[129]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[129]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[12d]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12d]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[12e]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12e]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11a]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11a]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[11d]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[11d]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[12b]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[12b]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[113]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[113]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[118]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[118]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[127]">touchgfx::HAL::taskDelay(unsigned short)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[127]">touchgfx::HAL::taskDelay(unsigned short)</a> from stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[110]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[110]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[15]">touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</a> from lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list) referenced 2 times from texts.o(.data)
 <LI><a href="#[c0]">touchgfx::Rect::Rect()</a> from frontendapplicationbase.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
 <LI><a href="#[1fd]">touchgfx::View&lang;Screen1Presenter&rang;::~View()</a> from screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[1ff]">touchgfx::View&lang;Screen2Presenter&rang;::~View()</a> from screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[203]">touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</a> from image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[200]">touchgfx::Image::~Image()</a> from screen1view.o(i._ZN8touchgfx5ImageD1Ev) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[a1]">touchgfx::BlitOp::BlitOp()</a> from stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32f7dma.o(i._ZN10STM32F7DMAC1Ev)
 <LI><a href="#[1aa]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1aa]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1aa]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[204]">touchgfx::Button::~Button()</a> from containerdialog.o(i._ZN8touchgfx6ButtonD1Ev) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[205]">touchgfx::Canvas::~Canvas()</a> from canvas.o(i._ZN8touchgfx6CanvasD1Ev) referenced from canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
 <LI><a href="#[a2]">touchgfx::Point4::Point4()</a> from texturemapper.o(i._ZN8touchgfx6Point4C1Ev) referenced from texturemapper.o(i._ZN8touchgfx13TextureMapper19applyTransformationEv)
 <LI><a href="#[1fe]">touchgfx::Screen::setupScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[1fe]">touchgfx::Screen::setupScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[1fe]">touchgfx::Screen::setupScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[151]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[160]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[160]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[160]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[160]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[160]">touchgfx::Screen::tearDownScreen()</a> from screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[14b]">touchgfx::Screen::afterTransition()</a> from screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[14e]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[150]">touchgfx::Screen::handleTickEvent()</a> from screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[157]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[14f]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1view.o(.constdata__ZTV11Screen1View)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2view.o(.constdata__ZTV11Screen2View)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
 <LI><a href="#[149]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[208]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[20e]">touchgfx::Slider::setValueRange(int, int)</a> from slider.o(i._ZN8touchgfx6Slider13setValueRangeEii) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[20d]">touchgfx::Slider::setValueRange(int, int, int)</a> from slider.o(i._ZN8touchgfx6Slider13setValueRangeEiii) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[20b]">touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)</a> from slider.o(i._ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[20a]">touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)</a> from slider.o(i._ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[20c]">touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from slider.o(i._ZN8touchgfx6Slider19setupVerticalSliderEttttt) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[210]">touchgfx::Slider::updateIndicatorPosition(short)</a> from slider.o(i._ZN8touchgfx6Slider23updateIndicatorPositionEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[20f]">touchgfx::Slider::setValue(int)</a> from slider.o(i._ZN8touchgfx6Slider8setValueEi) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[209]">touchgfx::Slider::~Slider()</a> from slider.o(i._ZN8touchgfx6SliderD1Ev) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[187]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[216]">touchgfx::Widget::~Widget__sub_object()</a> from containerdialog.o(i._ZN8touchgfx6WidgetD2Ev) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[a3]">touchgfx::CWRUtil::Q5::Q5()</a> from line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev) referenced from line.o(i._ZN8touchgfx4LineC1Ev)
 <LI><a href="#[217]">touchgfx::Outline::~Outline()</a> from outline.o(i._ZN8touchgfx7OutlineD1Ev) referenced from outline.o(.constdata__ZTVN8touchgfx7OutlineE)
 <LI><a href="#[218]">touchgfx::Callback&lang;ModalDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from modaldialog.o(t._ZN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvE7executeES4_) referenced from modaldialog.o(.constdata__ZTVN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[21b]">touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::execute(ModalDialog::Answer)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvE7executeES3_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
 <LI><a href="#[21a]">touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::~Callback()</a> from screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvED1Ev) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
 <LI><a href="#[21e]">touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::execute(ContainerDialog::Answer)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvE7executeES3_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
 <LI><a href="#[21d]">touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::~Callback()</a> from screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvED1Ev) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
 <LI><a href="#[221]">touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::execute(ContainerKeyboard::SpecialKey)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvE7executeES3_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
 <LI><a href="#[220]">touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::~Callback()</a> from screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvED1Ev) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
 <LI><a href="#[224]">touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</a> from screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7executeES4_S7_) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[223]">touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::~Callback()</a> from screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvED1Ev) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[227]">touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from containerdialog.o(t._ZN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvE7executeES4_) referenced from containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[226]">touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from containerdialog.o(i._ZN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvED1Ev) referenced from containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22a]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[229]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22d]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22c]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[230]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::execute(const touchgfx::AbstractButtonContainer&)</a> from screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
 <LI><a href="#[22f]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::~Callback()</a> from screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
 <LI><a href="#[233]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)</a> from screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7executeES4_i) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[232]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()</a> from screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivED1Ev) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[236]">touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</a> from containerkeyboard.o(t._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvE7executeES4_) referenced from containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[235]">touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</a> from containerkeyboard.o(i._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvED1Ev) referenced from containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[239]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[238]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()</a> from frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[23c]">touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
 <LI><a href="#[23b]">touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</a> from frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
 <LI><a href="#[23e]">touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEE)
 <LI><a href="#[23d]">touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</a> from frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[138]">touchgfx::Drawable::setPosition(short, short, short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[142]">touchgfx::Drawable::moveRelative(short, short)</a> from drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[188]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[140]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[141]">touchgfx::Drawable::handleTickEvent()</a> from containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13e]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13f]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[139]">touchgfx::Drawable::setX(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13a]">touchgfx::Drawable::setY(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13b]">touchgfx::Drawable::setXY(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[143]">touchgfx::Drawable::moveTo(short, short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13c]">touchgfx::Drawable::setWidth(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[13d]">touchgfx::Drawable::setHeight(short)</a> from containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[23f]">touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[244]">touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[241]">touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[240]">touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[242]">touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[245]">touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[a8]">touchgfx::LCD16bpp::~LCD16bpp()</a> from boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[a8]">touchgfx::LCD16bpp::~LCD16bpp()</a> from boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
 <LI><a href="#[1f4]">touchgfx::TextArea::getTextHeight()</a> from textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f4]">touchgfx::TextArea::getTextHeight()</a> from textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[246]">touchgfx::TextArea::~TextArea()</a> from containerkeyboard.o(i._ZN8touchgfx8TextAreaD1Ev) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[147]">touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</a> from container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[135]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[144]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[145]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[146]">touchgfx::Container::remove(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[247]">touchgfx::Container::~Container()</a> from screen1view.o(i._ZN8touchgfx9ContainerD1Ev) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[249]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[24a]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[248]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[24c]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[24d]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[24b]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[24f]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
 <LI><a href="#[250]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
 <LI><a href="#[24e]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</a> from boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
 <LI><a href="#[252]">touchgfx::Presenter::deactivate()</a> from screen1presenter.o(i._ZN8touchgfx9Presenter10deactivateEv) referenced from screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[251]">touchgfx::Presenter::activate()</a> from screen1presenter.o(i._ZN8touchgfx9Presenter8activateEv) referenced from screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[253]">touchgfx::Presenter::~Presenter()</a> from screen1presenter.o(i._ZN8touchgfx9PresenterD1Ev) referenced from screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
 <LI><a href="#[116]">STM32F7HAL::getTFTFrameBuffer() const</a> from stm32f7hal.o(i._ZNK10STM32F7HAL17getTFTFrameBufferEv) referenced from stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
 <LI><a href="#[18a]">touchgfx::CanvasWidget::getPainter() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18a]">touchgfx::CanvasWidget::getPainter() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18a]">touchgfx::CanvasWidget::getPainter() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[186]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[186]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[186]">touchgfx::CanvasWidget::invalidate() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[185]">touchgfx::CanvasWidget::getSolidRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[185]">touchgfx::CanvasWidget::getSolidRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[185]">touchgfx::CanvasWidget::getSolidRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[18c]">touchgfx::CanvasWidget::getMinimalRect() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[184]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[184]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[184]">touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[18b]">touchgfx::CanvasWidget::getAlpha() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18b]">touchgfx::CanvasWidget::getAlpha() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[18b]">touchgfx::CanvasWidget::getAlpha() const</a> from canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[194]">touchgfx::BoxWithBorder::getSolidRect() const</a> from boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder12getSolidRectEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[193]">touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const</a> from boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[1a4]">touchgfx::TextureMapper::getSolidRect() const</a> from texturemapper.o(i._ZNK8touchgfx13TextureMapper12getSolidRectEv) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a3]">touchgfx::TextureMapper::draw(const touchgfx::Rect&) const</a> from texturemapper.o(i._ZNK8touchgfx13TextureMapper4drawERKNS_4RectE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[1a9]">touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const</a> from buttonwithicon.o(i._ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[1ae]">touchgfx::SnapshotWidget::getSolidRect() const</a> from snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget12getSolidRectEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1ad]">touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const</a> from snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[1b3]">touchgfx::ButtonWithLabel::getSolidRect() const</a> from buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel12getSolidRectEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1b2]">touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</a> from buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[1b6]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::getSolidRect() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[1b5]">touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::draw(const touchgfx::Rect&) const</a> from frontendapplicationbase.o(t._ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[1d5]">touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</a> from internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d7]">touchgfx::InternalFlashFont::getPixelData(const touchgfx::GlyphNode*) const</a> from internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1e7]">touchgfx::ScrollableContainer::getContainedArea() const</a> from scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer16getContainedAreaEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[19a]">touchgfx::TextAreaWithOneWildcard::getTextWidth() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[19a]">touchgfx::TextAreaWithOneWildcard::getTextWidth() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[196]">touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</a> from containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[196]">touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</a> from containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[1f8]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1f7]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[1d2]">touchgfx::Font::getFontHeight() const</a> from font.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d2]">touchgfx::Font::getFontHeight() const</a> from font.o(i._ZNK8touchgfx4Font13getFontHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1cf]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1cf]">touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1d4]">touchgfx::Font::getBitsPerPixel() const</a> from font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d4]">touchgfx::Font::getBitsPerPixel() const</a> from font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1ce]">touchgfx::Font::getEllipsisChar() const</a> from font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1ce]">touchgfx::Font::getEllipsisChar() const</a> from font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1cd]">touchgfx::Font::getFallbackChar() const</a> from font.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1cd]">touchgfx::Font::getFallbackChar() const</a> from font.o(i._ZNK8touchgfx4Font15getFallbackCharEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1d0]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d0]">touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1d1]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d1]">touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1d6]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d6]">touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</a> from font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[14]">touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</a> from font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list) referenced 2 times from texts.o(.data)
 <LI><a href="#[1d3]">touchgfx::Font::getMinimumTextHeight() const</a> from font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1d3]">touchgfx::Font::getMinimumTextHeight() const</a> from font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1cc]">touchgfx::Font::getGlyph(unsigned short) const</a> from font.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1cc]">touchgfx::Font::getGlyph(unsigned short) const</a> from font.o(i._ZNK8touchgfx4Font8getGlyphEt) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[1fb]">touchgfx::Line::getMinimalRect() const</a> from line.o(i._ZNK8touchgfx4Line14getMinimalRectEv) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[1fc]">touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</a> from line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[202]">touchgfx::Image::getSolidRect() const</a> from image.o(i._ZNK8touchgfx5Image12getSolidRectEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[201]">touchgfx::Image::draw(const touchgfx::Rect&) const</a> from image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[191]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[191]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[191]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[190]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[190]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[206]">touchgfx::Circle::getMinimalRect() const</a> from circle.o(i._ZNK8touchgfx6Circle14getMinimalRectEv) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[207]">touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const</a> from circle.o(i._ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[212]">touchgfx::Slider::positionToValue(short) const</a> from slider.o(i._ZNK8touchgfx6Slider15positionToValueEs) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[211]">touchgfx::Slider::valueToPosition(int) const</a> from slider.o(i._ZNK8touchgfx6Slider15valueToPositionEi) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[215]">touchgfx::Slider::getValueRangeSize() const</a> from slider.o(i._ZNK8touchgfx6Slider17getValueRangeSizeEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[213]">touchgfx::Slider::getIndicatorRadius() const</a> from slider.o(i._ZNK8touchgfx6Slider18getIndicatorRadiusEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[214]">touchgfx::Slider::getIndicatorPositionRangeSize() const</a> from slider.o(i._ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[219]">touchgfx::Callback&lang;ModalDialog, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from modaldialog.o(t._ZNK8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvE7isValidEv) referenced from modaldialog.o(.constdata__ZTVN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[21c]">touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
 <LI><a href="#[21f]">touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
 <LI><a href="#[222]">touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
 <LI><a href="#[225]">touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::isValid() const</a> from screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7isValidEv) referenced from screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[228]">touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from containerdialog.o(t._ZNK8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvE7isValidEv) referenced from containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22b]">touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[22e]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[231]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::isValid() const</a> from screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
 <LI><a href="#[234]">touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::isValid() const</a> from screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7isValidEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
 <LI><a href="#[237]">touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</a> from containerkeyboard.o(t._ZNK8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvE7isValidEv) referenced from containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[23a]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[134]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[136]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[133]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from line.o(.constdata__ZTVN8touchgfx4LineE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from image.o(.constdata__ZTVN8touchgfx5ImageE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from circle.o(.constdata__ZTVN8touchgfx6CircleE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[137]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[243]">touchgfx::LCD16bpp::bitDepth() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp8bitDepthEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[197]">touchgfx::TextArea::getSolidRect() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
 <LI><a href="#[197]">touchgfx::TextArea::getSolidRect() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
 <LI><a href="#[197]">touchgfx::TextArea::getSolidRect() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[197]">touchgfx::TextArea::getSolidRect() const</a> from containerkeyboardbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1f5]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f5]">touchgfx::TextArea::getTextWidth() const</a> from textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1f3]">touchgfx::TextArea::draw(const touchgfx::Rect&) const</a> from textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
 <LI><a href="#[1f3]">touchgfx::TextArea::draw(const touchgfx::Rect&) const</a> from textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE) referenced from textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
 <LI><a href="#[1cb]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
 <LI><a href="#[1cb]">touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</a> from constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh) referenced from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[132]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from modaldialog.o(.constdata__ZTV11ModalDialog)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from containerdialog.o(.constdata__ZTV15ContainerDialog)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from slider.o(.constdata__ZTVN8touchgfx6SliderE)
 <LI><a href="#[131]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from boardconfiguration.o(.constdata__ZTVN8touchgfx12FontProviderE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN11ModalDialog6AnswerEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN15ContainerDialog6AnswerEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN17ContainerKeyboard10SpecialKeyEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from containerdialog.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen2viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screen2viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_6SliderEivEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRNS_8DrawableEvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIvvvEE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from boardconfiguration.o(.constdata__ZTVN8touchgfx15TouchControllerE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 8 times from boardconfiguration.o(.constdata__ZTVN8touchgfx3LCDE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[18d]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[257]">__main</a> from __main.o(!!!main) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[256]">__sti___21_typedtextdatabase_cpp_42ef4e5b</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_42ef4e5b) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[254]">__sti___22_BoardConfiguration_cpp_2f1c5dae</a> from boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae) referenced from boardconfiguration.o(.init_array)
 <LI><a href="#[255]">__sti___9_texts_cpp_454ca793</a> from texts.o(i.__sti___9_texts_cpp_454ca793) referenced from texts.o(.init_array)
 <LI><a href="#[95]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[93]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[92]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[a9]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[a9]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[dd]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[de]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[aa]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_inc_pcb_refcount)
 <LI><a href="#[ab]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[dc]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[bb]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[9d]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from lwip.o(i.MX_LWIP_Init)
 <LI><a href="#[ca]">ethernetif_input</a> from ethernetif.o(i.ethernetif_input) referenced from ethernetif.o(.constdata)
 <LI><a href="#[94]">fputc</a> from utility.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[34e]">inv_auto_calibrate</a> from accel_auto_cal.o(.text) referenced 3 times from accel_auto_cal.o(.text)
 <LI><a href="#[b2]">inv_db_load_func</a> from data_builder.o(i.inv_db_load_func) referenced from data_builder.o(i.inv_init_data_builder)
 <LI><a href="#[b1]">inv_db_save_func</a> from data_builder.o(i.inv_db_save_func) referenced from data_builder.o(i.inv_init_data_builder)
 <LI><a href="#[b3]">inv_generate_eMPL_outputs</a> from empl_outputs.o(i.inv_generate_eMPL_outputs) referenced from empl_outputs.o(i.inv_start_eMPL_outputs)
 <LI><a href="#[2ec]">inv_generate_fast_nomot</a> from fast_no_motion.o(.text) referenced 2 times from fast_no_motion.o(.text)
 <LI><a href="#[91]">inv_generate_quaternion</a> from quaternion_supervisor.o(.text) referenced from quaternion_supervisor.o(.text)
 <LI><a href="#[b4]">inv_generate_results</a> from results_holder.o(i.inv_generate_results) referenced from results_holder.o(i.inv_start_results_holder)
 <LI><a href="#[2cc]">inv_generate_vector_compass_cal</a> from compass_vec_cal.o(.text) referenced 3 times from compass_vec_cal.o(.text)
 <LI><a href="#[8e]">inv_gtc_data_cb</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[90]">inv_gtc_load</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[8f]">inv_gtc_store</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[326]">inv_magnetic_disturbance_process</a> from mag_disturb.o(.text) referenced 4 times from mag_disturb.o(.text)
 <LI><a href="#[306]">inv_process_9x_sensor_fusion_cb</a> from fusion_9axis.o(.text) referenced 2 times from fusion_9axis.o(.text)
 <LI><a href="#[308]">inv_start_9x_sensor_fusion</a> from fusion_9axis.o(.text) referenced 2 times from fusion_9axis.o(.text)
 <LI><a href="#[af]">inv_start_eMPL_outputs</a> from empl_outputs.o(i.inv_start_eMPL_outputs) referenced from empl_outputs.o(i.inv_enable_eMPL_outputs)
 <LI><a href="#[2f5]">inv_start_fast_nomot</a> from fast_no_motion.o(.text) referenced 2 times from fast_no_motion.o(.text)
 <LI><a href="#[313]">inv_start_gyro_tc</a> from gyro_tc.o(.text) referenced 2 times from gyro_tc.o(.text)
 <LI><a href="#[354]">inv_start_in_use_auto_calibration</a> from accel_auto_cal.o(.text) referenced 2 times from accel_auto_cal.o(.text)
 <LI><a href="#[328]">inv_start_magnetic_disturbance</a> from mag_disturb.o(.text) referenced from mag_disturb.o(.text)
 <LI><a href="#[33c]">inv_start_quaternion</a> from quaternion_supervisor.o(.text) referenced 2 times from quaternion_supervisor.o(.text)
 <LI><a href="#[b0]">inv_start_results_holder</a> from results_holder.o(i.inv_start_results_holder) referenced from results_holder.o(i.inv_enable_results_holder)
 <LI><a href="#[2ce]">inv_start_vector_compass_cal</a> from compass_vec_cal.o(.text) referenced 2 times from compass_vec_cal.o(.text)
 <LI><a href="#[bc]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[db]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[b5]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[ac]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[f6]">nand0_DevCtrl</a> from fs_config.o(i.nand0_DevCtrl) referenced from fs_config.o(.constdata)
 <LI><a href="#[f1]">nand0_Init</a> from fs_config.o(i.nand0_Init) referenced from fs_config.o(.constdata)
 <LI><a href="#[f5]">nand0_RdInfo</a> from fs_config.o(i.nand0_RdInfo) referenced from fs_config.o(.constdata)
 <LI><a href="#[f3]">nand0_RdSect</a> from fs_config.o(i.nand0_RdSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[f2]">nand0_UnInit</a> from fs_config.o(i.nand0_UnInit) referenced from fs_config.o(.constdata)
 <LI><a href="#[f4]">nand0_WrSect</a> from fs_config.o(i.nand0_WrSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[b6]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[bd]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[b7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b8]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[da]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[9c]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from lwip.o(i.MX_LWIP_Init)
 <LI><a href="#[b9]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[b9]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[ba]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[257]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[259]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[25b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8f1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8f2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8f3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[8f4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[8f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25c]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[368]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[25e]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[260]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[262]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[263]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[264]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[8f6]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[266]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[268]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[269]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26a]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[26c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[26e]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[270]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[271]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[272]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[274]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[8f7]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[276]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[278]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[27a]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[27c]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[8f8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[293]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[27e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[280]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8f9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8fa]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[282]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[8fb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[284]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[8fc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[8fd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[286]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[8fe]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8ff]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[287]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[900]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[901]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[902]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[903]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[904]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[905]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[906]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[289]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[907]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[908]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[909]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[90a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[90b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[90c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[298]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[28c]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[90d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[28e]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[90e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[90f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[910]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[911]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[912]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[913]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[25a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[914]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[290]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[292]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[915]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[294]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[916]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3b7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[297]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[917]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[299]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8cb]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8ca]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; xTaskCallApplicationTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8c3]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[717]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[918]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3b4]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[919]"></a>inv_vector_compass_cal_sensitivity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, compass_vec_cal.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>inv_cheap_rand</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, compass_vec_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[2a3]"></a>inv_cheap_gaussian</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_cheap_gaussian &rArr; __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_rand
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[2aa]"></a>inv_combine_compass_data</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_combine_compass_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
</UL>

<P><STRONG><a name="[2ab]"></a>inv_set_terms</STRONG> (Thumb, 932 bytes, Stack size 72 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_set_terms
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[2ac]"></a>inv_compute_bias</STRONG> (Thumb, 2142 bytes, Stack size 176 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
</UL>

<P><STRONG><a name="[2b0]"></a>inv_center_sum</STRONG> (Thumb, 1784 bytes, Stack size 144 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_center_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2b2]"></a>inv_get_current_calibrated_compass</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inv_get_current_calibrated_compass &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>

<P><STRONG><a name="[2b5]"></a>inv_add_compass_block_data</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_add_compass_block_data &rArr; inv_get_current_calibrated_compass &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_got_compass_bias
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[2be]"></a>inv_check_sim</STRONG> (Thumb, 400 bytes, Stack size 144 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2c2]"></a>inv_reset_data_collection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_reset_data_collection &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2c4]"></a>inv_process_compass_only_cal</STRONG> (Thumb, 1720 bytes, Stack size 360 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = inv_process_compass_only_cal &rArr; inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_found
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_error
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_magnetic_disturbance
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_peaks
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_vector_compass_cal
</UL>

<P><STRONG><a name="[2cc]"></a>inv_generate_vector_compass_cal</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = inv_generate_vector_compass_cal &rArr; inv_process_compass_only_cal &rArr; inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> compass_vec_cal.o(.text)
</UL>
<P><STRONG><a name="[2ce]"></a>inv_start_vector_compass_cal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_start_vector_compass_cal &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> compass_vec_cal.o(.text)
</UL>
<P><STRONG><a name="[2d0]"></a>inv_stop_vector_compass_cal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, compass_vec_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[2d2]"></a>inv_init_vector_compass_cal</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_init_vector_compass_cal &rArr; inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
</UL>

<P><STRONG><a name="[2d4]"></a>inv_enable_vector_compass_cal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inv_enable_vector_compass_cal &rArr; inv_init_vector_compass_cal &rArr; inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[2d6]"></a>inv_disable_vector_compass_cal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, compass_vec_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[2e0]"></a>inv_init_maxmin</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_maxmin
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
</UL>

<P><STRONG><a name="[2d9]"></a>inv_fast_nomot_parameter</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_fast_nomot_parameter &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[2dd]"></a>inv_fast_nomot_parameter_3rd</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inv_fast_nomot_parameter_3rd &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[2de]"></a>inv_fast_nomot_set_gyro_bias</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_fast_nomot_set_gyro_bias &rArr; inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[91a]"></a>inv_set_fast_nomot_compass_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[91b]"></a>int_set_fast_nomot_gyro_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[91c]"></a>inv_set_fast_nomot_accel_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[91d]"></a>inv_get_fast_nomot_compass_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[91e]"></a>inv_get_fast_nomot_accel_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>inv_fast_nomot_store_data</STRONG> (Thumb, 140 bytes, Stack size 44 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_fast_nomot_store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[2eb]"></a>inv_fast_nomot_store_data_compass</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_fast_nomot_store_data_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
</UL>

<P><STRONG><a name="[2ed]"></a>inv_fast_nomot_reset_data_compass</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_fast_nomot_reset_data_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2f0]"></a>inv_fast_nomot_get_time_elaps</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2ef]"></a>inv_fast_nomot_parameter_compass</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2e4]"></a>inv_get_right_shift_by_rounding</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[2ee]"></a>inv_reset_min_max_gyro_accel_statistics</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2f2]"></a>inv_record_max_moment_in_no_motion_gyro</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_max_moment_in_no_motion_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2f1]"></a>inv_record_max_moment_in_no_motion_accel</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_max_moment_in_no_motion_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2e8]"></a>inv_record_min_moment_in_motion_gyro</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_min_moment_in_motion_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[2e7]"></a>inv_record_min_moment_in_motion_accel</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_min_moment_in_motion_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[2e5]"></a>inv_detect_motion_by_gyro_accel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inv_detect_motion_by_gyro_accel &rArr; inv_fast_nomot_parameter &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_min_moment_in_motion_accel
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_min_moment_in_motion_gyro
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2e9]"></a>inv_sensor_data_preprocess</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_sensor_data_preprocess &rArr; inv_fast_nomot_store_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data_compass
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[2ec]"></a>inv_generate_fast_nomot</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_generate_fast_nomot &rArr; inv_fast_nomot_set_gyro_bias &rArr; inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_max_moment_in_no_motion_accel
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_max_moment_in_no_motion_gyro
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_min_max_gyro_accel_statistics
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_compass
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_get_time_elaps
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_reset_data_compass
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_no_motion.o(.text)
</UL>
<P><STRONG><a name="[2f3]"></a>inv_set_default_number_of_samples</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_set_default_number_of_samples &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[2f4]"></a>inv_init_fast_nomot</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_init_fast_nomot &rArr; inv_set_default_number_of_samples &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
</UL>

<P><STRONG><a name="[2f5]"></a>inv_start_fast_nomot</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_start_fast_nomot &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_no_motion.o(.text)
</UL>
<P><STRONG><a name="[2f7]"></a>inv_stop_fast_nomot</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_fast_nomot
</UL>

<P><STRONG><a name="[2f8]"></a>inv_enable_fast_nomot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_enable_fast_nomot &rArr; inv_init_fast_nomot &rArr; inv_set_default_number_of_samples &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[2f9]"></a>inv_disable_fast_nomot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
</UL>

<P><STRONG><a name="[91f]"></a>inv_get_fnm_gyro_no_motion_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[920]"></a>inv_fnm_debug_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>inv_filter_correction_angle</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_filter_correction_angle &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[2fe]"></a>inv_perform_9x_fusion</STRONG> (Thumb, 894 bytes, Stack size 216 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = inv_perform_9x_fusion &rArr; inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_normalizef
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_multf
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_magnetic_disturbance_state
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_9x_sensor_fusion_cb
</UL>

<P><STRONG><a name="[306]"></a>inv_process_9x_sensor_fusion_cb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = inv_process_9x_sensor_fusion_cb &rArr; inv_perform_9x_fusion &rArr; inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusion_9axis.o(.text)
</UL>
<P><STRONG><a name="[307]"></a>inv_init_9x_fusion</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_init_9x_fusion &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
</UL>

<P><STRONG><a name="[921]"></a>inv_9x_fusion_set_mag_fb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[922]"></a>inv_9x_fusion_enable_jitter_reduction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[923]"></a>inv_9x_fusion_use_timestamps</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>inv_start_9x_sensor_fusion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_start_9x_sensor_fusion &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusion_9axis.o(.text)
</UL>
<P><STRONG><a name="[309]"></a>inv_stop_9x_sensor_fusion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[30a]"></a>inv_enable_9x_sensor_fusion</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_enable_9x_sensor_fusion &rArr; inv_init_9x_fusion &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[30b]"></a>inv_disable_9x_sensor_fusion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
</UL>

<P><STRONG><a name="[312]"></a>inv_init_gyro_ts</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_gyro_ts &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
</UL>

<P><STRONG><a name="[924]"></a>inv_set_gtc_max_temp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[925]"></a>inv_set_gtc_min_temp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[926]"></a>inv_set_gtc_min_diff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[927]"></a>inv_get_gyro_ts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[928]"></a>inv_set_gyro_ts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[929]"></a>inv_set_gtc_order</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[92a]"></a>inv_print_gtc_data</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>inv_start_gyro_tc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_start_gyro_tc &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>inv_stop_gyro_tc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[315]"></a>inv_enable_gyro_tc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_enable_gyro_tc &rArr; inv_register_load_store
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_load_store
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_gyro_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[317]"></a>inv_disable_gyro_tc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gyro_tc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[2c6]"></a>inv_set_magnetic_disturbance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[318]"></a>inv_init_magnetic_disturbance</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_magnetic_disturbance &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
</UL>

<P><STRONG><a name="[319]"></a>MagDisturbSetDisturbance</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MagDisturbSetDisturbance &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[31a]"></a>MagDisturbCheckSettling</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MagDisturbCheckSettling
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_acc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[31c]"></a>ComputeAngleVelocity</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[92b]"></a>inv_disable_dip_tracking</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>Mag3ofNormalizedLong</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mag3ofNormalizedLong &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[322]"></a>inv_track_dip_angle</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[31e]"></a>inv_check_magnetic_disturbance</STRONG> (Thumb, 758 bytes, Stack size 104 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_check_magnetic_disturbance &rArr; ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_on
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_got_compass_bias
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_local_field
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_correction
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_track_dip_angle
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag3ofNormalizedLong
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbCheckSettling
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbSetDisturbance
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
</UL>

<P><STRONG><a name="[326]"></a>inv_magnetic_disturbance_process</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_magnetic_disturbance_process &rArr; inv_check_magnetic_disturbance &rArr; ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_disturbance
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mag_disturb.o(.text)
</UL>
<P><STRONG><a name="[328]"></a>inv_start_magnetic_disturbance</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_start_magnetic_disturbance &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mag_disturb.o(.text)
</UL>
<P><STRONG><a name="[329]"></a>inv_stop_magnetic_disturbance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[32a]"></a>inv_enable_magnetic_disturbance</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_enable_magnetic_disturbance &rArr; inv_init_magnetic_disturbance &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_magnetic_disturbance
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[32b]"></a>inv_disable_magnetic_disturbance</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mag_disturb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[92c]"></a>inv_enable_dip_tracking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>inv_get_magnetic_disturbance_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[332]"></a>inv_generate_gyro_quaternion</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inv_generate_gyro_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_add
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[335]"></a>inv_set_quaternion</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>

<P><STRONG><a name="[336]"></a>inv_generate_accel_gyro_quaternion</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = inv_generate_accel_gyro_quaternion &rArr; accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_add
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_quat_from_accel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_quaternion
</UL>

<P><STRONG><a name="[33a]"></a>inv_stop_quaternion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[33b]"></a>inv_init_quaternion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_quaternion &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
</UL>

<P><STRONG><a name="[33c]"></a>inv_start_quaternion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_start_quaternion &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternion_supervisor.o(.text)
</UL>
<P><STRONG><a name="[33d]"></a>inv_enable_quaternion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_enable_quaternion &rArr; inv_init_quaternion &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[33e]"></a>inv_disable_quaternion</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[353]"></a>inv_init_accel_maxmin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[351]"></a>inv_record_good_accel_maxmin</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[33f]"></a>inv_get_current_calibrated_accel</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_get_current_calibrated_accel &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[34b]"></a>inv_sort_order_4_T</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
</UL>

<P><STRONG><a name="[347]"></a>inv_init_check_sample_balance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
</UL>

<P><STRONG><a name="[2d3]"></a>inv_init_check_sample_balance_parameter</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[348]"></a>inv_add_accel_block_data</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_add_accel_block_data &rArr; inv_get_current_calibrated_accel &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[349]"></a>inv_add_vector_block_data</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gravity
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2ba]"></a>inv_check_sample_balance</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_check_sample_balance
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sort_order_4_T
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[34e]"></a>inv_auto_calibrate</STRONG> (Thumb, 828 bytes, Stack size 112 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = inv_auto_calibrate &rArr; inv_combine_data_calculate_bias &rArr; inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel_float
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_good_accel_maxmin
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accel_auto_cal.o(.text)
</UL>
<P><STRONG><a name="[352]"></a>inv_init_in_use_auto_calibration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_accel_maxmin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_in_use_auto_calibration
</UL>

<P><STRONG><a name="[354]"></a>inv_start_in_use_auto_calibration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_start_in_use_auto_calibration &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accel_auto_cal.o(.text)
</UL>
<P><STRONG><a name="[355]"></a>inv_stop_in_use_auto_calibration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[356]"></a>inv_enable_in_use_auto_calibration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[357]"></a>inv_disable_in_use_auto_calibration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[92d]"></a>inv_get_accel_bias_stage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFormat
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[92e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_right_shift_by_rounding
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[92f]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_right_shift_by_rounding
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
</UL>

<P><STRONG><a name="[930]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
</UL>

<P><STRONG><a name="[358]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35a]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>

<P><STRONG><a name="[35c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewRootDir
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scan_files
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
</UL>

<P><STRONG><a name="[35e]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFormat
</UL>

<P><STRONG><a name="[360]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[361]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[35f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[267]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[365]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[26d]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[275]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[25f]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[366]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[369]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[36c]"></a>$Super$$fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[36d]"></a>fwrite</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fwrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
</UL>

<P><STRONG><a name="[36e]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[371]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
</UL>

<P><STRONG><a name="[36f]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3f3]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
</UL>

<P><STRONG><a name="[375]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[283]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[376]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::execute()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getPainter() const
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pop()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValueRange(int, int, int)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floorDivMod(int, int, int&, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[378]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_BoardConfiguration_cpp_2f1c5dae
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_40_4bpp()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_20_4bpp()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
</UL>

<P><STRONG><a name="[37a]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[931]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_quaternion
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[37c]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[5b4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[5b6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_save_func
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_load_func
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_store
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_load
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[37e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[932]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setElement(int, int, float)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[933]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[934]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[935]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_add_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[936]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[937]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[938]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[4e5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
</UL>

<P><STRONG><a name="[382]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[381]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SendCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask(const void*)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_eMPL_outputs
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_results_holder
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_storage_manager
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_start_manager
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_quaternion
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_magnetic_disturbance
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_gyro_ts
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[939]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[93a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[6d8]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[93b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[379]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[372]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[374]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[386]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[388]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[37d]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[362]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[363]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[364]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[25d]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[93c]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[35b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[92]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[393]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[277]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[279]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[35d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[395]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[26f]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[397]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[26b]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[273]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[36b]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[93d]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[39c]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[36a]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[39f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[28d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[377]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[3a2]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[37b]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[3a4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[93e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[93f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[384]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[285]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[387]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[940]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[941]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[942]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[943]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[3a6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[281]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[3a8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3a9]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[392]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[3aa]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[27b]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[27d]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[38b]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[394]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3ab]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3af]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3ad]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[3b6]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[944]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[945]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[28f]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[396]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[3a1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3a0]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[3a3]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[946]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[947]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[948]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3b1]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3b5]"></a>fread</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, freadfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
</UL>

<P><STRONG><a name="[3ae]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[296]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3b2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[3b0]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3a7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3b8]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3b9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[38c]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3bb]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3ba]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3bc]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3bd]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[38d]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[38e]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3be]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[3bf]"></a>AP3216C_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ap3216_iic_driver.o(i.AP3216C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AP3216C_Init &rArr; AP3216C_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_WriteOneByte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c4]"></a>AP3216C_ReadData</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ap3216_iic_driver.o(i.AP3216C_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AP3216C_ReadData &rArr; AP3216C_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[3c3]"></a>AP3216C_ReadOneByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ap3216_iic_driver.o(i.AP3216C_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AP3216C_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadData
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_Init
</UL>

<P><STRONG><a name="[3c1]"></a>AP3216C_WriteOneByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ap3216_iic_driver.o(i.AP3216C_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AP3216C_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_Init
</UL>

<P><STRONG><a name="[48e]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[3d0]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[3d2]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatusWithTimeout
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[3d4]"></a>BSP_SD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[3d5]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[3d8]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[3da]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_diskio.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[3dc]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[3de]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_diskio.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e0]"></a>CRC_Lock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[3df]"></a>CT_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>

<P><STRONG><a name="[3e1]"></a>CT_IIC_Ack</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Ack &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[3e3]"></a>CT_IIC_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gt9147_iic_driver.o(i.CT_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[3e5]"></a>CT_IIC_NAck</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[3e6]"></a>CT_IIC_Read_Byte</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, gt9147_iic_driver.o(i.CT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>

<P><STRONG><a name="[3e8]"></a>CT_IIC_Send_Byte</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gt9147_iic_driver.o(i.CT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>

<P><STRONG><a name="[3e9]"></a>CT_IIC_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Start &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>

<P><STRONG><a name="[3ea]"></a>CT_IIC_Stop</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[3eb]"></a>CT_IIC_Wait_Ack</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gt9147_iic_driver.o(i.CT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>

<P><STRONG><a name="[79]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41e]"></a>Driver_NAND0_GetDeviceBusy</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nand_driver.o(i.Driver_NAND0_GetDeviceBusy))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceBusy
</UL>

<P><STRONG><a name="[5d]"></a>ETH_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a0]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init()
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init()
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init()
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init()
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init()
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_MemoryMappedMode
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[40b]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[40c]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[462]"></a>FMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_NAND_AttributeSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NAND_AttributeSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[461]"></a>FMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_NAND_CommonSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NAND_CommonSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[460]"></a>FMC_NAND_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f7xx_ll_fmc.o(i.FMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[487]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[48a]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[48c]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[488]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[52d]"></a>GPIO_AF_Set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.GPIO_AF_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>

<P><STRONG><a name="[52c]"></a>GPIO_Set</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, system_stm32f7xx.o(i.GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>

<P><STRONG><a name="[412]"></a>GT9147_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gt9147_iic_driver.o(i.GT9147_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GT9147_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7TouchController::init()
</UL>

<P><STRONG><a name="[413]"></a>GT9147_RD_Reg</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gt9147_iic_driver.o(i.GT9147_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[414]"></a>GT9147_Send_Cfg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gt9147_iic_driver.o(i.GT9147_Send_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT9147_Send_Cfg &rArr; GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[415]"></a>GT9147_WR_Reg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gt9147_iic_driver.o(i.GT9147_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT9147_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
</UL>

<P><STRONG><a name="[548]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 414 bytes, Stack size 12 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
</UL>

<P><STRONG><a name="[420]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
</UL>

<P><STRONG><a name="[421]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[425]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[423]"></a>HAL_CRC_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init()
</UL>

<P><STRONG><a name="[424]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[53f]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init()
</UL>

<P><STRONG><a name="[426]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init()
</UL>

<P><STRONG><a name="[427]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[428]"></a>HAL_DMA2D_Abort</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[42a]"></a>HAL_DMA2D_BlendingStart_IT</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_BlendingStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DMA2D_BlendingStart_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[430]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[42c]"></a>HAL_DMA2D_CLUTLoading_Abort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoading_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[561]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[42d]"></a>HAL_DMA2D_DeInit</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_DeInit &rArr; HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspDeInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoading_Abort
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::~STM32F7DMA()
</UL>

<P><STRONG><a name="[3f4]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[431]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::initialize()
</UL>

<P><STRONG><a name="[42f]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[42e]"></a>HAL_DMA2D_MspDeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_init.o(i.HAL_DMA2D_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_MspDeInit &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>

<P><STRONG><a name="[432]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_init.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[436]"></a>HAL_DMA2D_Start_IT</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.HAL_DMA2D_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[49a]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[517]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[3f5]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[437]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init()
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[43a]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[400]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionEnable
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionEnable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[810]"></a>HAL_ETH_DMARxDescListInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_DMARxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[80f]"></a>HAL_ETH_DMATxDescListInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_DMATxDescListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[43e]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[812]"></a>HAL_ETH_GetReceivedFrame_IT</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_GetReceivedFrame_IT))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[401]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[43f]"></a>HAL_ETH_Init</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[440]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, ethernetif.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[443]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[43c]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[445]"></a>HAL_ETH_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ETH_Start &rArr; ETH_MACTransmissionEnable &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionEnable
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionEnable
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionEnable
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[813]"></a>HAL_ETH_TransmitFrame</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_TransmitFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_TransmitFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[43d]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[442]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[45d]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>

<P><STRONG><a name="[448]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, gt9147_iic_driver.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[406]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[3e4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[3e7]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[3e2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
</UL>

<P><STRONG><a name="[429]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoading_Abort
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Abort
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[525]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[449]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44b]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[44e]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[450]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_DeInit &rArr; HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[453]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[452]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ER_IRQHandler
</UL>

<P><STRONG><a name="[456]"></a>HAL_LTDC_Init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[454]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f7hal.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[451]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hw_init.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[457]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, hw_init.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[458]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::enableLCDControllerInterrupt()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[455]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[543]"></a>HAL_LTDC_SetPitch</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_SetPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_SetPitch
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
</UL>

<P><STRONG><a name="[53b]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config()
</UL>

<P><STRONG><a name="[53a]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config()
</UL>

<P><STRONG><a name="[53c]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config()
</UL>

<P><STRONG><a name="[44c]"></a>HAL_MspInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[45e]"></a>HAL_NAND_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_nand.o(i.HAL_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NAND_Init &rArr; HAL_NAND_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_CommonSpace_Timing_Init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AttributeSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>

<P><STRONG><a name="[45f]"></a>HAL_NAND_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_init.o(i.HAL_NAND_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NAND_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[433]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspDeInit
</UL>

<P><STRONG><a name="[435]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>

<P><STRONG><a name="[434]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[44a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[466]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[529]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[467]"></a>HAL_QSPI_Command</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SendCmd
</UL>

<P><STRONG><a name="[46a]"></a>HAL_QSPI_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init()
</UL>

<P><STRONG><a name="[46d]"></a>HAL_QSPI_MemoryMapped</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_MemoryMapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_MemoryMappedMode
</UL>

<P><STRONG><a name="[46b]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[46c]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[46e]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
</UL>

<P><STRONG><a name="[484]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[46f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[470]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[52a]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[61b]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[441]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[472]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[473]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[471]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[474]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[475]"></a>HAL_RNG_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init()
</UL>

<P><STRONG><a name="[476]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[546]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
</UL>

<P><STRONG><a name="[477]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask(const void*)
</UL>

<P><STRONG><a name="[479]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask(const void*)
</UL>

<P><STRONG><a name="[47a]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
</UL>

<P><STRONG><a name="[47b]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[47d]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
</UL>

<P><STRONG><a name="[480]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
</UL>

<P><STRONG><a name="[47f]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[481]"></a>HAL_SAI_Init</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, stm32f7xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init()
</UL>

<P><STRONG><a name="[482]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[485]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>

<P><STRONG><a name="[486]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_init.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[489]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
</UL>

<P><STRONG><a name="[48b]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
</UL>

<P><STRONG><a name="[48d]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_AbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[3d7]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[495]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[51b]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3d1]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[3d3]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[493]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[3d6]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[49c]"></a>HAL_SD_InitCard</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[49b]"></a>HAL_SD_MspInit</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[3d9]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[496]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[497]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[3dd]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[4a7]"></a>HAL_SPDIFRX_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f7xx_hal_spdifrx.o(i.HAL_SPDIFRX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init()
</UL>

<P><STRONG><a name="[4a8]"></a>HAL_SPDIFRX_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SPDIFRX_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
</UL>

<P><STRONG><a name="[44d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4c0]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4bf]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4c2]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[54c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[4a9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[4aa]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[61c]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
</UL>

<P><STRONG><a name="[4ac]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
</UL>

<P><STRONG><a name="[4bb]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ir_remote_driver.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4b1]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
</UL>

<P><STRONG><a name="[4b6]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
</UL>

<P><STRONG><a name="[4b7]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[4b8]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
</UL>

<P><STRONG><a name="[4ba]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[4bc]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4bd]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4be]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ir_remote_driver.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4c1]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4c5]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[4c3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4c7]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init()
</UL>

<P><STRONG><a name="[4c8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[530]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.LTDC_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LTDC_ER_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>LTDC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4cf]"></a>MPU9250_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mpu9250_iic_driver.o(i.MPU9250_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU9250_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d5]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mpu9250_iic_driver.o(i.MPU_Get_Accelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[4d7]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mpu9250_iic_driver.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[4d8]"></a>MPU_Get_Temperature</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mpu9250_iic_driver.o(i.MPU_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Get_Temperature &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[4d4]"></a>MPU_Read_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mpu9250_iic_driver.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Read_Byte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[4d6]"></a>MPU_Read_Len</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mpu9250_iic_driver.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
</UL>

<P><STRONG><a name="[4d2]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu9250_iic_driver.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[4d1]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu9250_iic_driver.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[4d9]"></a>MPU_Set_LPF</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250_iic_driver.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[4d3]"></a>MPU_Set_Rate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpu9250_iic_driver.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[4d0]"></a>MPU_Write_Byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mpu9250_iic_driver.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Write_Byte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[4da]"></a>MPU_Write_Len</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mpu9250_iic_driver.o(i.MPU_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[4db]"></a>MX_FATFS_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = MX_FATFS_Init &rArr; sd_scan_files &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scan_files
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask(const void*)
</UL>

<P><STRONG><a name="[4de]"></a>MX_LWIP_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip.o(i.MX_LWIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = MX_LWIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask(const void*)
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f3]"></a>NAND_EccToLayout</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, fs_nand_media.o(i.NAND_EccToLayout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NAND_EccToLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_SetupLayout
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[4e9]"></a>NAND_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, nand_driver.o(i.NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = NAND_Init &rArr; ReadFileData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Reset
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewRootDir
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateNewFile
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4eb]"></a>NAND_ReadID</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, nand_driver.o(i.NAND_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NAND_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[4ea]"></a>NAND_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nand_driver.o(i.NAND_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAND_Reset &rArr; FMC_NAND_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[4f2]"></a>NAND_SetupLayout</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, fs_nand_media.o(i.NAND_SetupLayout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NAND_SetupLayout &rArr; NAND_EccToLayout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EccToLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f4]"></a>PCF8574_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, pcf8574_iic_driver.o(i.PCF8574_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PCF8574_Init &rArr; SOFT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f6]"></a>PCF8574_ReadBit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pcf8574_iic_driver.o(i.PCF8574_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PCF8574_ReadBit &rArr; PCF8574_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[4f7]"></a>PCF8574_ReadOneByte</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pcf8574_iic_driver.o(i.PCF8574_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCF8574_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadBit
</UL>

<P><STRONG><a name="[4f8]"></a>PCF8574_WriteBit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pcf8574_iic_driver.o(i.PCF8574_WriteBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PCF8574_WriteBit &rArr; PCF8574_ReadOneByte &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f5]"></a>PCF8574_WriteOneByte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pcf8574_iic_driver.o(i.PCF8574_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCF8574_WriteOneByte &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
</UL>

<P><STRONG><a name="[4f9]"></a>QSPI_SendCmd</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, w25q256_driver.o(i.QSPI_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_SendCmd &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetReadParam
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetQE
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[4fa]"></a>QSPI_Transmit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, w25q256_driver.o(i.QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QSPI_Transmit &rArr; HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetReadParam
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetQE
</UL>

<P><STRONG><a name="[478]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[47e]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[47c]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[4ff]"></a>RefreshDataBlock</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, fs_nftl.o(i.RefreshDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>

<P><STRONG><a name="[51]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[500]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[503]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[4a2]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[505]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[506]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[508]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[4a3]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[4a4]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[50a]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[50b]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[50d]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[50e]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[50f]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[510]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[494]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[4a5]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[4a6]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[4a1]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[512]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[51a]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[513]"></a>SDMMC_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[491]"></a>SDMMC_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[49d]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[519]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[501]"></a>SDMMC_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[51c]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[52e]"></a>SDRAM_Send_Cmd</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, system_stm32f7xx.o(i.SDRAM_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDRAM_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>

<P><STRONG><a name="[c5]"></a>SD_initialize</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>SD_ioctl</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SD_read</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatusWithTimeout
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>SD_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>SD_write</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatusWithTimeout
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[520]"></a>SOFT_IIC_Ack</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOFT_IIC_Ack &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[521]"></a>SOFT_IIC_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Send_Byte
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
</UL>

<P><STRONG><a name="[3c0]"></a>SOFT_IIC_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, soft_iic_driver.o(i.SOFT_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SOFT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_Init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[522]"></a>SOFT_IIC_NAck</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[3c8]"></a>SOFT_IIC_Read_Byte</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, soft_iic_driver.o(i.SOFT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_NAck
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Ack
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
</UL>

<P><STRONG><a name="[3c6]"></a>SOFT_IIC_Send_Byte</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, soft_iic_driver.o(i.SOFT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SOFT_IIC_Send_Byte &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_WriteOneByte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
</UL>

<P><STRONG><a name="[3c5]"></a>SOFT_IIC_Start</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOFT_IIC_Start &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_WriteOneByte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
</UL>

<P><STRONG><a name="[3c9]"></a>SOFT_IIC_Stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_WriteOneByte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[3c7]"></a>SOFT_IIC_Wait_Ack</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, soft_iic_driver.o(i.SOFT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Stop
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_WriteOneByte
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadOneByte
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadOneByte
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[528]"></a>SystemClock_Config</STRONG> (Thumb, 276 bytes, Stack size 224 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemInit &rArr; SystemInit_ExtMemCtl &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[52b]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 692 bytes, Stack size 24 bytes, system_stm32f7xx.o(i.SystemInit_ExtMemCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit_ExtMemCtl &rArr; GPIO_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Send_Cmd
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4ab]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[4b9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[4ad]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4b2]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4ca]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[4cb]"></a>UART_CheckIdleState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[4c9]"></a>UART_SetConfig</STRONG> (Thumb, 884 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[52f]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[532]"></a>W25QXX_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25q256_driver.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25QXX_Init &rArr; W25QXX_SetReadParam &rArr; QSPI_SendCmd &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetReadParam
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SetQE
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_MemoryMappedMode
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[535]"></a>W25QXX_MemoryMappedMode</STRONG> (Thumb, 70 bytes, Stack size 72 bytes, w25q256_driver.o(i.W25QXX_MemoryMappedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25QXX_MemoryMappedMode &rArr; HAL_QSPI_MemoryMapped &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[533]"></a>W25QXX_SetQE</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w25q256_driver.o(i.W25QXX_SetQE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_SetQE &rArr; QSPI_SendCmd &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[534]"></a>W25QXX_SetReadParam</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w25q256_driver.o(i.W25QXX_SetReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_SetReadParam &rArr; QSPI_SendCmd &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[538]"></a>_MLPrintLog</STRONG> (Thumb, 202 bytes, Stack size 328 bytes, log_stm32.o(i._MLPrintLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
</UL>

<P><STRONG><a name="[541]"></a>MX_FMC_Init()</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, hw_init.o(i._Z11MX_FMC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_FMC_Init() &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[542]"></a>MX_LCD_Init()</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, hw_init.o(i._Z11MX_LCD_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_LCD_Init() &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetPitch
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[54f]"></a>GRAPHICS_Init()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, boardconfiguration.o(i._Z13GRAPHICS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GRAPHICS_Init() &rArr; touchgfx::touchgfx_init() &rArr; touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>StartTouchTask(const void*)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, main.o(i._Z14StartTouchTaskPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = StartTouchTask(const void*) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[553]"></a>MX_SDRAM_InitEx()</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, hw_init.o(i._Z15MX_SDRAM_InitExv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_SDRAM_InitEx() &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[555]"></a>GRAPHICS_HW_Init()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boardconfiguration.o(i._Z16GRAPHICS_HW_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GRAPHICS_HW_Init() &rArr; MX_LCD_Init() &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::init()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>StartDefaultTask(const void*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i._Z16StartDefaultTaskPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = StartDefaultTask(const void*) &rArr; MX_FATFS_Init &rArr; sd_scan_files &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_MainTask()
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[557]"></a>GRAPHICS_MainTask()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boardconfiguration.o(i._Z17GRAPHICS_MainTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GRAPHICS_MainTask()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask(const void*)
</UL>

<P><STRONG><a name="[c4]"></a>StartUpdateFontTask(const void*)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, main.o(i._Z19StartUpdateFontTaskPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = StartUpdateFontTask(const void*) &rArr; mpu_mpl_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_ReadData
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_ReadBit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[55a]"></a>getFont_verdana_20_4bpp()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fontgetters.o(i._Z23getFont_verdana_20_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_verdana_20_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[55d]"></a>getFont_STSONG_TTF_20_4bpp()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fontgetters.o(i._Z26getFont_STSONG_TTF_20_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_STSONG_TTF_20_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[55e]"></a>getFont_STSONG_TTF_40_4bpp()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, fontgetters.o(i._Z26getFont_STSONG_TTF_40_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = getFont_STSONG_TTF_40_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_42ef4e5b
</UL>

<P><STRONG><a name="[105]"></a>STM32F7DMA::initialize()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STM32F7DMA::initialize() &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[102]"></a>STM32F7DMA::getBlitCaps()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN10STM32F7DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[10b]"></a>STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, stm32f7dma.o(i._ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&) &rArr; HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::operator unsigned short() const
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[10c]"></a>STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, stm32f7dma.o(i._ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32F7DMA::setupDataFill(const touchgfx::BlitOp&) &rArr; HAL_DMA2D_Start_IT &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::operator unsigned short() const
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[107]"></a>STM32F7DMA::signalDMAInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMA18signalDMAInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7DMA::signalDMAInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[106]"></a>STM32F7DMA::start()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMA5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32F7DMA::start() &rArr; touchgfx::DMA_Interface::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[562]"></a>STM32F7DMA::STM32F7DMA()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32F7DMA::STM32F7DMA() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_BoardConfiguration_cpp_2f1c5dae
</UL>

<P><STRONG><a name="[949]"></a>STM32F7DMA::STM32F7DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAC1Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>STM32F7DMA::~STM32F7DMA()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STM32F7DMA::~STM32F7DMA() &rArr; HAL_DMA2D_DeInit &rArr; HAL_DMA2D_CLUTLoading_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_DeInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
</UL>
<P><STRONG><a name="[94a]"></a>STM32F7DMA::~STM32F7DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN10STM32F7DMAD1Ev), UNUSED)

<P><STRONG><a name="[123]"></a>STM32F7HAL::enableInterrupts()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[111]"></a>STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f7hal.o(i._ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[124]"></a>STM32F7HAL::disableInterrupts()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[128]"></a>STM32F7HAL::getTFTCurrentLine()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[12c]"></a>STM32F7HAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN10STM32F7HAL17setTFTFrameBufferEPt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[122]"></a>STM32F7HAL::configureInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32F7HAL::configureInterrupts() &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[125]"></a>STM32F7HAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN10STM32F7HAL28enableLCDControllerInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F7HAL::enableLCDControllerInterrupt()
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[c1]"></a>STM32F7HAL::~STM32F7HAL()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN10STM32F7HALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> boardconfiguration.o(t._ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss)
</UL>
<P><STRONG><a name="[94b]"></a>STM32F7HAL::~STM32F7HAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN10STM32F7HALD1Ev), UNUSED)

<P><STRONG><a name="[ce]"></a>ModalDialog::buttonClicked(const touchgfx::AbstractButton&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modaldialog.o(i._ZN11ModalDialog13buttonClickedERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModalDialog::buttonClicked(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modaldialog.o(.constdata)
</UL>
<P><STRONG><a name="[568]"></a>ModalDialog::ModalDialog()</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, modaldialog.o(i._ZN11ModalDialogC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ModalDialog::ModalDialog() &rArr; touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[94c]"></a>ModalDialog::ModalDialog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, modaldialog.o(i._ZN11ModalDialogC1Ev), UNUSED)

<P><STRONG><a name="[130]"></a>ModalDialog::~ModalDialog()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, screen1view.o(i._ZN11ModalDialogD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModalDialog::~ModalDialog() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
</UL>
<P><STRONG><a name="[94d]"></a>ModalDialog::~ModalDialog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN11ModalDialogD1Ev), UNUSED)

<P><STRONG><a name="[14a]"></a>Screen1View::setupScreen()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, screen1view.o(i._ZN11Screen1View11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Screen1View::setupScreen() &rArr; touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::setupScreen()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::setClickAction(touchgfx::GenericCallback&lang;const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;&)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[d0]"></a>Screen1View::modalAnswered(ModalDialog::Answer)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View13modalAnsweredEN11ModalDialog6AnswerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::modalAnswered(ModalDialog::Answer) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>Screen1View::dialogAnswered(ContainerDialog::Answer)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View14dialogAnsweredEN15ContainerDialog6AnswerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen1View::dialogAnswered(ContainerDialog::Answer) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>Screen1View::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[153]"></a>Screen1View::buttonUpClicked()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View15buttonUpClickedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Screen1View::buttonUpClicked() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[14d]"></a>Screen1View::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View16handleClickEventERKN8touchgfx10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Screen1View::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[d1]"></a>Screen1View::keyboardFinished(ContainerKeyboard::SpecialKey)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN11Screen1View16keyboardFinishedEN17ContainerKeyboard10SpecialKeyE))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>Screen1View::buttonDownClicked()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, screen1view.o(i._ZN11Screen1View17buttonDownClickedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Screen1View::buttonDownClicked() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[d2]"></a>Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1View20TextAreaClickHandlerERKN8touchgfx23TextAreaWithOneWildcardERKNS0_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&) &rArr; ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char) &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::setSpecialKeyCallback(touchgfx::GenericCallback&lang;ContainerKeyboard::SpecialKey, void, void&rang;&)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setVisible(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata)
</UL>
<P><STRONG><a name="[573]"></a>Screen1View::Screen1View()</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::ContainerKeyboard()
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialog::ContainerDialog()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[94e]"></a>Screen1View::Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, screen1view.o(i._ZN11Screen1ViewC1Ev), UNUSED)

<P><STRONG><a name="[148]"></a>Screen1View::~Screen1View()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Screen1View::~Screen1View() &rArr; Screen1ViewBase::~Screen1ViewBase() &rArr; touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialog::~ContainerDialog()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::~Callback()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::~Callback()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::~Callback()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::~Callback()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::~ModalDialog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
</UL>
<P><STRONG><a name="[94f]"></a>Screen1View::~Screen1View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1view.o(i._ZN11Screen1ViewD1Ev), UNUSED)

<P><STRONG><a name="[159]"></a>Screen2View::addFanSpeed()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View11addFanSpeedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[15b]"></a>Screen2View::setFanSpeed(int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View11setFanSpeedEi))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[155]"></a>Screen2View::setupScreen()</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, screen2view.o(i._ZN11Screen2View11setupScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = Screen2View::setupScreen() &rArr; touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::setupScreen()
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getBitmap() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[15a]"></a>Screen2View::minusFanSpeed()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View13minusFanSpeedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[156]"></a>Screen2View::tearDownScreen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen2view.o(i._ZN11Screen2View14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[158]"></a>Screen2View::handleTickEvent()</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, screen2view.o(i._ZN11Screen2View15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = Screen2View::handleTickEvent() &rArr; touchgfx::TextureMapper::updateAngles(float, float, float) &rArr; touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::updateAngles(float, float, float)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::getEnd&lang;int&rang;(T1&, T1&) const
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setStart&lang;int&rang;(T1, T1)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[57f]"></a>Screen2View::Screen2View()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::TextureMapper()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[950]"></a>Screen2View::Screen2View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewC1Ev), UNUSED)

<P><STRONG><a name="[154]"></a>Screen2View::~Screen2View()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Screen2View::~Screen2View() &rArr; Screen2ViewBase::~Screen2ViewBase() &rArr; touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle() &rArr; touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle() &rArr; touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger() &rArr; touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::~TextureMapper()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
</UL>
<P><STRONG><a name="[951]"></a>Screen2View::~Screen2View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2view.o(i._ZN11Screen2ViewD1Ev), UNUSED)

<P><STRONG><a name="[582]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::gotoStartScreen(FrontendApplication&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[952]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[bf]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FrontendHeap::~FrontendHeap() &rArr; touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::~FrontendHeapBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj)
<LI> boardconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[953]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[8da]"></a>ModelListener::bind(Model*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN13ModelListener4bindEP5Model))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[8e5]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[8e4]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[cb]"></a>ContainerDialog::buttonClicked(const touchgfx::AbstractButton&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, containerdialog.o(i._ZN15ContainerDialog13buttonClickedERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ContainerDialog::buttonClicked(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerdialog.o(.constdata)
</UL>
<P><STRONG><a name="[575]"></a>ContainerDialog::ContainerDialog()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, containerdialog.o(i._ZN15ContainerDialogC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ContainerDialog::ContainerDialog() &rArr; ContainerDialogBase::ContainerDialogBase() &rArr; touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[954]"></a>ContainerDialog::ContainerDialog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, containerdialog.o(i._ZN15ContainerDialogC1Ev), UNUSED)

<P><STRONG><a name="[15d]"></a>ContainerDialog::~ContainerDialog()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, containerdialog.o(i._ZN15ContainerDialogD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ContainerDialog::~ContainerDialog() &rArr; ContainerDialogBase::~ContainerDialogBase() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::~ContainerDialogBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
</UL>
<P><STRONG><a name="[955]"></a>ContainerDialog::~ContainerDialog__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerdialog.o(i._ZN15ContainerDialogD1Ev), UNUSED)

<P><STRONG><a name="[15f]"></a>Screen1ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[162]"></a>Screen1ViewBase::buttonUpClicked()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase15buttonUpClickedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[161]"></a>Screen1ViewBase::buttonDownClicked()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase17buttonDownClickedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[d6]"></a>Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[574]"></a>Screen1ViewBase::Screen1ViewBase()</STRONG> (Thumb, 1106 bytes, Stack size 56 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::add(touchgfx::Drawable&)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible()
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsVisible(bool)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsColor(touchgfx::colortype)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::ClickListener()
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::setWildcard(const unsigned short*)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(unsigned short)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype, bool)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype, bool)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[956]"></a>Screen1ViewBase::Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[15e]"></a>Screen1ViewBase::~Screen1ViewBase()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Screen1ViewBase::~Screen1ViewBase() &rArr; touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
</UL>
<P><STRONG><a name="[957]"></a>Screen1ViewBase::~Screen1ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN15Screen1ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[165]"></a>Screen2ViewBase::addFanSpeed()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase11addFanSpeedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[167]"></a>Screen2ViewBase::setFanSpeed(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase11setFanSpeedEi))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[164]"></a>Screen2ViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[166]"></a>Screen2ViewBase::minusFanSpeed()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase13minusFanSpeedEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[d7]"></a>Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&) &rArr; FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN15Screen2ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Screen2ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata)
</UL>
<P><STRONG><a name="[580]"></a>Screen2ViewBase::Screen2ViewBase()</STRONG> (Thumb, 1818 bytes, Stack size 72 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValue(int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValueRange(int, int)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::Circle()
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::setCapPrecision(int)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmapXY(unsigned short, unsigned short)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextPosition(short, short, short, short)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextColors(touchgfx::colortype, touchgfx::colortype)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButtonContainer::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButtonContainer&, void, void&rang;&)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::setDelay(int)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::setInterval(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::Screen2View()
</UL>

<P><STRONG><a name="[958]"></a>Screen2ViewBase::Screen2ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[163]"></a>Screen2ViewBase::~Screen2ViewBase()</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Screen2ViewBase::~Screen2ViewBase() &rArr; touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle() &rArr; touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle() &rArr; touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger() &rArr; touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::~Slider()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::~CanvasWidget__sub_object()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::~PainterRGB565()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::~Callback()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen2Presenter&rang;::~View()
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::~Screen2View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
</UL>
<P><STRONG><a name="[959]"></a>Screen2ViewBase::~Screen2ViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen2viewbase.o(i._ZN15Screen2ViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[15c]"></a>FrontendHeapBase::gotoStartScreen(FrontendApplication&)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, boardconfiguration.o(i._ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FrontendHeapBase::gotoStartScreen(FrontendApplication&) &rArr; FrontendApplicationBase::gotoScreen1ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(.constdata__ZTV16FrontendHeapBase)
<LI> boardconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[168]"></a>FrontendHeapBase::~FrontendHeapBase()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN16FrontendHeapBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTV16FrontendHeapBase)
</UL>
<P><STRONG><a name="[95a]"></a>FrontendHeapBase::~FrontendHeapBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN16FrontendHeapBaseD1Ev), UNUSED)

<P><STRONG><a name="[16a]"></a>Screen1Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[169]"></a>Screen1Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[8d8]"></a>Screen1Presenter::Screen1Presenter(Screen1View&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[95b]"></a>Screen1Presenter::Screen1Presenter__sub_object(Screen1View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterC1ER11Screen1View), UNUSED)

<P><STRONG><a name="[16b]"></a>Screen1Presenter::~Screen1Presenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTV16Screen1Presenter)
</UL>
<P><STRONG><a name="[95c]"></a>Screen1Presenter::~Screen1Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN16Screen1PresenterD1Ev), UNUSED)

<P><STRONG><a name="[16d]"></a>Screen2Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[16c]"></a>Screen2Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[8de]"></a>Screen2Presenter::Screen2Presenter(Screen2View&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterC1ER11Screen2View))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[95d]"></a>Screen2Presenter::Screen2Presenter__sub_object(Screen2View&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterC1ER11Screen2View), UNUSED)

<P><STRONG><a name="[16e]"></a>Screen2Presenter::~Screen2Presenter()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen2presenter.o(.constdata__ZTV16Screen2Presenter)
</UL>
<P><STRONG><a name="[95e]"></a>Screen2Presenter::~Screen2Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2presenter.o(i._ZN16Screen2PresenterD1Ev), UNUSED)

<P><STRONG><a name="[16f]"></a>ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, containerkeyboard.o(i._ZN17ContainerKeyboard11setTextAreaERN8touchgfx23TextAreaWithOneWildcardEPth))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char) &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
</UL>
<P><STRONG><a name="[572]"></a>ContainerKeyboard::setSpecialKeyCallback(touchgfx::GenericCallback&lang;ContainerKeyboard::SpecialKey, void, void&rang;&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, containerkeyboard.o(i._ZN17ContainerKeyboard21setSpecialKeyCallbackERN8touchgfx15GenericCallbackINS_10SpecialKeyEvvEE))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
</UL>

<P><STRONG><a name="[cd]"></a>ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 1560 bytes, Stack size 24 bytes, containerkeyboard.o(i._ZN17ContainerKeyboard22usualKeyPressedhandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::getLabelText() const
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ContainerKeyboard::specialKeyPressedhandler(const touchgfx::AbstractButton&)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, containerkeyboard.o(i._ZN17ContainerKeyboard24specialKeyPressedhandlerERKN8touchgfx14AbstractButtonE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ContainerKeyboard::specialKeyPressedhandler(const touchgfx::AbstractButton&) &rArr; touchgfx::Drawable::invalidate() const
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata)
</UL>
<P><STRONG><a name="[576]"></a>ContainerKeyboard::ContainerKeyboard()</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN17ContainerKeyboardC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ContainerKeyboard::ContainerKeyboard() &rArr; ContainerKeyboardBase::ContainerKeyboardBase() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::Callback(ContainerKeyboard*, void(ContainerKeyboard::*)(const touchgfx::AbstractButton&))
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
</UL>

<P><STRONG><a name="[95f]"></a>ContainerKeyboard::ContainerKeyboard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN17ContainerKeyboardC1Ev), UNUSED)

<P><STRONG><a name="[64a]"></a>TypedTextDatabase::getInstance(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase11getInstanceEt))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[64c]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[64b]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[586]"></a>ContainerDialogBase::ContainerDialogBase()</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, containerdialogbase.o(i._ZN19ContainerDialogBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ContainerDialogBase::ContainerDialogBase() &rArr; touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialog::ContainerDialog()
</UL>

<P><STRONG><a name="[960]"></a>ContainerDialogBase::ContainerDialogBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, containerdialogbase.o(i._ZN19ContainerDialogBaseC1Ev), UNUSED)

<P><STRONG><a name="[170]"></a>ContainerDialogBase::~ContainerDialogBase()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, containerdialog.o(i._ZN19ContainerDialogBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ContainerDialogBase::~ContainerDialogBase() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialog::~ContainerDialog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
</UL>
<P><STRONG><a name="[961]"></a>ContainerDialogBase::~ContainerDialogBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, containerdialog.o(i._ZN19ContainerDialogBaseD1Ev), UNUSED)

<P><STRONG><a name="[175]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; touchgfx::Application::handleTickEvent()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[584]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[962]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[5b7]"></a>ContainerKeyboardBase::ContainerKeyboardBase()</STRONG> (Thumb, 6434 bytes, Stack size 32 bytes, containerkeyboardbase.o(i._ZN21ContainerKeyboardBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ContainerKeyboardBase::ContainerKeyboardBase() &rArr; touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ToggleButton::ToggleButton()
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setColor(touchgfx::colortype)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setLinespacing(unsigned short)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype, bool)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype, bool)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::ContainerKeyboard()
</UL>

<P><STRONG><a name="[963]"></a>ContainerKeyboardBase::ContainerKeyboardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, containerkeyboardbase.o(i._ZN21ContainerKeyboardBaseC1Ev), UNUSED)

<P><STRONG><a name="[17a]"></a>ContainerKeyboardBase::~ContainerKeyboardBase()</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, screen1view.o(i._ZN21ContainerKeyboardBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ContainerKeyboardBase::~ContainerKeyboardBase() &rArr; touchgfx::ButtonWithLabel::~ButtonWithLabel() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
</UL>
<P><STRONG><a name="[964]"></a>ContainerKeyboardBase::~ContainerKeyboardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1view.o(i._ZN21ContainerKeyboardBaseD1Ev), UNUSED)

<P><STRONG><a name="[a4]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
</UL>
<P><STRONG><a name="[965]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[5b3]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransition()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransition() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeapBase::gotoStartScreen(FrontendApplication&)
</UL>

<P><STRONG><a name="[d3]"></a>FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[59c]"></a>FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[588]"></a>FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast() &rArr; touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[d4]"></a>FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl() &rArr; T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[5ba]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[966]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[17c]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[967]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[8d9]"></a>Model::bind(ModelListener*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN5Model4bindEP13ModelListener))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[5b9]"></a>Model::tick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[585]"></a>Model::Model()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[968]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[60e]"></a>touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[969]"></a>touchgfx::ClickEvent::ClickEvent__sub_object(touchgfx::ClickEvent::ClickEventType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, screen.o(i._ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss), UNUSED)

<P><STRONG><a name="[5c4]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[459]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[5c8]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::taskEntry()
</UL>

<P><STRONG><a name="[5ca]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
</UL>

<P><STRONG><a name="[5cb]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[5cd]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[5ce]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[5d0]"></a>touchgfx::Rasterizer::lineTo(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
</UL>

<P><STRONG><a name="[5d2]"></a>touchgfx::Rasterizer::moveTo(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canvas.o(i._ZN8touchgfx10Rasterizer6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[17e]"></a>touchgfx::Transition::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
</UL>
<P><STRONG><a name="[181]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[180]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 2]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[17f]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 2]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[8d5]"></a>touchgfx::Transition::Transition()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[96a]"></a>touchgfx::Transition::Transition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionC1Ev), UNUSED)

<P><STRONG><a name="[17d]"></a>touchgfx::Transition::~Transition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx10TransitionE)
</UL>
<P><STRONG><a name="[96b]"></a>touchgfx::Transition::~Transition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10TransitionD1Ev), UNUSED)

<P><STRONG><a name="[587]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveRelative(short, short)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[174]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[5d4]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[172]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[17b]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Application::handleTickEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[171]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[173]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[179]"></a>touchgfx::Application::cacheDrawOperations(bool)</STRONG> (Thumb, 500 bytes, Stack size 136 bytes, application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::cacheDrawOperations(bool) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[5df]"></a>touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::registerTimerWidget(touchgfx::Drawable*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
</UL>

<P><STRONG><a name="[5e2]"></a>touchgfx::Application::clearAllTimerWidgets()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application20clearAllTimerWidgetsEv))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[607]"></a>touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, application.o(i._ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[182]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[178]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect) &rArr; touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[177]"></a>touchgfx::Application::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Application::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[5c1]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Application::Application() &rArr; touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[96c]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[8e6]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[5e3]"></a>touchgfx::floorDivMod(int, int, int&, int&)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, texturemaptypes.o(i._ZN8touchgfx11floorDivModEiiRiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::floorDivMod(int, int, int&, int&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[189]"></a>touchgfx::CanvasWidget::setPainter(touchgfx::AbstractPainter&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[5e4]"></a>touchgfx::CanvasWidget::CanvasWidget__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::Circle()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
</UL>

<P><STRONG><a name="[96d]"></a>touchgfx::CanvasWidget::~CanvasWidget()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev), UNUSED)

<P><STRONG><a name="[183]"></a>touchgfx::CanvasWidget::~CanvasWidget__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canvaswidget.o(i._ZN8touchgfx12CanvasWidgetD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[684]"></a>touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_11GestureTypeEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[96e]"></a>touchgfx::GestureEvent::GestureEvent__sub_object(touchgfx::GestureEvent::GestureType, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gestures.o(i._ZN8touchgfx12GestureEventC1ENS0_11GestureTypeEsss), UNUSED)

<P><STRONG><a name="[18f]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[18e]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[96f]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[5e5]"></a>touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, textprovider.o(i._ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list) &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[5e7]"></a>touchgfx::TextProvider::getNextChar()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider11getNextCharEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[5e9]"></a>touchgfx::TextProvider::getNextLigature(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, textprovider.o(i._ZN8touchgfx12TextProvider15getNextLigatureEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[5e6]"></a>touchgfx::TextProvider::initializeInternal()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProvider18initializeInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[5e8]"></a>touchgfx::TextProvider::getNextCharInternal()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, textprovider.o(i._ZN8touchgfx12TextProvider19getNextCharInternalEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>

<P><STRONG><a name="[5ea]"></a>touchgfx::TextProvider::TextProvider()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initializeInternal()
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[970]"></a>touchgfx::TextProvider::TextProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, textprovider.o(i._ZN8touchgfx12TextProviderC1Ev), UNUSED)

<P><STRONG><a name="[192]"></a>touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[5bb]"></a>touchgfx::ToggleButton::ToggleButton()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, togglebutton.o(i._ZN8touchgfx12ToggleButtonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::ToggleButton::ToggleButton() &rArr; touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
</UL>

<P><STRONG><a name="[971]"></a>touchgfx::ToggleButton::ToggleButton__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, togglebutton.o(i._ZN8touchgfx12ToggleButtonC1Ev), UNUSED)

<P><STRONG><a name="[696]"></a>touchgfx::fixed28_4Mul(int, int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, texturemaptypes.o(i._ZN8touchgfx12fixed28_4MulEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
</UL>

<P><STRONG><a name="[103]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[19b]"></a>touchgfx::DMA_Interface::initialize()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10initializeEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[10d]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[10e]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[10a]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[629]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[109]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[10f]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[104]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f7dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::flush()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[19c]"></a>touchgfx::DMA_Interface::start()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[108]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::DMA_Interface::execute() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7dma.o(.constdata__ZTV10STM32F7DMA)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
</UL>
<P><STRONG><a name="[1a0]"></a>touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB56510renderNextERhS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::PainterRGB565::renderNext(unsigned char&, unsigned char&, unsigned char&, unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[19e]"></a>touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB5656renderEPhiiijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::PainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[5ad]"></a>touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB5658setColorENS_9colortypeEh))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[5a2]"></a>touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::setColor(touchgfx::colortype, unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::AbstractPainter__sub_object()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[972]"></a>touchgfx::PainterRGB565::PainterRGB565__sub_object(touchgfx::colortype, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, painterrgb565.o(i._ZN8touchgfx13PainterRGB565C1ENS_9colortypeEh), UNUSED)

<P><STRONG><a name="[19d]"></a>touchgfx::PainterRGB565::~PainterRGB565()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, screen2view.o(i._ZN8touchgfx13PainterRGB565D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::PainterRGB565::~PainterRGB565()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::~AbstractPainter__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
</UL>
<P><STRONG><a name="[973]"></a>touchgfx::PainterRGB565::~PainterRGB565__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2view.o(i._ZN8touchgfx13PainterRGB565D1Ev), UNUSED)

<P><STRONG><a name="[1a6]"></a>touchgfx::TextureMapper::updateAngles(float, float, float)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapper12updateAnglesEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextureMapper::updateAngles(float, float, float) &rArr; touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getBoundingRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[1a7]"></a>touchgfx::TextureMapper::setBitmapPosition(float, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapper17setBitmapPositionEff))
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[57a]"></a>touchgfx::TextureMapper::applyTransformation()</STRONG> (Thumb, 762 bytes, Stack size 1144 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapper19applyTransformationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Point4&)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::Matrix4x4()
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateZTranslation(float)
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateYTranslation(float)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateXTranslation(float)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateZRotation(float)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateYRotation(float)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateXRotation(float)
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateZScale(float)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateYScale(float)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateXScale(float)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setViewDistance(float)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector4::Vector4(float, float, float)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Point4::Point4(float, float, float)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::updateAngles(float, float, float)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
</UL>

<P><STRONG><a name="[1a5]"></a>touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::TextureMapper::applyTransformation() &rArr; touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[581]"></a>touchgfx::TextureMapper::TextureMapper()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapperC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextureMapper::TextureMapper() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::Screen2View()
</UL>

<P><STRONG><a name="[974]"></a>touchgfx::TextureMapper::TextureMapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapperC1Ev), UNUSED)

<P><STRONG><a name="[1a2]"></a>touchgfx::TextureMapper::~TextureMapper()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapperD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::~Screen2View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[975]"></a>touchgfx::TextureMapper::~TextureMapper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx13TextureMapperD1Ev), UNUSED)

<P><STRONG><a name="[550]"></a>touchgfx::touchgfx_init()</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, boardconfiguration.o(i._ZN8touchgfx13touchgfx_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = touchgfx::touchgfx_init() &rArr; touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::STM32F7Instrumentation::init()
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init()
</UL>

<P><STRONG><a name="[1a8]"></a>touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
</UL>
<P><STRONG><a name="[56e]"></a>touchgfx::AbstractButton::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButton&, void, void&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerkeyboard.o(i._ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::ContainerKeyboard()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[1ab]"></a>touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
</UL>
<P><STRONG><a name="[58c]"></a>touchgfx::ButtonWithIcon::ButtonWithIcon()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIconC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithIcon::ButtonWithIcon() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[976]"></a>touchgfx::ButtonWithIcon::ButtonWithIcon__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, buttonwithicon.o(i._ZN8touchgfx14ButtonWithIconC1Ev), UNUSED)

<P><STRONG><a name="[176]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boardconfiguration.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> boardconfiguration.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[1af]"></a>touchgfx::SnapshotWidget::makeSnapshot()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidget12makeSnapshotEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SnapshotWidget::makeSnapshot()
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[5fd]"></a>touchgfx::SnapshotWidget::SnapshotWidget()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::SnapshotWidget::SnapshotWidget() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
</UL>

<P><STRONG><a name="[977]"></a>touchgfx::SnapshotWidget::SnapshotWidget__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetC1Ev), UNUSED)

<P><STRONG><a name="[1ac]"></a>touchgfx::SnapshotWidget::~SnapshotWidget()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[978]"></a>touchgfx::SnapshotWidget::~SnapshotWidget__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, snapshotwidget.o(i._ZN8touchgfx14SnapshotWidgetD1Ev), UNUSED)

<P><STRONG><a name="[657]"></a>touchgfx::AbstractPainter::setWidgetAlpha(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainter14setWidgetAlphaEh))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[656]"></a>touchgfx::AbstractPainter::setOffset(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainter9setOffsetEtt))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[5eb]"></a>touchgfx::AbstractPainter::AbstractPainter__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::PainterRGB565(touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[979]"></a>touchgfx::AbstractPainter::~AbstractPainter()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev), UNUSED)

<P><STRONG><a name="[1b0]"></a>touchgfx::AbstractPainter::~AbstractPainter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpainter.o(i._ZN8touchgfx15AbstractPainterD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::PainterRGB565::~PainterRGB565()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
</UL>
<P><STRONG><a name="[58f]"></a>touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, containerkeyboardbase.o(i._ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText) &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[591]"></a>touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype, bool)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, containerkeyboardbase.o(i._ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelColor(touchgfx::colortype, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[592]"></a>touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype, bool)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, containerkeyboardbase.o(i._ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithLabel::setLabelColorPressed(touchgfx::colortype, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[58a]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithLabel::ButtonWithLabel() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[97a]"></a>touchgfx::ButtonWithLabel::ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, buttonwithlabel.o(i._ZN8touchgfx15ButtonWithLabelC1Ev), UNUSED)

<P><STRONG><a name="[1b1]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ButtonWithLabel::~ButtonWithLabel() &rArr; touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[97b]"></a>touchgfx::ButtonWithLabel::~ButtonWithLabel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN8touchgfx15ButtonWithLabelD1Ev), UNUSED)

<P><STRONG><a name="[5ff]"></a>touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, easingequations.o(i._ZN8touchgfx15EasingEquations12cubicEaseOutEtsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::roundRespectSign(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::handleTickEvent()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleTickEvent()
</UL>

<P><STRONG><a name="[600]"></a>touchgfx::EasingEquations::roundRespectSign(float)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, easingequations.o(i._ZN8touchgfx15EasingEquations16roundRespectSignEf))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[8e8]"></a>touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;::GenericCallback__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>

<P><STRONG><a name="[5c2]"></a>touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx15GenericCallbackIvvvEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>

<P><STRONG><a name="[65f]"></a>touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBuffer6attachEPhhjji))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[65a]"></a>touchgfx::RenderingBuffer::RenderingBuffer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[97c]"></a>touchgfx::RenderingBuffer::RenderingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferC1Ev), UNUSED)

<P><STRONG><a name="[660]"></a>touchgfx::RenderingBuffer::~RenderingBuffer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>

<P><STRONG><a name="[97d]"></a>touchgfx::RenderingBuffer::~RenderingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, renderingbuffer.o(i._ZN8touchgfx15RenderingBufferD1Ev), UNUSED)

<P><STRONG><a name="[601]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[602]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[640]"></a>touchgfx::fixed28_4ToFloat(int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx16fixed28_4ToFloatEi))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[69b]"></a>touchgfx::floatToFixed28_4(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx16floatToFixed28_4Ef))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[583]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[97e]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[1ca]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[55c]"></a>touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, internalflashfont.o(i._ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_40_4bpp()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_20_4bpp()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
</UL>

<P><STRONG><a name="[97f]"></a>touchgfx::InternalFlashFont::InternalFlashFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, internalflashfont.o(i._ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt), UNUSED)

<P><STRONG><a name="[9e]"></a>touchgfx::InternalFlashFont::~InternalFlashFont()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev))
<BR>[Address Reference Count : 4]<UL><LI> fontgetters.o(i._Z23getFont_verdana_20_4bppv)
<LI> fontgetters.o(i._Z26getFont_STSONG_TTF_20_4bppv)
<LI> fontgetters.o(i._Z26getFont_STSONG_TTF_40_4bppv)
<LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[980]"></a>touchgfx::InternalFlashFont::~InternalFlashFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fontgetters.o(i._ZN8touchgfx17InternalFlashFontD1Ev), UNUSED)

<P><STRONG><a name="[1da]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1db]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1dc]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1d9]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1d8]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[563]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
</UL>

<P><STRONG><a name="[981]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[68a]"></a>touchgfx::floatToFixed16_16(float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx17floatToFixed16_16Ef))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1dd]"></a>touchgfx::MCUInstrumentation::getCCConsumed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13getCCConsumedEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
</UL>
<P><STRONG><a name="[1de]"></a>touchgfx::MCUInstrumentation::setCCConsumed(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx18MCUInstrumentation13setCCConsumedEj))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
</UL>
<P><STRONG><a name="[5a6]"></a>touchgfx::RepeatButtonTrigger::setInterval(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTrigger11setIntervalEi))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[1c5]"></a>touchgfx::RepeatButtonTrigger::handleTickEvent()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::RepeatButtonTrigger::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
</UL>
<P><STRONG><a name="[1c4]"></a>touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, screen2view.o(i._ZN8touchgfx19RepeatButtonTrigger16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::RepeatButtonTrigger::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Application::registerTimerWidget(touchgfx::Drawable*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
</UL>
<P><STRONG><a name="[5a5]"></a>touchgfx::RepeatButtonTrigger::setDelay(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTrigger8setDelayEi))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[608]"></a>touchgfx::RepeatButtonTrigger::RepeatButtonTrigger()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTriggerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::RepeatButtonTrigger::RepeatButtonTrigger() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
</UL>

<P><STRONG><a name="[982]"></a>touchgfx::RepeatButtonTrigger::RepeatButtonTrigger__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTriggerC1Ev), UNUSED)

<P><STRONG><a name="[1df]"></a>touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTriggerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger() &rArr; touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
</UL>
<P><STRONG><a name="[983]"></a>touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2viewbase.o(i._ZN8touchgfx19RepeatButtonTriggerD1Ev), UNUSED)

<P><STRONG><a name="[1e1]"></a>touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1e9]"></a>touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScrollableContainer::isScrollableXY(bool&, bool&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1e4]"></a>touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 632 bytes, Stack size 96 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::getDeltaY() const
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::getDeltaX() const
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1e5]"></a>touchgfx::ScrollableContainer::handleTickEvent()</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::ScrollableContainer::handleTickEvent() &rArr; touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1e2]"></a>touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 736 bytes, Stack size 168 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::unregisterTimerWidget(const touchgfx::Drawable*)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1e3]"></a>touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Application::registerTimerWidget(touchgfx::Drawable*) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::registerTimerWidget(touchgfx::Drawable*)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[598]"></a>touchgfx::ScrollableContainer::setScrollbarsColor(touchgfx::colortype)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[610]"></a>touchgfx::ScrollableContainer::invalidateScrollbars()</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
</UL>

<P><STRONG><a name="[1e8]"></a>touchgfx::ScrollableContainer::moveChildrenRelative(short, short)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ScrollableContainer::moveChildrenRelative(short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[59a]"></a>touchgfx::ScrollableContainer::setScrollbarsVisible(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer20setScrollbarsVisibleEb))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[599]"></a>touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::ScrollableContainer::setScrollbarsPermanentlyVisible() &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[1e6]"></a>touchgfx::ScrollableContainer::add(touchgfx::Drawable&)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::ScrollableContainer::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[1ea]"></a>touchgfx::ScrollableContainer::doScroll(short, short)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainer8doScrollEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::ScrollableContainer::doScroll(short, short) &rArr; touchgfx::ScrollableContainer::invalidateScrollbars() &rArr; touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[58d]"></a>touchgfx::ScrollableContainer::ScrollableContainer()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::ScrollableContainer::ScrollableContainer() &rArr; touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[984]"></a>touchgfx::ScrollableContainer::ScrollableContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx19ScrollableContainerC1Ev), UNUSED)

<P><STRONG><a name="[5a4]"></a>touchgfx::CanvasWidgetRenderer::setupBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[674]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBuffer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[693]"></a>touchgfx::CanvasWidgetRenderer::getScanlineWidth()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[616]"></a>touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[691]"></a>touchgfx::CanvasWidgetRenderer::getScanlineCounts()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv))
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[68f]"></a>touchgfx::CanvasWidgetRenderer::getScanlineCovers()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv))
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[675]"></a>touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>

<P><STRONG><a name="[690]"></a>touchgfx::CanvasWidgetRenderer::getScanlineStartIndices()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv))
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>

<P><STRONG><a name="[65d]"></a>touchgfx::CanvasWidgetRenderer::hasBuffer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canvaswidgetrenderer.o(i._ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[19f]"></a>touchgfx::AbstractPainterRGB565::renderInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, painterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56510renderInitEv))
<BR>[Address Reference Count : 2]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
<LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[1a1]"></a>touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractPainterRGB565::renderPixel(unsigned short*, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> painterrgb565.o(.constdata__ZTVN8touchgfx13PainterRGB565E)
<LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[1eb]"></a>touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, abstractpainterrgb565.o(i._ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::AbstractPainterRGB565::render(unsigned char*, int, int, int, unsigned, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
</UL>
<P><STRONG><a name="[617]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[618]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[69a]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[61a]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[619]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[62d]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[1ed]"></a>touchgfx::STM32F7Instrumentation::getCPUCycles()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[1ec]"></a>touchgfx::STM32F7Instrumentation::init()</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, stm32f7instrumentation.o(i._ZN8touchgfx22STM32F7Instrumentation4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::STM32F7Instrumentation::init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[a7]"></a>touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7instrumentation.o(.constdata__ZTVN8touchgfx22STM32F7InstrumentationE)
</UL>
<P><STRONG><a name="[985]"></a>touchgfx::STM32F7Instrumentation::~STM32F7Instrumentation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7InstrumentationD1Ev), UNUSED)

<P><STRONG><a name="[1ef]"></a>touchgfx::STM32F7TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController11sampleTouchERiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::STM32F7TouchController::sampleTouch(int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[1ee]"></a>touchgfx::STM32F7TouchController::init()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7touchcontroller.o(i._ZN8touchgfx22STM32F7TouchController4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = touchgfx::STM32F7TouchController::init() &rArr; GT9147_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[a6]"></a>touchgfx::STM32F7TouchController::~STM32F7TouchController()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> stm32f7touchcontroller.o(.constdata__ZTVN8touchgfx22STM32F7TouchControllerE)
</UL>
<P><STRONG><a name="[986]"></a>touchgfx::STM32F7TouchController::~STM32F7TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx22STM32F7TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[1e0]"></a>touchgfx::AbstractButtonContainer::handlePressedUpdated()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv))
<BR>[Address Reference Count : 2]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
</UL>
<P><STRONG><a name="[5ab]"></a>touchgfx::AbstractButtonContainer::setAction(touchgfx::GenericCallback&lang;const touchgfx::AbstractButtonContainer&, void, void&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[1f0]"></a>touchgfx::AbstractButtonContainer::~AbstractButtonContainer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
</UL>
<P><STRONG><a name="[987]"></a>touchgfx::AbstractButtonContainer::~AbstractButtonContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2viewbase.o(i._ZN8touchgfx23AbstractButtonContainerD1Ev), UNUSED)

<P><STRONG><a name="[596]"></a>touchgfx::TextAreaWithOneWildcard::setWildcard(const unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[199]"></a>touchgfx::TextAreaWithOneWildcard::getTextHeight()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextHeight() &rArr; touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[1f1]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
</UL>
<P><STRONG><a name="[988]"></a>touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx23TextAreaWithOneWildcardD1Ev), UNUSED)

<P><STRONG><a name="[1f2]"></a>touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
</UL>
<P><STRONG><a name="[989]"></a>touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx24TextAreaWithWildcardBaseD1Ev), UNUSED)

<P><STRONG><a name="[620]"></a>touchgfx::LCD16bilinearInterpolate1D(float, float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate1DEfff))
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[61f]"></a>touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate2DEffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate1D(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[621]"></a>touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate1D(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[622]"></a>touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[625]"></a>touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utils.o(i._ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::lookupRenderVariant() const
</UL>

<P><STRONG><a name="[615]"></a>touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx3BoxC1EttNS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char) &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
</UL>

<P><STRONG><a name="[98a]"></a>touchgfx::Box::Box__sub_object(unsigned short, unsigned short, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, scrollablecontainer.o(i._ZN8touchgfx3BoxC1EttNS_9colortypeEh), UNUSED)

<P><STRONG><a name="[1f6]"></a>touchgfx::Box::~Box()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx3BoxD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Box::~Box()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[98b]"></a>touchgfx::Box::~Box__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx3BoxD1Ev), UNUSED)

<P><STRONG><a name="[12a]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[626]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[119]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getBlitCaps()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[11c]"></a>touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[121]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::backPorchExited() &rArr; touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[117]"></a>touchgfx::HAL::cacheTextString(const unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL15cacheTextStringEPKt))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[114]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[11b]"></a>touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1f9]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[45a]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::swapFrameBuffers() &rArr; touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[112]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1fa]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[115]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[11f]"></a>touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[120]"></a>touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, hal.o(i._ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned) &rArr; touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[627]"></a>touchgfx::HAL::getClientFrameBuffer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL20getClientFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::getClientFrameBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>

<P><STRONG><a name="[11e]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[126]"></a>touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddress(void*, unsigned short, bool, bool) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[12f]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[be]"></a>touchgfx::HAL::lcd()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx3HAL3lcdEv))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv)
</UL>
<P><STRONG><a name="[129]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::HAL::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[12d]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[12e]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[11a]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[11d]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BlitOp::BlitOp()
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::getClientFrameBuffer()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[12b]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[113]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[118]"></a>touchgfx::HAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[127]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f7hal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::taskDelay(unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[110]"></a>touchgfx::HAL::taskEntry()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[8e7]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, boardconfiguration.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short)
</UL>

<P><STRONG><a name="[6a0]"></a>touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, lcd.o(i._ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[630]"></a>touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lcd.o(i._ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation) &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[631]"></a>touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, lcd.o(i._ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[634]"></a>touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[6a2]"></a>touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, unsigned short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)</STRONG> (Thumb, 62 bytes, Stack size 44 bytes, containerkeyboardbase.o(i._ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, unsigned short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[98c]"></a>touchgfx::LCD::StringVisuals::StringVisuals__sub_object(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, unsigned short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 44 bytes, containerkeyboardbase.o(i._ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[15]"></a>touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)</STRONG> (Thumb, 594 bytes, Stack size 216 bytes, lcd.o(i._ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list) &rArr; touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.data)
</UL>
<P><STRONG><a name="[636]"></a>touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)</STRONG> (Thumb, 534 bytes, Stack size 120 bytes, lcd.o(i._ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[633]"></a>touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[637]"></a>touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::addWord(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
</UL>

<P><STRONG><a name="[632]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::advance() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
</UL>

<P><STRONG><a name="[98d]"></a>touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct__sub_object(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE), UNUSED)

<P><STRONG><a name="[638]"></a>touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 592 bytes, Stack size 344 bytes, lcd.o(i._ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gradients::Gradients(const touchgfx::Point3D*)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[63d]"></a>touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[63e]"></a>touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[66a]"></a>touchgfx::clz(int)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx3clzEi))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>

<P><STRONG><a name="[672]"></a>touchgfx::Cell::set(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx4Cell3setEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[673]"></a>touchgfx::Cell::addCover(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx4Cell8addCoverEii))
<BR><BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>

<P><STRONG><a name="[63b]"></a>touchgfx::Edge::step(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Edge::step(int) &rArr; touchgfx::Edge::step()
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[63c]"></a>touchgfx::Edge::step()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lcd.o(i._ZN8touchgfx4Edge4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Edge::step()
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::step(int)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[63a]"></a>touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ceil28_4(int)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floorDivMod(int, int, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[98e]"></a>touchgfx::Edge::Edge__sub_object(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, texturemaptypes.o(i._ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii), UNUSED)

<P><STRONG><a name="[45b]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[556]"></a>touchgfx::GPIO::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i._ZN8touchgfx4GPIO4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
</UL>

<P><STRONG><a name="[45c]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[62a]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
</UL>

<P><STRONG><a name="[5b0]"></a>touchgfx::Line::updateCachedShape()</STRONG> (Thumb, 796 bytes, Stack size 104 bytes, line.o(i._ZN8touchgfx4Line17updateCachedShapeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)
</UL>

<P><STRONG><a name="[5b1]"></a>touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setLineEndingStyle(touchgfx::Line::LINE_ENDING_STYLE) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[5af]"></a>touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)
</UL>

<P><STRONG><a name="[5ae]"></a>touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::setStart&lang;int&rang;(T1, T1)
</UL>

<P><STRONG><a name="[5a0]"></a>touchgfx::Line::Line()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Line::Line() &rArr; touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[98f]"></a>touchgfx::Line::Line__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx4LineC1Ev), UNUSED)

<P><STRONG><a name="[5d9]"></a>touchgfx::Rect::expandToFit(const touchgfx::Rect&)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, application.o(i._ZN8touchgfx4Rect11expandToFitERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::updateAngles(float, float, float)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getContainedArea() const
</UL>

<P><STRONG><a name="[5dd]"></a>touchgfx::Rect::Rect(short, short, short, short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx4RectC1Essss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::TextureMapper()
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getSolidRect() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::getSolidRect() const
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::getSolidRect() const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getMinimalRect() const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getSolidRect() const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::rotateRect(touchgfx::Rect&, const touchgfx::Rect&, touchgfx::TextRotation)
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::getSolidRect() const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getContainedArea() const
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getBoundingRect() const
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getSolidRect() const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[990]"></a>touchgfx::Rect::Rect__sub_object(short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx4RectC1Essss), UNUSED)

<P><STRONG><a name="[c0]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::ButtonWithIcon()
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::ButtonWithLabel()
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev)
</UL>
<P><STRONG><a name="[991]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[649]"></a>touchgfx::Rect::operator &=(const touchgfx::Rect&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx4RectaNERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[1fd]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::View&lang;Screen1Presenter&rang;::~View()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
</UL>
<P><STRONG><a name="[992]"></a>touchgfx::View&lang;Screen1Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx4ViewI16Screen1PresenterED1Ev), UNUSED)

<P><STRONG><a name="[1ff]"></a>touchgfx::View&lang;Screen2Presenter&rang;::~View()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::View&lang;Screen2Presenter&rang;::~View()
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::~Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
</UL>
<P><STRONG><a name="[993]"></a>touchgfx::View&lang;Screen2Presenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx4ViewI16Screen2PresenterED1Ev), UNUSED)

<P><STRONG><a name="[590]"></a>touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, color.o(i._ZN8touchgfx5Color20getColorFrom24BitRGBEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Color::getColorFrom24BitRGB(unsigned char, unsigned char, unsigned char) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[203]"></a>touchgfx::Image::setBitmap(const touchgfx::Bitmap&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, image.o(i._ZN8touchgfx5Image9setBitmapERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[59d]"></a>touchgfx::Image::Image(const touchgfx::Bitmap&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
</UL>

<P><STRONG><a name="[994]"></a>touchgfx::Image::Image__sub_object(const touchgfx::Bitmap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(i._ZN8touchgfx5ImageC1ERKNS_6BitmapE), UNUSED)

<P><STRONG><a name="[200]"></a>touchgfx::Image::~Image()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx5ImageD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Image::~Image()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::~ModalDialog()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[995]"></a>touchgfx::Image::~Image__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(i._ZN8touchgfx5ImageD1Ev), UNUSED)

<P><STRONG><a name="[5c3]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstance(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[64f]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[64d]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[64e]"></a>touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bitmap.o(i._ZN8touchgfx6Bitmap8setCacheEPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::setCache(unsigned short*, unsigned, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[56a]"></a>touchgfx::Bitmap::Bitmap(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modaldialog.o(i._ZN8touchgfx6BitmapC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[996]"></a>touchgfx::Bitmap::Bitmap__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, modaldialog.o(i._ZN8touchgfx6BitmapC1Et), UNUSED)

<P><STRONG><a name="[a1]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMAC1Ev)
</UL>
<P><STRONG><a name="[997]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[1aa]"></a>touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[56d]"></a>touchgfx::Button::Button()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, modaldialog.o(i._ZN8touchgfx6ButtonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ToggleButton::ToggleButton()
</UL>

<P><STRONG><a name="[998]"></a>touchgfx::Button::Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, modaldialog.o(i._ZN8touchgfx6ButtonC1Ev), UNUSED)

<P><STRONG><a name="[204]"></a>touchgfx::Button::~Button()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, containerdialog.o(i._ZN8touchgfx6ButtonD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Button::~Button()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::~ButtonWithLabel()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::~ContainerDialogBase()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::~ModalDialog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[999]"></a>touchgfx::Button::~Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, containerdialog.o(i._ZN8touchgfx6ButtonD1Ev), UNUSED)

<P><STRONG><a name="[650]"></a>touchgfx::Canvas::close()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, canvas.o(i._ZN8touchgfx6Canvas5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::Canvas::close() &rArr; touchgfx::Rasterizer::lineTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[651]"></a>touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[654]"></a>touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, canvas.o(i._ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[655]"></a>touchgfx::Canvas::render()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, canvas.o(i._ZN8touchgfx6Canvas6renderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = touchgfx::Canvas::render() &rArr; bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::setOffset(unsigned short, unsigned short)
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPainter::setWidgetAlpha(unsigned char)
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[659]"></a>touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&) &rArr; touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::hasBuffer()
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::setScanlineWidth(unsigned)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::Scanline()
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::RenderingBuffer()
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::attach(unsigned char*, unsigned char, unsigned, unsigned, int)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[99a]"></a>touchgfx::Canvas::Canvas__sub_object(const touchgfx::CanvasWidget*, const touchgfx::Rect&)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE), UNUSED)

<P><STRONG><a name="[205]"></a>touchgfx::Canvas::~Canvas()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canvas.o(i._ZN8touchgfx6CanvasD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::~Canvas()
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::~Outline()
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RenderingBuffer::~RenderingBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvas.o(.constdata__ZTVN8touchgfx6CanvasE)
</UL>
<P><STRONG><a name="[99b]"></a>touchgfx::Canvas::~Canvas__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, canvas.o(i._ZN8touchgfx6CanvasD1Ev), UNUSED)

<P><STRONG><a name="[5b2]"></a>touchgfx::Circle::setCapPrecision(int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, circle.o(i._ZN8touchgfx6Circle15setCapPrecisionEi))
<BR><BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[5a3]"></a>touchgfx::Circle::Circle()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, circle.o(i._ZN8touchgfx6CircleC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Circle::Circle() &rArr; touchgfx::CanvasWidget::CanvasWidget__sub_object() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::CanvasWidget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[99c]"></a>touchgfx::Circle::Circle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, circle.o(i._ZN8touchgfx6CircleC1Ev), UNUSED)

<P><STRONG><a name="[5ed]"></a>touchgfx::Point4::Point4(float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx6Point4C1Efff))
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Quadruple::Quadruple(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[99d]"></a>touchgfx::Point4::Point4__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx6Point4C1Efff), UNUSED)

<P><STRONG><a name="[a2]"></a>touchgfx::Point4::Point4()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx6Point4C1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Quadruple::Quadruple(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(i._ZN8touchgfx13TextureMapper19applyTransformationEv)
</UL>
<P><STRONG><a name="[99e]"></a>touchgfx::Point4::Point4__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx6Point4C1Ev), UNUSED)

<P><STRONG><a name="[1fe]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 3]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[606]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>

<P><STRONG><a name="[151]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 7]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[160]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 5]<UL><LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[14b]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 7]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[14e]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[150]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 6]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[157]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 420 bytes, Stack size 144 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickEvent::ClickEvent(touchgfx::ClickEvent::ClickEventType, short, short, short)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[14f]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 7]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[59b]"></a>touchgfx::Screen::add(touchgfx::Drawable&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, screen1viewbase.o(i._ZN8touchgfx6Screen3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Screen::add(touchgfx::Drawable&) &rArr; touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[149]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::startSMOC(touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 7]<UL><LI> screen1view.o(.constdata__ZTV11Screen1View)
<LI> screen2view.o(.constdata__ZTV11Screen2View)
<LI> screen1viewbase.o(.constdata__ZTV15Screen1ViewBase)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen1PresenterEE)
<LI> screen2viewbase.o(.constdata__ZTV15Screen2ViewBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx4ViewI16Screen2PresenterEE)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[5e1]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Screen::draw() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[664]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedVisibleRect()
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[663]"></a>touchgfx::Screen::startSMOC(touchgfx::Rect&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx6Screen9startSMOCERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::Screen::startSMOC(touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>

<P><STRONG><a name="[589]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Screen::Screen() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[99f]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[208]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[9a0]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[5ac]"></a>touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, slider.o(i._ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[20e]"></a>touchgfx::Slider::setValueRange(int, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider13setValueRangeEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Slider::setValueRange(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[20d]"></a>touchgfx::Slider::setValueRange(int, int, int)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider13setValueRangeEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Slider::setValueRange(int, int, int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[20b]"></a>touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, slider.o(i._ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::handleDragEvent(const touchgfx::DragEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[20a]"></a>touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, slider.o(i._ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[20c]"></a>touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, slider.o(i._ZN8touchgfx6Slider19setupVerticalSliderEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[210]"></a>touchgfx::Slider::updateIndicatorPosition(short)</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6Slider23updateIndicatorPositionEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Slider::updateIndicatorPosition(short) &rArr; touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidate() const
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveTo(short, short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[20f]"></a>touchgfx::Slider::setValue(int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx6Slider8setValueEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Slider::setValue(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[59f]"></a>touchgfx::Slider::Slider()</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6SliderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::Slider::Slider() &rArr; touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setValueRange(int, int)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[9a1]"></a>touchgfx::Slider::Slider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, slider.o(i._ZN8touchgfx6SliderC1Ev), UNUSED)

<P><STRONG><a name="[209]"></a>touchgfx::Slider::~Slider()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, slider.o(i._ZN8touchgfx6SliderD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[9a2]"></a>touchgfx::Slider::~Slider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, slider.o(i._ZN8touchgfx6SliderD1Ev), UNUSED)

<P><STRONG><a name="[187]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modaldialog.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 19]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[56b]"></a>touchgfx::Widget::Widget__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modaldialog.o(i._ZN8touchgfx6WidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[9a3]"></a>touchgfx::Widget::~Widget()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx6WidgetD2Ev), UNUSED)

<P><STRONG><a name="[216]"></a>touchgfx::Widget::~Widget__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx6WidgetD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::~TextArea()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::~Button()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::~ContainerDialogBase()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::~Box()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
</UL>
<P><STRONG><a name="[683]"></a>touchgfx::memset(void*, unsigned char, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(i._ZN8touchgfx6memsetEPvhj))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[669]"></a>touchgfx::muldiv(int, int, int, int&)</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, utils.o(i._ZN8touchgfx6muldivEiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::clz(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[a3]"></a>touchgfx::CWRUtil::Q5::Q5()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev))
<BR>[Address Reference Count : 1]<UL><LI> line.o(i._ZN8touchgfx4LineC1Ev)
</UL>
<P><STRONG><a name="[9a4]"></a>touchgfx::CWRUtil::Q5::Q5__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil2Q5C1Ev), UNUSED)

<P><STRONG><a name="[66b]"></a>touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, circle.o(i._ZN8touchgfx7CWRUtil4sineENS0_2Q5E))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[66c]"></a>touchgfx::CWRUtil::sine(int)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, circle.o(i._ZN8touchgfx7CWRUtil4sineEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::CWRUtil::sine(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[670]"></a>touchgfx::CWRUtil::isqrt(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, line.o(i._ZN8touchgfx7CWRUtil5isqrtEj))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
</UL>

<P><STRONG><a name="[66d]"></a>touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, line.o(i._ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) &rArr;  touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[66f]"></a>touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, circle.o(i._ZN8touchgfx7CWRUtil6cosineENS0_2Q5E))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[66e]"></a>touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) &rArr;  touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::arcsine(touchgfx::CWRUtil::Q10)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[645]"></a>touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZN8touchgfx7CWRUtil7sqrtQ10ENS0_3Q10E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::sqrtQ10(touchgfx::CWRUtil::Q10)
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::isqrt(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[646]"></a>touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, line.o(i._ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[678]"></a>touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)</STRONG> (Thumb, 368 bytes, Stack size 340 bytes, outline.o(i._ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::sortCells()
</UL>

<P><STRONG><a name="[671]"></a>touchgfx::Outline::renderLine(int, int, int, int)</STRONG> (Thumb, 2942 bytes, Stack size 136 bytes, outline.o(i._ZN8touchgfx7Outline10renderLineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::addCover(int, int)
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
</UL>

<P><STRONG><a name="[65e]"></a>touchgfx::Outline::reset()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, outline.o(i._ZN8touchgfx7Outline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Outline::reset() &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBufferSize()
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getOutlineBuffer()
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::Outline()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
</UL>

<P><STRONG><a name="[5d1]"></a>touchgfx::Outline::lineTo(int, int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6lineToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::renderLine(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::moveTo(int, int)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::lineTo(int, int)
</UL>

<P><STRONG><a name="[5d3]"></a>touchgfx::Outline::moveTo(int, int)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, outline.o(i._ZN8touchgfx7Outline6moveToEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::moveTo(int, int)
</UL>

<P><STRONG><a name="[676]"></a>touchgfx::Outline::getCells()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7Outline8getCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::lineTo(int, int)
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::sortCells()
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[677]"></a>touchgfx::Outline::sortCells()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7Outline9sortCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
</UL>

<P><STRONG><a name="[65b]"></a>touchgfx::Outline::Outline()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Outline::Outline() &rArr; touchgfx::Outline::reset() &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[9a5]"></a>touchgfx::Outline::Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, outline.o(i._ZN8touchgfx7OutlineC1Ev), UNUSED)

<P><STRONG><a name="[217]"></a>touchgfx::Outline::~Outline()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> outline.o(.constdata__ZTVN8touchgfx7OutlineE)
</UL>
<P><STRONG><a name="[9a6]"></a>touchgfx::Outline::~Outline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, outline.o(i._ZN8touchgfx7OutlineD1Ev), UNUSED)

<P><STRONG><a name="[679]"></a>touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)</STRONG> (Thumb, 344 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[67b]"></a>touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, unicode.o(i._ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::atoi(const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[67c]"></a>touchgfx::Unicode::atoi(const unsigned short*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode4atoiEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
</UL>

<P><STRONG><a name="[67d]"></a>touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, unicode.o(i._ZN8touchgfx7Unicode4itoaEiPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[67f]"></a>touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)</STRONG> (Thumb, 72 bytes, Stack size 52 bytes, unicode.o(i._ZN8touchgfx7Unicode4utoaEjPtti))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
</UL>

<P><STRONG><a name="[681]"></a>touchgfx::Unicode::strlen(const char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[67a]"></a>touchgfx::Unicode::strlen(const unsigned short*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, unicode.o(i._ZN8touchgfx7Unicode6strlenEPKt))
<BR><BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>

<P><STRONG><a name="[67e]"></a>touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, unicode.o(i._ZN8touchgfx7Unicode7strncpyEPtPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
</UL>

<P><STRONG><a name="[571]"></a>touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, unicode.o(i._ZN8touchgfx7Unicode8snprintfEPttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::buttonDownClicked()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::buttonUpClicked()
</UL>

<P><STRONG><a name="[680]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::strlen(const char*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...)
</UL>

<P><STRONG><a name="[682]"></a>touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list)</STRONG> (Thumb, 588 bytes, Stack size 192 bytes, unicode.o(i._ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::memset(void*, unsigned char, unsigned)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::utoa(unsigned, unsigned short*, unsigned short, int)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::parseFlagsAndPrecision(const unsigned short*&, unsigned short&, bool&, bool&, bool&, bool&, int&, bool&, int&)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::composeString(const unsigned short*&, unsigned short, const unsigned short*, bool, bool, int, bool, int, bool, int&, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[5ee]"></a>touchgfx::Vector4::Vector4(float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx7Vector4C1Efff))
<BR><BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Quadruple::Quadruple(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[9a7]"></a>touchgfx::Vector4::Vector4__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx7Vector4C1Efff), UNUSED)

<P><STRONG><a name="[21a]"></a>touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[9a8]"></a>touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvED1Ev), UNUSED)

<P><STRONG><a name="[21d]"></a>touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[9a9]"></a>touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvED1Ev), UNUSED)

<P><STRONG><a name="[220]"></a>touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
</UL>
<P><STRONG><a name="[9aa]"></a>touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvED1Ev), UNUSED)

<P><STRONG><a name="[223]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
</UL>
<P><STRONG><a name="[9ab]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvED1Ev), UNUSED)

<P><STRONG><a name="[226]"></a>touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialog::~ContainerDialog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[9ac]"></a>touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[229]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[9ad]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1viewbase.o(i._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[22c]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[9ae]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[22f]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
</UL>
<P><STRONG><a name="[9af]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev), UNUSED)

<P><STRONG><a name="[232]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[9b0]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivED1Ev), UNUSED)

<P><STRONG><a name="[235]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerkeyboard.o(i._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::~Screen1View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[9b1]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, containerkeyboard.o(i._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvED1Ev), UNUSED)

<P><STRONG><a name="[238]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[9b2]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev), UNUSED)

<P><STRONG><a name="[5bd]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::operator =(const touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
</UL>

<P><STRONG><a name="[23b]"></a>touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[9b3]"></a>touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev), UNUSED)

<P><STRONG><a name="[23d]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[9b4]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev), UNUSED)

<P><STRONG><a name="[570]"></a>touchgfx::Drawable::setVisible(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx8Drawable10setVisibleEb))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::dialogAnswered(ContainerDialog::Answer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::modalAnswered(ModalDialog::Answer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[138]"></a>touchgfx::Drawable::setPosition(short, short, short, short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, containerdialog.o(i._ZN8touchgfx8Drawable11setPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextPosition(short, short, short, short)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[142]"></a>touchgfx::Drawable::moveRelative(short, short)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, drawable.o(i._ZN8touchgfx8Drawable12moveRelativeEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::moveRelative(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::handleTickEvent()
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[667]"></a>touchgfx::Drawable::getCachedAbsX()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsX() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[666]"></a>touchgfx::Drawable::getCachedAbsY()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx8Drawable13getCachedAbsYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Drawable::getCachedAbsY() &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[188]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, modaldialog.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 20]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[140]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 30]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[141]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 28]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[13e]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 21]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[13f]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 31]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[665]"></a>touchgfx::Drawable::getCachedVisibleRect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx8Drawable20getCachedVisibleRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Drawable::getCachedVisibleRect() &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[139]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[13a]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[13b]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, containerdialog.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setupVerticalSlider(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmapXY(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[143]"></a>touchgfx::Drawable::moveTo(short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, containerdialog.o(i._ZN8touchgfx8Drawable6moveToEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::moveTo(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[13c]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[13d]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerdialog.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[569]"></a>touchgfx::Drawable::Drawable__sub_object()</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, modaldialog.o(i._ZN8touchgfx8DrawableC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::ScrollableContainer()
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::RepeatButtonTrigger()
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::Container()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::Box(unsigned short, unsigned short, touchgfx::colortype, unsigned char)
</UL>

<P><STRONG><a name="[62e]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[62f]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short) &rArr; touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GestureEvent::GestureEvent(touchgfx::GestureEvent::GestureType, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[62b]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[62c]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[685]"></a>touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKjRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[23f]"></a>touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getAlphaData() const
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[689]"></a>touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[244]"></a>touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 3598 bytes, Stack size 160 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float, unsigned char)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bilinearInterpolate2D(float, float, float, float, float, float)
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed16_16(float)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::expand_rgb_565(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[241]"></a>touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short) &rArr; touchgfx::Bitmap::getWidth() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[240]"></a>touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 596 bytes, Stack size 72 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[242]"></a>touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[68d]"></a>touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[245]"></a>touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)</STRONG> (Thumb, 760 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&) &rArr; touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(short&, short&)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::nextLine(bool, touchgfx::TextRotation)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[68c]"></a>touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LCD16bpp::nextPixel(bool, touchgfx::TextRotation)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
</UL>

<P><STRONG><a name="[a8]"></a>touchgfx::LCD16bpp::~LCD16bpp()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[9b5]"></a>touchgfx::LCD16bpp::~LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boardconfiguration.o(i._ZN8touchgfx8LCD16bppD1Ev), UNUSED)

<P><STRONG><a name="[8d4]"></a>touchgfx::Renderer::render(const touchgfx::Scanline&)</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, canvas.o(i._ZN8touchgfx8Renderer6renderERKNS_8ScanlineE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Renderer::render(const touchgfx::Scanline&)
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[68e]"></a>touchgfx::Scanline::reset()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8Scanline5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Scanline::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineStartIndices()
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineCovers()
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineCounts()
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::Scanline()
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[692]"></a>touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, scanline.o(i._ZN8touchgfx8Scanline7addSpanEiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineWidth()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::memset(void*, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[65c]"></a>touchgfx::Scanline::Scanline()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8ScanlineC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Scanline::Scanline() &rArr; touchgfx::Scanline::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[9b6]"></a>touchgfx::Scanline::Scanline__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, scanline.o(i._ZN8touchgfx8ScanlineC1Ev), UNUSED)

<P><STRONG><a name="[597]"></a>touchgfx::TextArea::setTypedText(touchgfx::TypedText)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, textarea.o(i._ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::setTypedText(touchgfx::TypedText) &rArr; touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText)
</UL>

<P><STRONG><a name="[1f4]"></a>touchgfx::TextArea::getTextHeight()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea13getTextHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextArea::getTextHeight() &rArr; touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[594]"></a>touchgfx::TextArea::setLinespacing(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerkeyboardbase.o(i._ZN8touchgfx8TextArea14setLinespacingEt))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[694]"></a>touchgfx::TextArea::resizeToCurrentText()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, textarea.o(i._ZN8touchgfx8TextArea19resizeToCurrentTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
</UL>

<P><STRONG><a name="[593]"></a>touchgfx::TextArea::setColor(touchgfx::colortype)</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, containerkeyboardbase.o(i._ZN8touchgfx8TextArea8setColorENS_9colortypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::TextArea::setColor(touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[58e]"></a>touchgfx::TextArea::TextArea()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx8TextAreaC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::ClickListener()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[9b7]"></a>touchgfx::TextArea::TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZN8touchgfx8TextAreaC1Ev), UNUSED)

<P><STRONG><a name="[246]"></a>touchgfx::TextArea::~TextArea()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN8touchgfx8TextAreaD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::~ModalDialog()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[9b8]"></a>touchgfx::TextArea::~TextArea__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZN8touchgfx8TextAreaD1Ev), UNUSED)

<P><STRONG><a name="[63f]"></a>touchgfx::ceil28_4(int)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, texturemaptypes.o(i._ZN8touchgfx8ceil28_4Ei))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int)
</UL>

<P><STRONG><a name="[603]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEtthhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[147]"></a>touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, container.o(i._ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Container::forEachChild(touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;*)
</UL>
<BR>[Address Reference Count : 12]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[135]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 11]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[144]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**) &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::startSMOC(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 12]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[145]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::add(touchgfx::Drawable&)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::add(touchgfx::Drawable&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
</UL>
<BR>[Address Reference Count : 11]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[146]"></a>touchgfx::Container::remove(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, container.o(i._ZN8touchgfx9Container6removeERNS_8DrawableE))
<BR>[Address Reference Count : 12]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[668]"></a>touchgfx::Container::Container()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx9ContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Container::Container() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::Slider()
</UL>

<P><STRONG><a name="[9b9]"></a>touchgfx::Container::Container__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, slider.o(i._ZN8touchgfx9ContainerC1Ev), UNUSED)

<P><STRONG><a name="[247]"></a>touchgfx::Container::~Container()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx9ContainerD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::~View()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::~ContainerKeyboardBase()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::~ModalDialog()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen2Presenter&rang;::~View()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[9ba]"></a>touchgfx::Container::~Container__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1view.o(i._ZN8touchgfx9ContainerD1Ev), UNUSED)

<P><STRONG><a name="[60a]"></a>touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DragEvent::DragEvent(touchgfx::DragEvent::DragEventType, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[9bb]"></a>touchgfx::DragEvent::DragEvent__sub_object(touchgfx::DragEvent::DragEventType, short, short, short, short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, scrollablecontainer.o(i._ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss), UNUSED)

<P><STRONG><a name="[639]"></a>touchgfx::Gradients::Gradients(const touchgfx::Point3D*)</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Gradients::Gradients(const touchgfx::Point3D*) &rArr; touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4ToFloat(int)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::fixed28_4Mul(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[9bc]"></a>touchgfx::Gradients::Gradients__sub_object(const touchgfx::Point3D*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, texturemaptypes.o(i._ZN8touchgfx9GradientsC1EPKNS_7Point3DE), UNUSED)

<P><STRONG><a name="[697]"></a>touchgfx::Matrix4x4::setElement(int, int, float)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x410setElementEiif))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Matrix4x4::setElement(int, int, float) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setViewDistance(float)
</UL>

<P><STRONG><a name="[5fa]"></a>touchgfx::Matrix4x4::setViewDistance(float)</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, math3d.o(i._ZN8touchgfx9Matrix4x415setViewDistanceEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::Matrix4x4::setViewDistance(float) &rArr; touchgfx::Matrix4x4::setElement(int, int, float) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::getElement(int, int) const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setElement(int, int, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f6]"></a>touchgfx::Matrix4x4::concatenateXScale(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x417concatenateXScaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f7]"></a>touchgfx::Matrix4x4::concatenateYScale(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x417concatenateYScaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f8]"></a>touchgfx::Matrix4x4::concatenateZScale(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x417concatenateZScaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f3]"></a>touchgfx::Matrix4x4::concatenateXRotation(float)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, math3d.o(i._ZN8touchgfx9Matrix4x420concatenateXRotationEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Matrix4x4::concatenateXRotation(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f4]"></a>touchgfx::Matrix4x4::concatenateYRotation(float)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, math3d.o(i._ZN8touchgfx9Matrix4x420concatenateYRotationEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Matrix4x4::concatenateYRotation(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f5]"></a>touchgfx::Matrix4x4::concatenateZRotation(float)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, math3d.o(i._ZN8touchgfx9Matrix4x420concatenateZRotationEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = touchgfx::Matrix4x4::concatenateZRotation(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f0]"></a>touchgfx::Matrix4x4::concatenateXTranslation(float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x423concatenateXTranslationEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f1]"></a>touchgfx::Matrix4x4::concatenateYTranslation(float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x423concatenateYTranslationEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f2]"></a>touchgfx::Matrix4x4::concatenateZTranslation(float)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, math3d.o(i._ZN8touchgfx9Matrix4x423concatenateZTranslationEf))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5ef]"></a>touchgfx::Matrix4x4::Matrix4x4()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, math3d.o(i._ZN8touchgfx9Matrix4x4C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)
</UL>

<P><STRONG><a name="[9bd]"></a>touchgfx::Matrix4x4::Matrix4x4__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, math3d.o(i._ZN8touchgfx9Matrix4x4C1Ev), UNUSED)

<P><STRONG><a name="[252]"></a>touchgfx::Presenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN8touchgfx9Presenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[251]"></a>touchgfx::Presenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN8touchgfx9Presenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[253]"></a>touchgfx::Presenter::~Presenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN8touchgfx9PresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen1presenter.o(.constdata__ZTVN8touchgfx9PresenterE)
</UL>
<P><STRONG><a name="[9be]"></a>touchgfx::Presenter::~Presenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen1presenter.o(i._ZN8touchgfx9PresenterD1Ev), UNUSED)

<P><STRONG><a name="[661]"></a>touchgfx::Quadruple::Quadruple(float, float, float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx9QuadrupleC1Effff))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector4::Vector4(float, float, float)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Point4::Point4()
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Point4::Point4(float, float, float)
</UL>

<P><STRONG><a name="[9bf]"></a>touchgfx::Quadruple::Quadruple__sub_object(float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, texturemapper.o(i._ZN8touchgfx9QuadrupleC1Effff), UNUSED)

<P><STRONG><a name="[56c]"></a>touchgfx::TypedText::TypedText(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modaldialog.o(i._ZN8touchgfx9TypedTextC1Et))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerDialogBase::ContainerDialogBase()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModalDialog::ModalDialog()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
</UL>

<P><STRONG><a name="[9c0]"></a>touchgfx::TypedText::TypedText__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, modaldialog.o(i._ZN8touchgfx9TypedTextC1Et), UNUSED)

<P><STRONG><a name="[5a1]"></a>touchgfx::colortype::colortype(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, containerkeyboardbase.o(i._ZN8touchgfx9colortypeC1Ej))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboardBase::ContainerKeyboardBase()
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
</UL>

<P><STRONG><a name="[9c1]"></a>touchgfx::colortype::colortype__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, containerkeyboardbase.o(i._ZN8touchgfx9colortypeC1Ej), UNUSED)

<P><STRONG><a name="[8e2]"></a>touchgfx::colortype::colortype()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx9colortypeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
</UL>

<P><STRONG><a name="[9c2]"></a>touchgfx::colortype::colortype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen2viewbase.o(i._ZN8touchgfx9colortypeC1Ev), UNUSED)

<P><STRONG><a name="[5fb]"></a>touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Point4&)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, math3d.o(i._ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Point4&)
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::getElement(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[5f9]"></a>touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)</STRONG> (Thumb, 118 bytes, Stack size 176 bytes, math3d.o(i._ZN8touchgfxmlERKNS_9Matrix4x4ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&) &rArr; touchgfx::Matrix4x4::Matrix4x4()
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::Matrix4x4()
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::getElement(int, int) const
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setElement(int, int, float)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
</UL>

<P><STRONG><a name="[116]"></a>STM32F7HAL::getTFTFrameBuffer() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7hal.o(i._ZNK10STM32F7HAL17getTFTFrameBufferEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7hal.o(.constdata__ZTV10STM32F7HAL)
</UL>
<P><STRONG><a name="[8d3]"></a>touchgfx::Rasterizer::calculateAlpha(int) const</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canvas.o(i._ZNK8touchgfx10Rasterizer14calculateAlphaEi))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)
</UL>

<P><STRONG><a name="[18a]"></a>touchgfx::CanvasWidget::getPainter() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10getPainterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::CanvasWidget::getPainter() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[186]"></a>touchgfx::CanvasWidget::invalidate() const</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::CanvasWidget::invalidate() const &rArr; touchgfx::CanvasWidget::getMinimalRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::getMinimalRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[185]"></a>touchgfx::CanvasWidget::getSolidRect() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CanvasWidget::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[18c]"></a>touchgfx::CanvasWidget::getMinimalRect() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CanvasWidget::getMinimalRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
</UL>
<P><STRONG><a name="[184]"></a>touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[18b]"></a>touchgfx::CanvasWidget::getAlpha() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canvaswidget.o(i._ZNK8touchgfx12CanvasWidget8getAlphaEv))
<BR>[Address Reference Count : 3]<UL><LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[194]"></a>touchgfx::BoxWithBorder::getSolidRect() const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::BoxWithBorder::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
</UL>
<P><STRONG><a name="[193]"></a>touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, boxwithborder.o(i._ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
</UL>
<P><STRONG><a name="[699]"></a>touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const</STRONG> (Thumb, 466 bytes, Stack size 280 bytes, texturemapper.o(i._ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getAlphaData() const
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(float&, float&, const touchgfx::Rect&)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::lookupRenderVariant() const
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::floatToFixed28_4(float)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[1a4]"></a>touchgfx::TextureMapper::getSolidRect() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, texturemapper.o(i._ZNK8touchgfx13TextureMapper12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::TextureMapper::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[5ec]"></a>touchgfx::TextureMapper::getBoundingRect() const</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, texturemapper.o(i._ZNK8touchgfx13TextureMapper15getBoundingRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::TextureMapper::getBoundingRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::updateAngles(float, float, float)
</UL>

<P><STRONG><a name="[69c]"></a>touchgfx::TextureMapper::lookupRenderVariant() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texturemapper.o(i._ZNK8touchgfx13TextureMapper19lookupRenderVariantEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextureMapper::lookupRenderVariant() const &rArr; touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[1a3]"></a>touchgfx::TextureMapper::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 750 bytes, Stack size 176 bytes, texturemapper.o(i._ZNK8touchgfx13TextureMapper4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextureMapper::draw(const touchgfx::Rect&) const &rArr; touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const &rArr; touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short) &rArr; touchgfx::Edge::Edge(const touchgfx::Gradients&, const touchgfx::Point3D*, int, int) &rArr; touchgfx::floorDivMod(int, int, int&, int&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector4::Vector4(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
</UL>
<P><STRONG><a name="[577]"></a>touchgfx::TextureMapper::getBitmap() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen2view.o(i._ZNK8touchgfx13TextureMapper9getBitmapEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::TextureMapper::getBitmap() const
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
</UL>

<P><STRONG><a name="[1a9]"></a>touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, buttonwithicon.o(i._ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const &rArr; touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
</UL>
<P><STRONG><a name="[1ae]"></a>touchgfx::SnapshotWidget::getSolidRect() const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::SnapshotWidget::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[1ad]"></a>touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, snapshotwidget.o(i._ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::SnapshotWidget::draw(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
</UL>
<P><STRONG><a name="[5b5]"></a>touchgfx::ButtonWithLabel::getLabelText() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, containerkeyboard.o(i._ZNK8touchgfx15ButtonWithLabel12getLabelTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::ButtonWithLabel::getLabelText() const
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)
</UL>

<P><STRONG><a name="[1b3]"></a>touchgfx::ButtonWithLabel::getSolidRect() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::ButtonWithLabel::getSolidRect() const &rArr; touchgfx::Button::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[1b2]"></a>touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, buttonwithlabel.o(i._ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const &rArr; touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
</UL>
<P><STRONG><a name="[1d5]"></a>touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::InternalFlashFont::getKerning(unsigned short, const touchgfx::GlyphNode*) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[1d7]"></a>touchgfx::InternalFlashFont::getPixelData(const touchgfx::GlyphNode*) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internalflashfont.o(i._ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE))
<BR>[Address Reference Count : 1]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
</UL>
<P><STRONG><a name="[613]"></a>touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[614]"></a>touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[611]"></a>touchgfx::ScrollableContainer::getXScrollbar() const</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer13getXScrollbarEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::ScrollableContainer::getXScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[612]"></a>touchgfx::ScrollableContainer::getYScrollbar() const</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer13getYScrollbarEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::ScrollableContainer::getYScrollbar() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[1e7]"></a>touchgfx::ScrollableContainer::getContainedArea() const</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, scrollablecontainer.o(i._ZNK8touchgfx19ScrollableContainer16getContainedAreaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::ScrollableContainer::getContainedArea() const &rArr; touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
</UL>
<P><STRONG><a name="[19a]"></a>touchgfx::TextAreaWithOneWildcard::getTextWidth() const</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[196]"></a>touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, containerkeyboardbase.o(i._ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::StringVisuals::StringVisuals(const touchgfx::Font*, touchgfx::colortype, unsigned char, unsigned char, unsigned short, touchgfx::TextRotation, unsigned char, unsigned char, touchgfx::WideTextAction)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[61e]"></a>touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, textareawithwildcard.o(i._ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
</UL>

<P><STRONG><a name="[1f8]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[1f7]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[628]"></a>touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hal.o(i._ZNK8touchgfx3HAL13getDstAddressEttPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::HAL::getDstAddress(unsigned short, unsigned short, unsigned short*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect, unsigned short*, unsigned)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::copyFBRegionToMemory(touchgfx::Rect)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blitCopyGlyph(const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, touchgfx::colortype, unsigned char, touchgfx::BlitOperations)
</UL>

<P><STRONG><a name="[1d2]"></a>touchgfx::Font::getFontHeight() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font13getFontHeightEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1cf]"></a>touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, font.o(i._ZNK8touchgfx4Font14getStringWidthEhPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Font::getStringWidth(unsigned char, const unsigned short*, ...) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1d4]"></a>touchgfx::Font::getBitsPerPixel() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getBitsPerPixelEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1ce]"></a>touchgfx::Font::getEllipsisChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getEllipsisCharEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1cd]"></a>touchgfx::Font::getFallbackChar() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font15getFallbackCharEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1d0]"></a>touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, font.o(i._ZNK8touchgfx4Font15getSpacingAboveEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1d1]"></a>touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, font.o(i._ZNK8touchgfx4Font16getMaxTextHeightEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GlyphNode::top() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1d6]"></a>touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, font.o(i._ZNK8touchgfx4Font16getNumberOfLinesEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::Font::getNumberOfLines(const unsigned short*, ...) const &rArr; touchgfx::TextProvider::TextProvider() &rArr; touchgfx::TextProvider::initializeInternal() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextChar()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[14]"></a>touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, font.o(i._ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::Font::getStringWidthLTR(unsigned char, const unsigned short*, std::__va_list) const &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::getNextLigature(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>touchgfx::Font::getMinimumTextHeight() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx4Font20getMinimumTextHeightEv))
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1cc]"></a>touchgfx::Font::getGlyph(unsigned short) const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, font.o(i._ZNK8touchgfx4Font8getGlyphEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Font::getGlyph(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[1fb]"></a>touchgfx::Line::getMinimalRect() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line.o(i._ZNK8touchgfx4Line14getMinimalRectEv))
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[1fc]"></a>touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const</STRONG> (Thumb, 398 bytes, Stack size 240 bytes, line.o(i._ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const &rArr; touchgfx::Canvas::render() &rArr; bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -() const
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.constdata__ZTVN8touchgfx4LineE)
</UL>
<P><STRONG><a name="[60f]"></a>touchgfx::Rect::right() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect5rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realX(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXScrollbar() const
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
</UL>

<P><STRONG><a name="[5dc]"></a>touchgfx::Rect::bottom() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect6bottomEv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringLTR(const touchgfx::Rect&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals&, const unsigned short*, std::__va_list)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::includes(const touchgfx::Rect&) const
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::realY(const touchgfx::Rect&, short, short, touchgfx::TextRotation)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawGlyph(unsigned short*, touchgfx::Rect, short, short, unsigned short, unsigned short, const touchgfx::Rect&, const touchgfx::GlyphNode*, const unsigned char*, touchgfx::colortype, unsigned char, unsigned char, touchgfx::TextRotation)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawTextureMapTriangle(const touchgfx::DrawingSurface&, const touchgfx::Point3D*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::intersect(short, short) const
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYScrollbar() const
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::doScroll(short, short)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
</UL>

<P><STRONG><a name="[5d5]"></a>touchgfx::Rect::isEmpty() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx4Rect7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::expandToFit(const touchgfx::Rect&)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getYBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::getXBorder(const touchgfx::Rect&, const touchgfx::Rect&) const
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>

<P><STRONG><a name="[5d6]"></a>touchgfx::Rect::includes(const touchgfx::Rect&) const</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4Rect8includesERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::includes(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[5d8]"></a>touchgfx::Rect::intersect(const touchgfx::Rect&) const</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, canvaswidget.o(i._ZNK8touchgfx4Rect9intersectERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::invalidate() const
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidget::draw(const touchgfx::Rect&) const
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[662]"></a>touchgfx::Rect::intersect(short, short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(i._ZNK8touchgfx4Rect9intersectEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Rect::intersect(short, short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::bottom() const
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::right() const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[5de]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, application.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::BoxWithBorder::draw(const touchgfx::Rect&) const
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[202]"></a>touchgfx::Image::getSolidRect() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, image.o(i._ZNK8touchgfx5Image12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::Image::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[201]"></a>touchgfx::Image::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, image.o(i._ZNK8touchgfx5Image4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::Image::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
</UL>
<P><STRONG><a name="[687]"></a>touchgfx::Bitmap::getAlphaData() const</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getAlphaDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[688]"></a>touchgfx::Bitmap::getSolidRect() const</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::getSolidRect() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::getSolidRect() const
</UL>

<P><STRONG><a name="[624]"></a>touchgfx::Bitmap::hasTransparentPixels() const</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap20hasTransparentPixelsEv))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[686]"></a>touchgfx::Bitmap::getData() const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::getData() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[578]"></a>touchgfx::Bitmap::getWidth() const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap8getWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::getWidth() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::copyFrameBufferRegionToMemory(const touchgfx::Rect&, unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::draw(const touchgfx::Rect&) const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[623]"></a>touchgfx::Bitmap::getFormat() const</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getFormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getFormat() const
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupNearestNeighborRenderVariant(const touchgfx::Bitmap&)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::lookupBilinearRenderVariant(const touchgfx::Bitmap&)
</UL>

<P><STRONG><a name="[579]"></a>touchgfx::Bitmap::getHeight() const</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::setBitmap(const touchgfx::Bitmap&)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::setupScreen()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::draw(const touchgfx::Rect&) const
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::draw(const touchgfx::Rect&) const
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[191]"></a>touchgfx::Button::getSolidRect() const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, button.o(i._ZNK8touchgfx6Button12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::Button::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::getSolidRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[190]"></a>touchgfx::Button::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithIcon::draw(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[652]"></a>touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, canvas.o(i._ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[653]"></a>touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canvas.o(i._ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Canvas::isOutside(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[6a6]"></a>touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, circle.o(i._ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[6a8]"></a>touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, circle.o(i._ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const &rArr; touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect() const
</UL>

<P><STRONG><a name="[206]"></a>touchgfx::Circle::getMinimalRect() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, circle.o(i._ZNK8touchgfx6Circle14getMinimalRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = touchgfx::Circle::getMinimalRect() const &rArr; touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const &rArr; touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[6aa]"></a>touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, circle.o(i._ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxXY(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[6ab]"></a>touchgfx::Circle::updateMinMaxXY(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, circle.o(i._ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Circle::updateMinMaxXY(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[207]"></a>touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const</STRONG> (Thumb, 1010 bytes, Stack size 320 bytes, circle.o(i._ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const &rArr; touchgfx::Canvas::render() &rArr; bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::~Canvas()
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::Canvas(const touchgfx::CanvasWidget*, const touchgfx::Rect&)
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;int&rang;(T1)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(int) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(int)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
</UL>
<P><STRONG><a name="[6a9]"></a>touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 832 bytes, Stack size 208 bytes, circle.o(i._ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(int) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxXY(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
</UL>

<P><STRONG><a name="[6ae]"></a>touchgfx::Circle::lineToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, circle.o(i._ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = touchgfx::Circle::lineToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[6ad]"></a>touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, circle.o(i._ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const &rArr; touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Rasterizer::moveTo(int, int) &rArr; touchgfx::Outline::moveTo(int, int) &rArr; touchgfx::Outline::lineTo(int, int) &rArr; touchgfx::Outline::renderLine(int, int, int, int) &rArr; touchgfx::Cell::set(int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::Q5::operator /(int) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[212]"></a>touchgfx::Slider::positionToValue(short) const</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, slider.o(i._ZNK8touchgfx6Slider15positionToValueEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::positionToValue(short) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[211]"></a>touchgfx::Slider::valueToPosition(int) const</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, slider.o(i._ZNK8touchgfx6Slider15valueToPositionEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Slider::valueToPosition(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[215]"></a>touchgfx::Slider::getValueRangeSize() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider17getValueRangeSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[213]"></a>touchgfx::Slider::getIndicatorRadius() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider18getIndicatorRadiusEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[214]"></a>touchgfx::Slider::getIndicatorPositionRangeSize() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, slider.o(i._ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[6a7]"></a>touchgfx::CWRUtil::Q5::operator /(int) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5dvEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator /(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[641]"></a>touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5miERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::moveTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::lineTo(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::cosine(touchgfx::CWRUtil::Q5)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::transformFrameBufferToDisplay(touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
</UL>

<P><STRONG><a name="[6a5]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q15&) const &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[644]"></a>touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5mlERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::_angle(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&)
</UL>

<P><STRONG><a name="[6ac]"></a>touchgfx::CWRUtil::Q5::operator *(int) const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5mlEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator *(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[6a4]"></a>touchgfx::CWRUtil::Q5::operator -() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, line.o(i._ZNK8touchgfx7CWRUtil2Q5ngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[647]"></a>touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, circle.o(i._ZNK8touchgfx7CWRUtil2Q5plERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CWRUtil::Q5::operator +(const touchgfx::CWRUtil::Q5&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::moveToAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::updateMinMaxAR(const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::lineToXYAR2(touchgfx::Canvas&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&, const touchgfx::CWRUtil::Q5&) const
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[134]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::specialKeyPressedhandler(const touchgfx::AbstractButton&)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::setTextArea(touchgfx::TextAreaWithOneWildcard&, unsigned short*, unsigned char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::TextAreaClickHandler(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::buttonDownClicked()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::buttonUpClicked()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::dialogAnswered(ContainerDialog::Answer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::modalAnswered(ModalDialog::Answer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Slider::updateIndicatorPosition(short)
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::invalidateScrollbars()
</UL>
<BR>[Address Reference Count : 29]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[136]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[133]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &=(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[609]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsY()
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getCachedAbsX()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::drawTriangle(const touchgfx::Rect&, unsigned short*, const float*, const float*, const float*, const float*, const float*) const
</UL>

<P><STRONG><a name="[137]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 32]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> buttonwithicon.o(.constdata__ZTVN8touchgfx14ButtonWithIconE)
<LI> buttonwithlabel.o(.constdata__ZTVN8touchgfx15ButtonWithLabelE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> circle.o(.constdata__ZTVN8touchgfx6CircleE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> boxwithborder.o(.constdata__ZTVN8touchgfx13BoxWithBorderE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> image.o(.constdata__ZTVN8touchgfx5ImageE)
<LI> line.o(.constdata__ZTVN8touchgfx4LineE)
<LI> snapshotwidget.o(.constdata__ZTVN8touchgfx14SnapshotWidgetE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
<LI> texturemapper.o(.constdata__ZTVN8touchgfx13TextureMapperE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[243]"></a>touchgfx::LCD16bpp::bitDepth() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp8bitDepthEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[197]"></a>touchgfx::TextArea::getSolidRect() const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, containerkeyboardbase.o(i._ZNK8touchgfx8TextArea12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextArea::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx23TextAreaWithOneWildcardE)
<LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[1f5]"></a>touchgfx::TextArea::getTextWidth() const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, textarea.o(i._ZNK8touchgfx8TextArea12getTextWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextArea::getTextWidth() const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[695]"></a>touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, textarea.o(i._ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const &rArr; touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short) &rArr; touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool) &rArr; touchgfx::TextProvider::getNextLigature(unsigned char) &rArr; touchgfx::TextProvider::getNextChar() &rArr; touchgfx::TextProvider::getNextCharInternal()
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::getNumLines(touchgfx::TextProvider&, touchgfx::WideTextAction, unsigned char, const touchgfx::Font*, short)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::TextProvider()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextProvider::initialize(const unsigned short*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
</UL>

<P><STRONG><a name="[1f3]"></a>touchgfx::TextArea::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, textarea.o(i._ZNK8touchgfx8TextArea4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextArea::draw(const touchgfx::Rect&) const &rArr; touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawString(touchgfx::Rect, const touchgfx::Rect&, touchgfx::LCD::StringVisuals&, const unsigned short*, ...)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::hasValidId() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> containerkeyboardbase.o(.constdata__ZTVN8touchgfx24TextAreaWithWildcardBaseE)
<LI> textarea.o(.constdata__ZTVN8touchgfx8TextAreaE)
</UL>
<P><STRONG><a name="[6af]"></a>touchgfx::ConstFont::find(unsigned short) const</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, constfont.o(i._ZNK8touchgfx9ConstFont4findEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const
</UL>

<P><STRONG><a name="[1cb]"></a>touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, constfont.o(i._ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::ConstFont::getGlyph(unsigned short, const unsigned char*&, unsigned char&) const &rArr; touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::find(unsigned short) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> internalflashfont.o(.constdata__ZTVN8touchgfx17InternalFlashFontE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[132]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::getSolidRect() const
</UL>
<BR>[Address Reference Count : 12]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[131]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &(const touchgfx::Rect&) const &rArr; touchgfx::Rect::operator &=(const touchgfx::Rect&) &rArr; touchgfx::Rect::intersect(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::isEmpty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 12]<UL><LI> modaldialog.o(.constdata__ZTV11ModalDialog)
<LI> containerdialog.o(.constdata__ZTV15ContainerDialog)
<LI> containerkeyboard.o(.constdata__ZTV17ContainerKeyboard)
<LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
<LI> containerdialogbase.o(.constdata__ZTV19ContainerDialogBase)
<LI> containerkeyboardbase.o(.constdata__ZTV21ContainerKeyboardBase)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx23AbstractButtonContainerE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx19RepeatButtonTriggerE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> scrollablecontainer.o(.constdata__ZTVN8touchgfx19ScrollableContainerE)
<LI> slider.o(.constdata__ZTVN8touchgfx6SliderE)
</UL>
<P><STRONG><a name="[60b]"></a>touchgfx::DragEvent::getDeltaX() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZNK8touchgfx9DragEvent9getDeltaXEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[60d]"></a>touchgfx::DragEvent::getDeltaY() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(i._ZNK8touchgfx9DragEvent9getDeltaYEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[6a3]"></a>touchgfx::GlyphNode::top() const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, font.o(i._ZNK8touchgfx9GlyphNode3topEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getMaxTextHeight(const unsigned short*, ...) const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Font::getSpacingAbove(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[635]"></a>touchgfx::GlyphNode::advance() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(i._ZNK8touchgfx9GlyphNode7advanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::WideTextInternalStruct(touchgfx::TextProvider&, unsigned short, unsigned char, const touchgfx::Font*, touchgfx::WideTextAction)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::WideTextInternalStruct::getStringLengthForLine(bool)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::drawStringInternal(unsigned short*, const touchgfx::Rect*, short, short&, const touchgfx::Rect&, const touchgfx::LCD::StringVisuals*, unsigned char, touchgfx::TextProvider&, int, bool)
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD::stringWidth(touchgfx::TextProvider&, const touchgfx::Font&, int, unsigned char)
</UL>

<P><STRONG><a name="[698]"></a>touchgfx::Matrix4x4::getElement(int, int) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math3d.o(i._ZNK8touchgfx9Matrix4x410getElementEii))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Matrix4x4&)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::operator *(const touchgfx::Matrix4x4&, const touchgfx::Point4&)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::setViewDistance(float)
</UL>

<P><STRONG><a name="[61d]"></a>touchgfx::TypedText::hasValidId() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, containerkeyboardbase.o(i._ZNK8touchgfx9TypedText10hasValidIdEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::resizeToCurrentText()
</UL>

<P><STRONG><a name="[69f]"></a>touchgfx::TypedText::assertValid() const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZNK8touchgfx9TypedText11assertValidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getText() const
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getFont() const
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::getTextDirection() const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::draw(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[6a1]"></a>touchgfx::TypedText::getTextDirection() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZNK8touchgfx9TypedText16getTextDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::TypedText::getTextDirection() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[5fe]"></a>touchgfx::TypedText::getFont() const</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZNK8touchgfx9TypedText7getFontEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::TypedText::getFont() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithWildcardBase::calculateTextHeight(const unsigned short*, ...) const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeightInternal(const unsigned short*, ...) const
</UL>

<P><STRONG><a name="[595]"></a>touchgfx::TypedText::getText() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, containerkeyboardbase.o(i._ZNK8touchgfx9TypedText7getTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::TypedText::getText() const &rArr; touchgfx::TypedText::assertValid() const &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::assertValid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::usualKeyPressedhandler(const touchgfx::AbstractButton&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextHeight()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::draw(const touchgfx::Rect&) const
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::getTextWidth() const
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::draw(const touchgfx::Rect&) const
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextWidth() const
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::getTextHeight()
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ButtonWithLabel::setLabelText(touchgfx::TypedText)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[560]"></a>touchgfx::colortype::operator unsigned short() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7dma.o(i._ZNK8touchgfx9colortypecvtEv))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[391]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[6b4]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[564]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::applyTransformation()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::Line()
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()
</UL>

<P><STRONG><a name="[55b]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_40_4bpp()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_20_4bpp()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
</UL>

<P><STRONG><a name="[18d]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 23]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> containerdialog.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx15TouchControllerE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx18MCUInstrumentationE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx12FontProviderE)
<LI> boardconfiguration.o(.constdata__ZTVN8touchgfx3LCDE)
<LI> screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN15ContainerDialog6AnswerEvvEE)
<LI> screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN11ModalDialog6AnswerEvvEE)
<LI> screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIN17ContainerKeyboard10SpecialKeyEvvEE)
<LI> screen1view.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIvvvEE)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRNS_8DrawableEvvEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEE)
<LI> screen2viewbase.o(.constdata__ZTVN8touchgfx15GenericCallbackIRKNS_6SliderEivEE)
<LI> canvaswidget.o(.constdata__ZTVN8touchgfx12CanvasWidgetE)
<LI> abstractbutton.o(.constdata__ZTVN8touchgfx14AbstractButtonE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> abstractpainter.o(.constdata__ZTVN8touchgfx15AbstractPainterE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
<LI> dma.o(.constdata__ZTVN8touchgfx13DMA_InterfaceE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
<LI> abstractpainterrgb565.o(.constdata__ZTVN8touchgfx21AbstractPainterRGB565E)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
</UL>
<P><STRONG><a name="[321]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[6b3]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
</UL>

<P><STRONG><a name="[69e]"></a>__hardfp_ceilf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getBoundingRect() const
</UL>

<P><STRONG><a name="[9c3]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[34d]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
</UL>

<P><STRONG><a name="[2a5]"></a>__hardfp_cosf</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateZRotation(float)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateYRotation(float)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateXRotation(float)
</UL>

<P><STRONG><a name="[345]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
</UL>

<P><STRONG><a name="[69d]"></a>__hardfp_floorf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextureMapper::getBoundingRect() const
</UL>

<P><STRONG><a name="[2a7]"></a>__hardfp_log</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[301]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateZRotation(float)
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateYRotation(float)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Matrix4x4::concatenateXRotation(float)
</UL>

<P><STRONG><a name="[2af]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
</UL>

<P><STRONG><a name="[2a9]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_norm4
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_quat_from_accel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag3ofNormalizedLong
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[6b8]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[6ba]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[6bd]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[6b9]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[6bc]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[5]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[6b7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[6bf]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[6b1]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6b6]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[6b2]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6b5]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[6bb]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6c1]"></a>__sys_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_close &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[6c6]"></a>__sys_flen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sys_flen &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[6c9]"></a>__sys_open</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[6cf]"></a>__sys_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_read &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[6d2]"></a>__sys_seek</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_seek &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[6d5]"></a>__sys_write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[367]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[373]"></a>_sys_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[29a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utility.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[39a]"></a>_sys_flen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[398]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[370]"></a>_sys_open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3ac]"></a>_sys_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, retarget_io.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdin_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[39d]"></a>_sys_seek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[39e]"></a>_sys_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[3c2]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utility.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_Init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteOneByte
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[3e0]"></a>delay_us</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, utility.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Delay
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>

<P><STRONG><a name="[70a]"></a>dhcp_arp_reply</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[dd]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>dhcp_fine_tmr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[711]"></a>dhcp_release</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[734]"></a>dhcp_renew</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[4e4]"></a>dhcp_start</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[736]"></a>dhcp_stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[733]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[7ad]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[828]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[7ac]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[886]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[740]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[743]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[744]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[74d]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[74e]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[750]"></a>dmp_read_fifo</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[754]"></a>dmp_set_accel_bias</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[756]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[757]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[758]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[74a]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[74b]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[74c]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[746]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[747]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[745]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[748]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[749]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[6c4]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_close))
<BR><BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[7a6]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_ffind))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[6c8]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_flen))
<BR><BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[7a9]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_format))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[7aa]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.efs_free))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[6cd]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[7af]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[7b0]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_mount))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[6ce]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_open))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[6d1]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_read))
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[6d4]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[7cd]"></a>efs_unmount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_unmount))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
</UL>

<P><STRONG><a name="[6d7]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_write))
<BR><BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[760]"></a>elink_cmd</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fs_fat_elink.o(i.elink_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = elink_cmd &rArr; elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_rewind
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[85d]"></a>elink_dir</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_dir))
<BR><BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[795]"></a>elink_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[762]"></a>elink_insert</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, fs_fat_elink.o(i.elink_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = elink_insert &rArr; delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[763]"></a>elink_scan</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = elink_scan &rArr; delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_rewind
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[764]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[767]"></a>etharp_input</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[ab]"></a>etharp_output</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[710]"></a>etharp_query</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[76d]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[dc]"></a>etharp_tmr</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ethernet_input</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[76c]"></a>ethernet_output</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[9d]"></a>ethernetif_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip.o(i.MX_LWIP_Init)
</UL>
<P><STRONG><a name="[ca]"></a>ethernetif_input</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[776]"></a>f_closedir</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = f_closedir &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scan_files
</UL>

<P><STRONG><a name="[4dc]"></a>f_mount</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[77f]"></a>f_opendir</STRONG> (Thumb, 160 bytes, Stack size 544 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scan_files
</UL>

<P><STRONG><a name="[783]"></a>f_readdir</STRONG> (Thumb, 100 bytes, Stack size 536 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scan_files
</UL>

<P><STRONG><a name="[6be]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6c3]"></a>fat_close</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_unmount
</UL>

<P><STRONG><a name="[787]"></a>fat_ffind</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[6c7]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[78b]"></a>fat_format</STRONG> (Thumb, 1240 bytes, Stack size 56 bytes, fs_fat.o(i.fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = fat_format &rArr; label_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[792]"></a>fat_free</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs_fat.o(i.fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_free &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[6cb]"></a>fat_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fat_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[793]"></a>fat_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_init &rArr; fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[790]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fat_jour_init))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[78f]"></a>fat_jour_prep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fat_jour_prep))
<BR><BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[796]"></a>fat_mount</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_mount &rArr; elink_cmd &rArr; elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[6cc]"></a>fat_open</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[6d0]"></a>fat_read</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[6d3]"></a>fat_seek</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[79e]"></a>fat_unmount</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.fat_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fat_unmount &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
</UL>

<P><STRONG><a name="[79f]"></a>fat_vol</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fat_vol &rArr; label_read &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
</UL>

<P><STRONG><a name="[785]"></a>fat_vol_chk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[6d6]"></a>fat_write</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[702]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[77d]"></a>ff_cre_syncobj</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[77c]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ff_del_syncobj &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[7a3]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[7a4]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[6f3]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[531]"></a>ffind</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewRootDir
</UL>

<P><STRONG><a name="[4ee]"></a>fformat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.fformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = fformat &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[41b]"></a>ffree</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.ffree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ffree &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
</UL>

<P><STRONG><a name="[4ec]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = finit &rArr; fat_init &rArr; fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[4ed]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fmount &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
</UL>

<P><STRONG><a name="[94]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utility.o(i.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[794]"></a>fs_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_config.o(i.fs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[7bc]"></a>fs_config_evr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_mapi.o(i.fs_config_evr))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[6ca]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[7bd]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_rtos_tick_freq))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[3fb]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_get_sys_tick &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
</UL>

<P><STRONG><a name="[3fa]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_config.o(i.fs_get_sys_tick_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
</UL>

<P><STRONG><a name="[6fb]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[41c]"></a>fs_ioc_read_info</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fs_ioc.o(i.fs_ioc_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_ioc_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
</UL>

<P><STRONG><a name="[41d]"></a>fs_ioc_unlock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fs_ioc.o(i.fs_ioc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
</UL>

<P><STRONG><a name="[6c2]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fs_mutex_acquire &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[7c0]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fs_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_nand
</UL>

<P><STRONG><a name="[6c5]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3fd]"></a>fs_nand_feature_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_feature_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
</UL>

<P><STRONG><a name="[3fe]"></a>fs_nand_feature_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_feature_param))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
</UL>

<P><STRONG><a name="[7cc]"></a>fs_nand_setup_layout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_setup_layout))
<BR><BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[7be]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[7a7]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[7a8]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[7a5]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[6ea]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fsj_write))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[7c4]"></a>ftl_DevCtrl</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fs_nftl.o(i.ftl_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ftl_DevCtrl &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_DevCtrl
</UL>

<P><STRONG><a name="[7c5]"></a>ftl_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_nftl.o(i.ftl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_Init
</UL>

<P><STRONG><a name="[848]"></a>ftl_ReadInfo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_nftl.o(i.ftl_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_RdInfo
</UL>

<P><STRONG><a name="[7ca]"></a>ftl_ReadSect</STRONG> (Thumb, 522 bytes, Stack size 96 bytes, fs_nftl.o(i.ftl_ReadSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ftl_ReadSect &rArr; RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_RdSect
</UL>

<P><STRONG><a name="[849]"></a>ftl_UnInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_nftl.o(i.ftl_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftl_UnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_UnInit
</UL>

<P><STRONG><a name="[7cb]"></a>ftl_WriteSect</STRONG> (Thumb, 862 bytes, Stack size 128 bytes, fs_nftl.o(i.ftl_WriteSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = ftl_WriteSect &rArr; RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_WrSect
</UL>

<P><STRONG><a name="[4f0]"></a>funmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.funmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = funmount &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_unmount
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_unmount
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFileData
</UL>

<P><STRONG><a name="[41a]"></a>fvol</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs_mapi.o(i.fvol))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fvol &rArr; fs_mutex_release &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
</UL>

<P><STRONG><a name="[6e2]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[6e3]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[7d0]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[7d2]"></a>icmp_input</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[7d5]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[7d6]"></a>inv_apply_calibration</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, data_builder.o(i.inv_apply_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_gyro
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_accel
</UL>

<P><STRONG><a name="[7d7]"></a>inv_build_accel</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, data_builder.o(i.inv_build_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_build_accel &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[7d8]"></a>inv_build_compass</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, data_builder.o(i.inv_build_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inv_build_compass &rArr; inv_set_compass_soft_iron_input_data &rArr; mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_soft_iron_input_data
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_soft_iron_output_data
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[7db]"></a>inv_build_gyro</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, data_builder.o(i.inv_build_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_build_gyro &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[840]"></a>inv_build_temp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, data_builder.o(i.inv_build_temp))
<BR><BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[2fc]"></a>inv_compass_angle</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, ml_math_func.o(i.inv_compass_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_to_float
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
</UL>

<P><STRONG><a name="[2b4]"></a>inv_convert_to_body_with_scale</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_convert_to_body_with_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
</UL>

<P><STRONG><a name="[7f4]"></a>inv_disable_compass_soft_iron_matrix</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_disable_compass_soft_iron_matrix))
<BR><BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
</UL>

<P><STRONG><a name="[7dd]"></a>inv_enable_eMPL_outputs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_enable_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_enable_eMPL_outputs &rArr; inv_init_eMPL_outputs &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_eMPL_outputs
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[7df]"></a>inv_enable_results_holder</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, results_holder.o(i.inv_enable_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_enable_results_holder &rArr; inv_init_results_holder &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_results_holder
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[7fb]"></a>inv_execute_mpl_start_notification</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, start_manager.o(i.inv_execute_mpl_start_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_execute_mpl_start_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
</UL>

<P><STRONG><a name="[7e1]"></a>inv_execute_on_data</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, data_builder.o(i.inv_execute_on_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_execute_on_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_contiguous
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[b4]"></a>inv_generate_results</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, results_holder.o(i.inv_generate_results))
<BR>[Address Reference Count : 1]<UL><LI> results_holder.o(i.inv_start_results_holder)
</UL>
<P><STRONG><a name="[2bf]"></a>inv_get_6axis_quaternion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, results_holder.o(i.inv_get_6axis_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_6axis_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[31b]"></a>inv_get_acc_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_acc_state))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbCheckSettling
</UL>

<P><STRONG><a name="[7eb]"></a>inv_get_accel_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_accel_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[7ea]"></a>inv_get_accel_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_accel_on))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[7e5]"></a>inv_get_accel_set</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, data_builder.o(i.inv_get_accel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_accel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
</UL>

<P><STRONG><a name="[2b3]"></a>inv_get_compass_bias</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_bias))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
</UL>

<P><STRONG><a name="[325]"></a>inv_get_compass_correction</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, results_holder.o(i.inv_get_compass_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[7e7]"></a>inv_get_compass_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_on))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[7da]"></a>inv_get_compass_soft_iron_output_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_soft_iron_output_data))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
</UL>

<P><STRONG><a name="[2b9]"></a>inv_get_compass_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_compass_state))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[2ff]"></a>inv_get_gravity</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, results_holder.o(i.inv_get_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gravity
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[320]"></a>inv_get_gyro</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[7e9]"></a>inv_get_gyro_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[30f]"></a>inv_get_gyro_bias</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_builder.o(i.inv_get_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_gyro_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[311]"></a>inv_get_gyro_bias_tc_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_bias_tc_set))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[31f]"></a>inv_get_gyro_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_on))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[2bb]"></a>inv_get_gyro_sum_of_sqr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_get_gyro_sum_of_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_gyro_sum_of_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[2b8]"></a>inv_get_large_mag_field</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_large_mag_field))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[7e6]"></a>inv_get_last_timestamp</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_last_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[338]"></a>inv_get_linear_accel</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, results_holder.o(i.inv_get_linear_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inv_get_linear_accel &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel_float
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[34f]"></a>inv_get_linear_accel_float</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, results_holder.o(i.inv_get_linear_accel_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = inv_get_linear_accel_float &rArr; inv_get_linear_accel &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[323]"></a>inv_get_local_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_local_field))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[7e8]"></a>inv_get_mag_accuracy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_mag_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[310]"></a>inv_get_motion_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_motion_state))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[350]"></a>inv_get_quaternion</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, results_holder.o(i.inv_get_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[7e3]"></a>inv_get_quaternion_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, results_holder.o(i.inv_get_quaternion_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_get_quaternion_set &rArr; inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_mag_accuracy
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_last_timestamp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_on
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_accuracy
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_on
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_on
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_accuracy
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_eMPL_outputs
</UL>

<P><STRONG><a name="[7ec]"></a>inv_get_sensor_type_euler</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, empl_outputs.o(i.inv_get_sensor_type_euler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_get_sensor_type_euler &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[34a]"></a>inv_get_sensor_type_gravity</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hal_outputs.o(i.inv_get_sensor_type_gravity), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
</UL>

<P><STRONG><a name="[2b6]"></a>inv_got_compass_bias</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_got_compass_bias))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>

<P><STRONG><a name="[7ed]"></a>inv_init_data_builder</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, data_builder.o(i.inv_init_data_builder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_init_data_builder &rArr; inv_register_load_store
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_load_store
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[7ef]"></a>inv_init_mpl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mpl.o(i.inv_init_mpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_init_mpl &rArr; __print_result_location &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_storage_manager
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_start_manager
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[7e0]"></a>inv_init_results_holder</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, results_holder.o(i.inv_init_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_results_holder &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
</UL>

<P><STRONG><a name="[7f1]"></a>inv_init_start_manager</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, start_manager.o(i.inv_init_start_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_start_manager &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[7f0]"></a>inv_init_storage_manager</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, storage_manager.o(i.inv_init_storage_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_storage_manager &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[7f2]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[7e4]"></a>inv_q29_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q29_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
</UL>

<P><STRONG><a name="[2e1]"></a>inv_q30_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q30_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlMatrixVectorMult
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
</UL>

<P><STRONG><a name="[333]"></a>inv_q_add</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_q_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_q_add
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
</UL>

<P><STRONG><a name="[32e]"></a>inv_q_addf</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_addf))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[2c0]"></a>inv_q_invert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invert))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_quaternion
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[32d]"></a>inv_q_invertf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invertf))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[2c1]"></a>inv_q_mult</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_quaternion
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[302]"></a>inv_q_multf</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_multf))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[32f]"></a>inv_q_norm4</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_q_norm4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_q_norm4 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[304]"></a>inv_q_normalizef</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_normalizef))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[337]"></a>inv_q_rotate</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, ml_math_func.o(i.inv_q_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_q_rotate &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[300]"></a>inv_quaternion_to_rotation</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_quaternion_to_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_quaternion_to_rotation &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[2cf]"></a>inv_register_data_cb</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, data_builder.o(i.inv_register_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_eMPL_outputs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_results_holder
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_quaternion
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_magnetic_disturbance
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_gyro_tc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_9x_sensor_fusion
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_vector_compass_cal
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_in_use_auto_calibration
</UL>

<P><STRONG><a name="[316]"></a>inv_register_load_store</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, storage_manager.o(i.inv_register_load_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_register_load_store
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
</UL>

<P><STRONG><a name="[2d5]"></a>inv_register_mpl_start_notification</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, start_manager.o(i.inv_register_mpl_start_notification))
<BR><BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_in_use_auto_calibration
</UL>

<P><STRONG><a name="[7ee]"></a>inv_reset_compass_soft_iron_matrix</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, data_builder.o(i.inv_reset_compass_soft_iron_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_reset_compass_soft_iron_matrix &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_compass_soft_iron_matrix
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
</UL>

<P><STRONG><a name="[343]"></a>inv_set_accel_accuracy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_accel_accuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_set_accel_accuracy &rArr; inv_set_message
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[342]"></a>inv_set_accel_bias_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_accel_bias_found))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[341]"></a>inv_set_accel_bias_mask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_accel_bias_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_accel_bias_mask &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[7f5]"></a>inv_set_accel_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_accel_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_accel_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[833]"></a>inv_set_accel_sample_rate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_accel_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[2c9]"></a>inv_set_compass_bias</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_compass_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_compass_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2cb]"></a>inv_set_compass_bias_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, results_holder.o(i.inv_set_compass_bias_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_compass_bias_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2ca]"></a>inv_set_compass_bias_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_compass_bias_found))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_load_func
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[305]"></a>inv_set_compass_correction</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, results_holder.o(i.inv_set_compass_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_set_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbSetDisturbance
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[327]"></a>inv_set_compass_disturbance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_compass_disturbance))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
</UL>

<P><STRONG><a name="[7f7]"></a>inv_set_compass_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_compass_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_compass_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[834]"></a>inv_set_compass_sample_rate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_compass_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[7d9]"></a>inv_set_compass_soft_iron_input_data</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_compass_soft_iron_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_set_compass_soft_iron_input_data &rArr; mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlMatrixVectorMult
</UL>
<BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
</UL>

<P><STRONG><a name="[2c7]"></a>inv_set_compass_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_compass_state))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2e2]"></a>inv_set_gyro_bias</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[7f9]"></a>inv_set_gyro_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_gyro_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_gyro_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[832]"></a>inv_set_gyro_sample_rate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_gyro_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[2f6]"></a>inv_set_message</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, message_layer.o(i.inv_set_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_accuracy
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
</UL>

<P><STRONG><a name="[2e3]"></a>inv_set_motion_state</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, results_holder.o(i.inv_set_motion_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_set_motion_state &rArr; inv_set_message
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[7fa]"></a>inv_start_mpl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mpl.o(i.inv_start_mpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_start_mpl &rArr; __print_result_location &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_mpl_start_notification
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[b0]"></a>inv_start_results_holder</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, results_holder.o(i.inv_start_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_start_results_holder &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> results_holder.o(i.inv_enable_results_holder)
</UL>
<P><STRONG><a name="[339]"></a>inv_store_gaming_quaternion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, results_holder.o(i.inv_store_gaming_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_store_gaming_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_quaternion
</UL>

<P><STRONG><a name="[2d1]"></a>inv_unregister_data_cb</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, data_builder.o(i.inv_unregister_data_cb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_quaternion
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_quaternion
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_magnetic_disturbance
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_magnetic_disturbance
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_gyro_tc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_gyro_tc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_9x_sensor_fusion
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_vector_compass_cal
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_vector_compass_cal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_in_use_auto_calibration
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_in_use_auto_calibration
</UL>

<P><STRONG><a name="[2d7]"></a>inv_unregister_mpl_start_notification</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, start_manager.o(i.inv_unregister_mpl_start_notification), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_quaternion
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_gyro_tc
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_9x_sensor_fusion
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_fast_nomot
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_vector_compass_cal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_in_use_auto_calibration
</UL>

<P><STRONG><a name="[76a]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[7fc]"></a>ip4_frag</STRONG> (Thumb, 506 bytes, Stack size 96 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[bc]"></a>ip4_input</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[7d3]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[805]"></a>ip4_output_if_src</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[801]"></a>ip4_reass</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ip4_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[7d4]"></a>ip4_route</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[db]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[718]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[771]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[814]"></a>lwip_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[295]"></a>main</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = main &rArr; mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP3216C_Init
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_WriteBit
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8574_Init
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init()
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init()
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init()
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init()
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI1_Init()
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init()
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init()
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init()
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config()
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init()
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[821]"></a>mem_free</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[816]"></a>mem_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_init &rArr; sys_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[735]"></a>mem_malloc</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[826]"></a>mem_trim</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[80c]"></a>memp_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[817]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_init &rArr; memp_init_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[827]"></a>memp_init_pool</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[80b]"></a>memp_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>

<P><STRONG><a name="[753]"></a>mget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.mget_ms))
<BR><BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
</UL>

<P><STRONG><a name="[7f8]"></a>mlMatrixVectorMult</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, ml_math_func.o(i.mlMatrixVectorMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_soft_iron_input_data
</UL>

<P><STRONG><a name="[829]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[81f]"></a>mpu_dmp_init</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, inv_mpu.o(i.mpu_dmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOFT_IIC_Init
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sample_rate
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_orientation_and_scale
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_sample_rate
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_orientation_and_scale
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_sample_rate
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_orientation_and_scale
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_fsr
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[759]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[755]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[831]"></a>mpu_get_compass_fsr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_compass_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[837]"></a>mpu_get_compass_reg</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_compass_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_get_compass_reg &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[843]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[830]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[885]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[842]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[82f]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[838]"></a>mpu_get_temperature</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_get_temperature &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_mpl_get_data
</UL>

<P><STRONG><a name="[82b]"></a>mpu_init</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mpu_init &rArr; setup_compass &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[74f]"></a>mpu_load_firmware</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[83e]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[559]"></a>mpu_mpl_get_data</STRONG> (Thumb, 234 bytes, Stack size 152 bytes, inv_mpu.o(i.mpu_mpl_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mpu_mpl_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_on_data
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_temp
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_gyro
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_accel
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
</UL>

<P><STRONG><a name="[751]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[83d]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_read_mem &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[742]"></a>mpu_reset_fifo</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[841]"></a>mpu_run_6500_self_test</STRONG> (Thumb, 384 bytes, Stack size 104 bytes, inv_mpu.o(i.mpu_run_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[83a]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[6f5]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_set_bypass &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[82e]"></a>mpu_set_compass_sample_rate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_compass_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_compass_sample_rate &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[836]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[839]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[83f]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[83b]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[82d]"></a>mpu_set_sample_rate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[82c]"></a>mpu_set_sensors</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[741]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[4e7]"></a>nand_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_nand_media.o(i.nand_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND0_HW_SignalEventHandler
</UL>

<P><STRONG><a name="[4e8]"></a>nand_MediaEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_nftl.o(i.nand_MediaEvent))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND0_Media_SignalEventHandler
</UL>

<P><STRONG><a name="[4e0]"></a>netif_add</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[818]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[70e]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[4e1]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[4e3]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[84d]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[84b]"></a>netif_set_ipaddr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[84c]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[4e2]"></a>netif_set_up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[551]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFontTask(const void*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask(const void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTouchTask(const void*)
</UL>

<P><STRONG><a name="[51d]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[820]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[516]"></a>osKernelSysTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatusWithTimeout
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[51e]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[51f]"></a>osMessageGet</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[3db]"></a>osMessagePut</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[7c2]"></a>osMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[7c3]"></a>osMutexRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[7c1]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[7a1]"></a>osSemaphoreCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[7a2]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[444]"></a>osSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[774]"></a>osSemaphoreWait</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[811]"></a>osThreadCreate</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[716]"></a>pbuf_alloc</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[7fe]"></a>pbuf_alloced_custom</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[800]"></a>pbuf_cat</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_cat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[85f]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[806]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[76f]"></a>pbuf_copy</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pbuf_copy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[72f]"></a>pbuf_copy_partial</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = pbuf_copy_partial &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[722]"></a>pbuf_free</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[772]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[804]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[71f]"></a>pbuf_realloc</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[770]"></a>pbuf_ref</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[880]"></a>pvPortMalloc</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[8cf]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[877]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[835]"></a>run_self_test</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, inv_mpu.o(i.run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[4dd]"></a>sd_scan_files</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, fatfs.o(i.sd_scan_files))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = sd_scan_files &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[7f6]"></a>set_sensor_orientation_and_scale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.set_sensor_orientation_and_scale))
<BR><BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_orientation_and_scale
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_orientation_and_scale
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_orientation_and_scale
</UL>

<P><STRONG><a name="[6e4]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>

<P><STRONG><a name="[6e5]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>

<P><STRONG><a name="[6b0]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[887]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_arch_mbox_fetch &rArr; osMessageGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[75b]"></a>sys_arch_protect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_arch_protect &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[75c]"></a>sys_arch_unprotect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_unprotect &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[815]"></a>sys_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_init &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[88a]"></a>sys_mbox_new</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mbox_new &rArr; osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[88b]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_post &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[88c]"></a>sys_mbox_trypost</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_trypost &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[8be]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[822]"></a>sys_mutex_lock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_mutex_lock &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[825]"></a>sys_mutex_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[824]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mutex_unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[889]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetif.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[88d]"></a>sys_thread_new</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sys_thread_new &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[706]"></a>sys_timeout</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[81b]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[88e]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[890]"></a>tcp_abandon</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[893]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[894]"></a>tcp_alloc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[898]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[8a3]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[8a4]"></a>tcp_enqueue_flags</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[8a5]"></a>tcp_fasttmr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[81a]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[803]"></a>tcp_input</STRONG> (Thumb, 1862 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[8ac]"></a>tcp_keepalive</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[84e]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[8af]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[8a0]"></a>tcp_output</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[89a]"></a>tcp_pcb_purge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[891]"></a>tcp_pcb_remove</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[8a6]"></a>tcp_process_refused_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[b8]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[8bb]"></a>tcp_recved</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[8b7]"></a>tcp_rexmit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8b8]"></a>tcp_rexmit_fast</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[8b5]"></a>tcp_rexmit_rto</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[892]"></a>tcp_rst</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[8ba]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[8a2]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[861]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[8a9]"></a>tcp_send_empty_ack</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[89f]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[8bc]"></a>tcp_slowtmr</STRONG> (Thumb, 1428 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[89b]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[da]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[89c]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8b9]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[8bd]"></a>tcp_zero_window_probe</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[863]"></a>tcpip_callback_with_block</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[4df]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LWIP_Init
</UL>

<P><STRONG><a name="[8bf]"></a>tcpip_inpkt</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[9c]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip.o(i.MX_LWIP_Init)
</UL>
<P><STRONG><a name="[72b]"></a>udp_bind</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[72c]"></a>udp_connect</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[819]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[802]"></a>udp_input</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[84f]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[72a]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[72d]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
</UL>

<P><STRONG><a name="[71c]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>

<P><STRONG><a name="[731]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[720]"></a>udp_sendto_if_src</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[865]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[878]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[876]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[867]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[866]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[869]"></a>vPortEnterCritical</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[86b]"></a>vPortExitCritical</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[871]"></a>vPortFree</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[8c9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8c2]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[858]"></a>vQueueDelete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[8c4]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[850]"></a>vTaskDelay</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[8cd]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[87d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[8c5]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[8c6]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[851]"></a>vTaskStartScheduler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[881]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[29b]"></a>vTaskSwitchContext</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; xTaskCallApplicationTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[8c7]"></a>xPortStartScheduler</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[527]"></a>xPortSysTickHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[857]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[856]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[5c5]"></a>xQueueGenericCreate</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[874]"></a>xQueueGenericReset</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[5c6]"></a>xQueueGenericSend</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[5c7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
</UL>

<P><STRONG><a name="[5cf]"></a>xQueueGiveFromISR</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[5c9]"></a>xQueueReceive</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>

<P><STRONG><a name="[855]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[5cc]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[8c8]"></a>xTaskCallApplicationTaskHook</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tasks.o(i.xTaskCallApplicationTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCallApplicationTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[8ce]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[85a]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[526]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[854]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[853]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[8cc]"></a>xTaskIncrementTick</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[870]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[8d0]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[87c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[884]"></a>xTaskResumeAll</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[288]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[95]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[658]"></a>bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&)</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, canvas.o(t._ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = bool touchgfx::Rasterizer::render&lang;touchgfx::Renderer&rang;(T1&) &rArr; touchgfx::Outline::getCells() &rArr; touchgfx::Outline::sortCells() &rArr; touchgfx::Outline::qsortCells(touchgfx::Cell*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CanvasWidgetRenderer::getScanlineWidth()
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::addSpan(int, int, unsigned, unsigned)
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Scanline::reset()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Outline::getCells()
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rasterizer::calculateAlpha(int) const
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Renderer::render(const touchgfx::Scanline&)
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Canvas::render()
</UL>

<P><STRONG><a name="[56f]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::setClickAction(touchgfx::GenericCallback&lang;const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screen1view.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE14setClickActionERNS_15GenericCallbackIRKS1_RKNS_10ClickEventEvEE))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::setupScreen()
</UL>

<P><STRONG><a name="[198]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEE16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[58b]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::ClickListener()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::ClickListener() &rArr; touchgfx::TextArea::TextArea() &rArr; touchgfx::Widget::Widget__sub_object() &rArr; touchgfx::Drawable::Drawable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::TextArea()
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::Screen1ViewBase()
</UL>

<P><STRONG><a name="[9c4]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::ClickListener__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen1viewbase.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEC1Ev), UNUSED)

<P><STRONG><a name="[195]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen1view.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener() &rArr; touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard() &rArr; touchgfx::TextAreaWithWildcardBase::~TextAreaWithWildcardBase() &rArr; touchgfx::TextArea::~TextArea()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextAreaWithOneWildcard::~TextAreaWithOneWildcard()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1ViewBase::~Screen1ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEEE)
</UL>
<P><STRONG><a name="[9c5]"></a>touchgfx::ClickListener&lang;touchgfx::TextAreaWithOneWildcard&rang;::~ClickListener__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen1view.o(t._ZN8touchgfx13ClickListenerINS_23TextAreaWithOneWildcardEED1Ev), UNUSED)

<P><STRONG><a name="[5be]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::Transition()
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[5bf]"></a>T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen1View::Screen1View() &rArr; Screen1ViewBase::Screen1ViewBase() &rArr; touchgfx::Unicode::snprintf(unsigned short*, unsigned short, const char*, ...) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const char*, std::__va_list) &rArr; touchgfx::Unicode::vsnprintf(unsigned short*, unsigned short, const unsigned short*, std::__va_list) &rArr; touchgfx::Unicode::itoa(int, unsigned short*, unsigned short, int) &rArr; touchgfx::Unicode::strncpy(unsigned short*, const char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1Presenter::Screen1Presenter(Screen1View&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen1View::Screen1View()
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
</UL>

<P><STRONG><a name="[5c0]"></a>T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; Screen2View::Screen2View() &rArr; Screen2ViewBase::Screen2ViewBase() &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::Screen2View()
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2Presenter::Screen2Presenter(Screen2View&)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::bind(ModelListener*)
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelListener::bind(Model*)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
</UL>

<P><STRONG><a name="[1b4]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
</UL>
<P><STRONG><a name="[9c6]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev), UNUSED)

<P><STRONG><a name="[1b8]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent()</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::handleTickEvent() &rArr; touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1bb]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::initMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1bc]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tickMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1ba]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::init()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::init() &rArr; touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[1b9]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tearDown()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::tearDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[8dd]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char) &rArr; touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::Transition()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[9c7]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh), UNUSED)

<P><STRONG><a name="[1b7]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition() &rArr; touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::~FullSolidRect()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EEE)
</UL>
<P><STRONG><a name="[9c8]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::~CoverTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::handleTickEvent()</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::handleTickEvent() &rArr; touchgfx::Drawable::moveRelative(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::moveRelative(short, short)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::EasingEquations::cubicEaseOut(unsigned short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[1c1]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::initMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::initMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[1c2]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tickMoveDrawable(touchgfx::Drawable&)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tickMoveDrawable(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[1c0]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::init()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::init() &rArr; touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[1bf]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tearDown()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::tearDown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[8dc]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char) &rArr; touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::SnapshotWidget()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::makeSnapshot()
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::Transition()
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[9c9]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh), UNUSED)

<P><STRONG><a name="[1bd]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SnapshotWidget::~SnapshotWidget()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15SlideTransitionILNS_9DirectionE3EEE)
</UL>
<P><STRONG><a name="[9ca]"></a>touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::~SlideTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplicationbase.o(t._ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev), UNUSED)

<P><STRONG><a name="[5aa]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextColors(touchgfx::colortype, touchgfx::colortype)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, screen2viewbase.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE13setTextColorsENS_9colortypeES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextColors(touchgfx::colortype, touchgfx::colortype)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[5a9]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextPosition(short, short, short, short)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, screen2viewbase.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE15setTextPositionEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setTextPosition(short, short, short, short) &rArr; touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setPosition(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[1c6]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::handlePressedUpdated()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, screen2view.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE20handlePressedUpdatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::handlePressedUpdated() &rArr; touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated() &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
</UL>
<P><STRONG><a name="[5a8]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, screen2viewbase.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEE7setTextENS_9TypedTextE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::setText(touchgfx::TypedText) &rArr; touchgfx::TextArea::setTypedText(touchgfx::TypedText) &rArr; touchgfx::TextArea::resizeToCurrentText()
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextArea::setTypedText(touchgfx::TypedText)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[59e]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, screen2viewbase.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle() &rArr; touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle() &rArr; touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TypedText::TypedText(unsigned short)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype(unsigned)
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::colortype::colortype()
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[9cb]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEC1Ev), UNUSED)

<P><STRONG><a name="[1c3]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen2view.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle() &rArr; touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle() &rArr; touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger() &rArr; touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::~Widget__sub_object()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::~Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
</UL>
<P><STRONG><a name="[9cc]"></a>touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2view.o(t._ZN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEED1Ev), UNUSED)

<P><STRONG><a name="[1c7]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, screen2view.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE10setBitmapsERKNS_6BitmapES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setHeight(short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setWidth(short)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
<LI> screen2view.o(.constdata__ZTVN8touchgfx15TextButtonStyleINS_16ImageButtonStyleINS_19RepeatButtonTriggerEEEEE)
</UL>
<P><STRONG><a name="[5a7]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmapXY(unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE11setBitmapXYEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::setBitmapXY(unsigned short, unsigned short) &rArr; touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2ViewBase::Screen2ViewBase()
</UL>

<P><STRONG><a name="[1c9]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, screen2view.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEE20handlePressedUpdatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::handlePressedUpdated() &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::setBitmap(const touchgfx::Bitmap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::handlePressedUpdated()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
</UL>
<P><STRONG><a name="[8e1]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle() &rArr; touchgfx::Image::Image(const touchgfx::Bitmap&) &rArr; touchgfx::Image::setBitmap(const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::Bitmap(unsigned short)
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::Image(const touchgfx::Bitmap&)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::RepeatButtonTrigger()
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::TextButtonStyle()
</UL>

<P><STRONG><a name="[9cd]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::ImageButtonStyle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEC1Ev), UNUSED)

<P><STRONG><a name="[1c8]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle() &rArr; touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger() &rArr; touchgfx::AbstractButtonContainer::~AbstractButtonContainer()
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Image::~Image()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::RepeatButtonTrigger::~RepeatButtonTrigger()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TextButtonStyle&lang;touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;&rang;::~TextButtonStyle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2view.o(.constdata__ZTVN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEEE)
</UL>
<P><STRONG><a name="[9ce]"></a>touchgfx::ImageButtonStyle&lang;touchgfx::RepeatButtonTrigger&rang;::~ImageButtonStyle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen2viewbase.o(t._ZN8touchgfx16ImageButtonStyleINS_19RepeatButtonTriggerEED1Ev), UNUSED)

<P><STRONG><a name="[8d6]"></a>T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1& touchgfx::AbstractPartition::at&lang;Screen1View&rang;(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[8d7]"></a>T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T1& touchgfx::AbstractPartition::at&lang;Screen1Presenter&rang;(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[5fc]"></a>touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, boardconfiguration.o(t._ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::touchgfx_init()
</UL>

<P><STRONG><a name="[643]"></a>T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, circle.o(t._ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T1 touchgfx::abs&lang;touchgfx::CWRUtil::Q5&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::calculateMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&, touchgfx::CWRUtil::Q5&) const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[642]"></a>T1 touchgfx::abs&lang;int&rang;(T1)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, circle.o(t._ZN8touchgfx3absIiEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
</UL>

<P><STRONG><a name="[60c]"></a>T1 touchgfx::abs&lang;short&rang;(T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scrollablecontainer.o(t._ZN8touchgfx3absIsEET_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ScrollableContainer::handleDragEvent(const touchgfx::DragEvent&)
</UL>

<P><STRONG><a name="[57e]"></a>void touchgfx::Line::setEnd&lang;int&rang;(T1, T1)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, screen2view.o(t._ZN8touchgfx4Line6setEndIiEEvT_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = void touchgfx::Line::setEnd&lang;int&rang;(T1, T1) &rArr; touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setEnd(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
</UL>

<P><STRONG><a name="[57c]"></a>void touchgfx::Line::setStart&lang;int&rang;(T1, T1)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, screen2view.o(t._ZN8touchgfx4Line8setStartIiEEvT_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = void touchgfx::Line::setStart&lang;int&rang;(T1, T1) &rArr; touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::Line::updateCachedShape() &rArr; touchgfx::CWRUtil::muldivQ5(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) &rArr; touchgfx::muldiv(int, int, int, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::setStart(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
</UL>

<P><STRONG><a name="[8db]"></a>touchgfx::View&lang;Screen1Presenter&rang;::bind(Screen1Presenter&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[5d7]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::quickRemoveAt(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[5da]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EE3addES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::add(touchgfx::Rect) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>

<P><STRONG><a name="[5db]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[9cf]"></a>touchgfx::Vector&lang;touchgfx::Rect, (unsigned short)8&rang;::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, application.o(t._ZN8touchgfx6VectorINS_4RectELt8EEC1Ev), UNUSED)

<P><STRONG><a name="[8e3]"></a>touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short)</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, boardconfiguration.o(t._ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::HAL& touchgfx::getHAL&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short) &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL& touchgfx::touchgfx_generic_init&lang;STM32F7HAL&rang;(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, short, short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[218]"></a>touchgfx::Callback&lang;ModalDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, modaldialog.o(t._ZN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;ModalDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[21b]"></a>touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::execute(ModalDialog::Answer)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvE7executeES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::execute(ModalDialog::Answer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[21e]"></a>touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::execute(ContainerDialog::Answer)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvE7executeES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::execute(ContainerDialog::Answer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[221]"></a>touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::execute(ContainerKeyboard::SpecialKey)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvE7executeES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::execute(ContainerKeyboard::SpecialKey)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
</UL>
<P><STRONG><a name="[224]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, screen1view.o(t._ZN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7executeES4_S7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::execute(const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
</UL>
<P><STRONG><a name="[227]"></a>touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, containerdialog.o(t._ZN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[22a]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen1viewbase.o(t._ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[22d]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[230]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::execute(const touchgfx::AbstractButtonContainer&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::execute(const touchgfx::AbstractButtonContainer&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
</UL>
<P><STRONG><a name="[233]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, screen2viewbase.o(t._ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7executeES4_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::execute(const touchgfx::Slider&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[236]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, containerkeyboard.o(t._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvE7executeES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::execute(const touchgfx::AbstractButton&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[5b8]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::Callback(ContainerKeyboard*, void(ContainerKeyboard::*)(const touchgfx::AbstractButton&))</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, containerkeyboard.o(t._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::Callback(ContainerKeyboard*, void(ContainerKeyboard::*)(const touchgfx::AbstractButton&))
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainerKeyboard::ContainerKeyboard()
</UL>

<P><STRONG><a name="[9d0]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::Callback__sub_object(ContainerKeyboard*, void(ContainerKeyboard::*)(const touchgfx::AbstractButton&))</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, containerkeyboard.o(t._ZN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E), UNUSED)

<P><STRONG><a name="[239]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[5bc]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback(FrontendApplicationBase*, void(FrontendApplicationBase::*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;void, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenNoTransition()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
</UL>

<P><STRONG><a name="[9d1]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::Callback__sub_object(FrontendApplicationBase*, void(FrontendApplicationBase::*)())</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE), UNUSED)

<P><STRONG><a name="[23c]"></a>touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[8df]"></a>touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::CoverTransition(unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::init()
</UL>

<P><STRONG><a name="[9d2]"></a>touchgfx::Callback&lang;touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, touchgfx::Drawable&, void, void&rang;::Callback__sub_object(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;*, void(touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E), UNUSED)

<P><STRONG><a name="[23e]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::execute(touchgfx::Drawable&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEE)
</UL>
<P><STRONG><a name="[8e0]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GenericCallback&lang;touchgfx::Drawable&, void, void&rang;::GenericCallback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::SlideTransition(unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::init()
</UL>

<P><STRONG><a name="[9d3]"></a>touchgfx::Callback&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::Drawable&, void, void&rang;::Callback__sub_object(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;*, void(touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;::*)(touchgfx::Drawable&))</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E), UNUSED)

<P><STRONG><a name="[249]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[24a]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[248]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9d4]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2View, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[24c]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[24d]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[24b]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9d5]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;Screen2Presenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[24f]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
</UL>
<P><STRONG><a name="[250]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
</UL>
<P><STRONG><a name="[24e]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEE)
</UL>
<P><STRONG><a name="[9d6]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::~Partition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, boardconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev), UNUSED)

<P><STRONG><a name="[1b6]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::getSolidRect() const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, frontendapplicationbase.o(t._ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::getSolidRect() const &rArr; touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
</UL>
<P><STRONG><a name="[1b5]"></a>touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;::FullSolidRect::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectE)
</UL>
<P><STRONG><a name="[57d]"></a>void touchgfx::Line::getEnd&lang;int&rang;(T1&, T1&) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, screen2view.o(t._ZNK8touchgfx4Line6getEndIiEEvRT_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void touchgfx::Line::getEnd&lang;int&rang;(T1&, T1&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
</UL>

<P><STRONG><a name="[57b]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;int&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screen2view.o(t._ZNK8touchgfx7CWRUtil2Q52toIiEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void touchgfx::Line::getEnd&lang;int&rang;(T1&, T1&) const
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen2View::handleTickEvent()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::drawCanvasWidget(const touchgfx::Rect&) const
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Circle::getMinimalRect(touchgfx::CWRUtil::Q5, touchgfx::CWRUtil::Q5) const
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::CWRUtil::sine(touchgfx::CWRUtil::Q5)
</UL>

<P><STRONG><a name="[648]"></a>T1 touchgfx::CWRUtil::Q5::to&lang;short&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, line.o(t._ZNK8touchgfx7CWRUtil2Q52toIsEET_v))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Line::updateCachedShape()
</UL>

<P><STRONG><a name="[219]"></a>touchgfx::Callback&lang;ModalDialog, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, modaldialog.o(t._ZNK8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> modaldialog.o(.constdata__ZTVN8touchgfx8CallbackI11ModalDialogRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[21c]"></a>touchgfx::Callback&lang;Screen1View, ModalDialog::Answer, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN11ModalDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[21f]"></a>touchgfx::Callback&lang;Screen1View, ContainerDialog::Answer, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN15ContainerDialog6AnswerEvvEE)
</UL>
<P><STRONG><a name="[222]"></a>touchgfx::Callback&lang;Screen1View, ContainerKeyboard::SpecialKey, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewN17ContainerKeyboard10SpecialKeyEvvEE)
</UL>
<P><STRONG><a name="[225]"></a>touchgfx::Callback&lang;Screen1View, const touchgfx::TextAreaWithOneWildcard&, const touchgfx::ClickEvent&, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1view.o(t._ZNK8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1view.o(.constdata__ZTVN8touchgfx8CallbackI11Screen1ViewRKNS_23TextAreaWithOneWildcardERKNS_10ClickEventEvEE)
</UL>
<P><STRONG><a name="[228]"></a>touchgfx::Callback&lang;ContainerDialog, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, containerdialog.o(t._ZNK8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> containerdialog.o(.constdata__ZTVN8touchgfx8CallbackI15ContainerDialogRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[22b]"></a>touchgfx::Callback&lang;Screen1ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen1viewbase.o(t._ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen1viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[22e]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[231]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::AbstractButtonContainer&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEE)
</UL>
<P><STRONG><a name="[234]"></a>touchgfx::Callback&lang;Screen2ViewBase, const touchgfx::Slider&, int, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, screen2viewbase.o(t._ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> screen2viewbase.o(.constdata__ZTVN8touchgfx8CallbackI15Screen2ViewBaseRKNS_6SliderEivEE)
</UL>
<P><STRONG><a name="[237]"></a>touchgfx::Callback&lang;ContainerKeyboard, const touchgfx::AbstractButton&, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, containerkeyboard.o(t._ZNK8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> containerkeyboard.o(.constdata__ZTVN8touchgfx8CallbackI17ContainerKeyboardRKNS_14AbstractButtonEvvEE)
</UL>
<P><STRONG><a name="[23a]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[2a8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
</UL>

<P><STRONG><a name="[9d7]"></a>_d2f</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[2a2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, daddsub.o(x$fpl$dadd))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
</UL>

<P><STRONG><a name="[9d8]"></a>_dadd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, daddsub.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[8eb]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
</UL>

<P><STRONG><a name="[9d9]"></a>_ddiv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
</UL>

<P><STRONG><a name="[8e9]"></a>_dcmpeq</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
</UL>

<P><STRONG><a name="[9da]"></a>_dfix</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dfix.o(x$fpl$dfix), UNUSED)

<P><STRONG><a name="[29d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
</UL>

<P><STRONG><a name="[9db]"></a>_dflt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dflt.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[29e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
</UL>

<P><STRONG><a name="[8ec]"></a>_dcmple</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[8ee]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
</UL>

<P><STRONG><a name="[9dc]"></a>_dmul</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dmul.o(x$fpl$dmul), UNUSED)

<P><STRONG><a name="[8ea]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
</UL>

<P><STRONG><a name="[8ed]"></a>_drcmple</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, daddsub.o(x$fpl$drsb))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
</UL>

<P><STRONG><a name="[9dd]"></a>_drsb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, daddsub.o(x$fpl$drsb), UNUSED)

<P><STRONG><a name="[2a1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, daddsub.o(x$fpl$dsub))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
</UL>

<P><STRONG><a name="[9de]"></a>_dsub</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, daddsub.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
</UL>

<P><STRONG><a name="[9df]"></a>_f2d</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[9e0]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[9e1]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[2da]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[9e2]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[8f0]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_f
</UL>

<P><STRONG><a name="[27f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[9e3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[9e4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2db]"></a>__aeabi_f2lz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
</UL>

<P><STRONG><a name="[8ef]"></a>_ll_sfrom_f</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[261]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[265]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f2]"></a>CreateNewFile</STRONG> (Thumb, 80 bytes, Stack size 112 bytes, nand_driver.o(i.CreateNewFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = CreateNewFile &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[3f8]"></a>DotFormat</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, nand_driver.o(i.DotFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DotFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ViewRootDir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCapacity
</UL>

<P><STRONG><a name="[40e]"></a>FMC_NAND_ReadStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nand_driver.o(i.FMC_NAND_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_WaitForReady
</UL>

<P><STRONG><a name="[40d]"></a>FMC_NAND_WaitForReady</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nand_driver.o(i.FMC_NAND_WaitForReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_NAND_WaitForReady
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Reset
</UL>

<P><STRONG><a name="[419]"></a>GetCapacity</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, nand_driver.o(i.GetCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GetCapacity &rArr; DotFormat &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvol
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_unlock
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ioc_read_info
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFormat
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[4f1]"></a>ReadFileData</STRONG> (Thumb, 162 bytes, Stack size 192 bytes, nand_driver.o(i.ReadFileData))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ReadFileData &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funmount
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[4ef]"></a>ViewRootDir</STRONG> (Thumb, 140 bytes, Stack size 304 bytes, nand_driver.o(i.ViewRootDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ViewRootDir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFormat
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[539]"></a>MPU_Config()</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, main.o(i._Z10MPU_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_Config()
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53d]"></a>MX_CRC_Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i._Z11MX_CRC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init() &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53e]"></a>MX_DAC_Init()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._Z11MX_DAC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_DAC_Init() &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[540]"></a>MX_DMA_Init()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i._Z11MX_DMA_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[544]"></a>MX_RNG_Init()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i._Z11MX_RNG_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_RNG_Init() &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[545]"></a>MX_RTC_Init()</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, main.o(i._Z11MX_RTC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init() &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[547]"></a>MX_ADC1_Init()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, main.o(i._Z12MX_ADC1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC1_Init() &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[549]"></a>MX_GPIO_Init()</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, main.o(i._Z12MX_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54a]"></a>MX_SAI1_Init()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i._Z12MX_SAI1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SAI1_Init() &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54b]"></a>MX_TIM1_Init()</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, main.o(i._Z12MX_TIM1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM1_Init() &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54d]"></a>MX_TIM2_Init()</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, main.o(i._Z12MX_TIM2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM2_Init() &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54e]"></a>MX_TIM3_Init()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(i._Z12MX_TIM3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TIM3_Init() &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[552]"></a>MX_QUADSPI_Init()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i._Z15MX_QUADSPI_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_QUADSPI_Init() &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[554]"></a>MX_SPDIFRX_Init()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z15MX_SPDIFRX_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPDIFRX_Init() &rArr; HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81d]"></a>SCB_EnableDCache()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i._Z16SCB_EnableDCachev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81c]"></a>SCB_EnableICache()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i._Z16SCB_EnableICachev))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81e]"></a>MX_SDMMC1_SD_Init()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i._Z17MX_SDMMC1_SD_Initv))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[558]"></a>MX_USART1_UART_Init()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i._Z19MX_USART1_UART_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init() &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[514]"></a>SD_CheckStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[515]"></a>SD_CheckStatusWithTimeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_CheckStatusWithTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_CheckStatusWithTimeout &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[254]"></a>__sti___22_BoardConfiguration_cpp_2f1c5dae</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, boardconfiguration.o(i.__sti___22_BoardConfiguration_cpp_2f1c5dae))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___22_BoardConfiguration_cpp_2f1c5dae &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::STM32F7DMA()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boardconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[55f]"></a>HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f7dma.o(i._Z17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA2D_SetMode(__DMA2D_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[9f]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
</UL>
<P><STRONG><a name="[a0]"></a>DMA2D_XferErrorCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7dma.o(i._Z23DMA2D_XferErrorCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7dma.o(i._ZN10STM32F7DMA10initializeEv)
</UL>
<P><STRONG><a name="[565]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7hal.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::enableInterrupts()
</UL>

<P><STRONG><a name="[566]"></a>__NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f7hal.o(i._Z17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::disableInterrupts()
</UL>

<P><STRONG><a name="[567]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7hal.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F7HAL::configureInterrupts()
</UL>

<P><STRONG><a name="[463]"></a>HAL_FMC_MspInit()</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, hw_init.o(i._Z15HAL_FMC_MspInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FMC_MspInit() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
</UL>

<P><STRONG><a name="[773]"></a>low_level_init</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = low_level_init &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMATxDescListInit
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMARxDescListInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[775]"></a>low_level_input</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetReceivedFrame_IT
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[ac]"></a>low_level_output</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = low_level_output &rArr; HAL_ETH_TransmitFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TransmitFrame
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[6eb]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[703]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[77b]"></a>clear_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[73d]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[6f2]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6f6]"></a>create_chain</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[701]"></a>create_name</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[778]"></a>dec_lock</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[737]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[73b]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[73e]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[738]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[77e]"></a>find_volume</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[780]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[6f7]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[784]"></a>get_fileinfo</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[77a]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[782]"></a>inc_lock</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[781]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[6ee]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[6ed]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[7ab]"></a>lock_fs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[73a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[704]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[6ec]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[73f]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[6f8]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[87f]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[87e]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[739]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[73c]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[779]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[777]"></a>validate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>

<P><STRONG><a name="[42b]"></a>DMA2D_SetConfig</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32f7xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start_IT
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_BlendingStart_IT
</UL>

<P><STRONG><a name="[44f]"></a>LTDC_SetConfig</STRONG> (Thumb, 528 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[4af]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4ae]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4b0]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4b3]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4b4]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4b5]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[447]"></a>ETH_DMAReceptionEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.ETH_DMAReceptionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[446]"></a>ETH_DMATransmissionEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_eth.o(i.ETH_DMATransmissionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[3ff]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[403]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f7xx_hal_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[402]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 566 bytes, Stack size 200 bytes, stm32f7xx_hal_eth.o(i.ETH_MACDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[404]"></a>ETH_MACReceptionEnable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.ETH_MACReceptionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_MACReceptionEnable &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[405]"></a>ETH_MACTransmissionEnable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_eth.o(i.ETH_MACTransmissionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ETH_MACTransmissionEnable &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
</UL>

<P><STRONG><a name="[422]"></a>ADC_Init</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[464]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[465]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[469]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32f7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[468]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MemoryMapped
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[483]"></a>SAI_Disable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f7xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[507]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[502]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[50c]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[504]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[511]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[509]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[99]"></a>SD_DMAError</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[98]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[97]"></a>SD_DMARxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[9a]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[96]"></a>SD_DMATxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[518]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[49f]"></a>SD_InitCard</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[49e]"></a>SD_PowerON</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[499]"></a>SD_Read_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Read_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[492]"></a>SD_SendStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[490]"></a>SD_WideBus_Disable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[48f]"></a>SD_WideBus_Enable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[498]"></a>SD_Write_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Write_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[4c4]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[4c6]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[439]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[438]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[43b]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[86e]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[86f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[8d1]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[872]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[873]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[879]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[87a]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[87b]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[864]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[868]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[86c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[86d]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[bd]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[875]"></a>prvInitialiseNewTask</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[86a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[8d2]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[852]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[859]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[882]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[883]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b7]"></a>prvTaskExitError</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[604]"></a>touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN8touchgfx17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::prepareTransition(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::Transition**)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[605]"></a>touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, frontendapplicationbase.o(i._ZN8touchgfx18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::finalizeTransition(touchgfx::Screen*, touchgfx::Presenter*, touchgfx::Transition*)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen2View, Screen2Presenter, touchgfx::CoverTransition&lang;(touchgfx::Direction)2&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::SlideTransition&lang;(touchgfx::Direction)3&rang;, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;Screen1View, Screen1Presenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[255]"></a>__sti___9_texts_cpp_454ca793</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texts.o(i.__sti___9_texts_cpp_454ca793))
<BR>[Address Reference Count : 1]<UL><LI> texts.o(.init_array)
</UL>
<P><STRONG><a name="[256]"></a>__sti___21_typedtextdatabase_cpp_42ef4e5b</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_42ef4e5b))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __sti___21_typedtextdatabase_cpp_42ef4e5b &rArr; getFont_STSONG_TTF_40_4bpp() &rArr; touchgfx::InternalFlashFont::InternalFlashFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*, const touchgfx::KerningNode*, unsigned short, unsigned short) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_40_4bpp()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_STSONG_TTF_20_4bpp()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[ba]"></a>tcpip_thread</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[823]"></a>plug_holes</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = plug_holes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[75a]"></a>do_memp_free_pool</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[75d]"></a>do_memp_malloc_pool</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, memp.o(i.do_memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[84a]"></a>netif_issue_reports</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[860]"></a>pbuf_free_ooseq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[b6]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[862]"></a>pbuf_header_impl</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[85e]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[899]"></a>tcp_close_shutdown</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[89e]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[897]"></a>tcp_kill_prio</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[896]"></a>tcp_kill_state</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[895]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[89d]"></a>tcp_listen_closed</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_listen_closed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[8b1]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[8ae]"></a>tcp_remove_listener</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[8b4]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[8ab]"></a>tcp_input_delayed_close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_input_delayed_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8a8]"></a>tcp_listen_input</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8b2]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[8b0]"></a>tcp_parseopt</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[8aa]"></a>tcp_process</STRONG> (Thumb, 1726 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8b6]"></a>tcp_receive</STRONG> (Thumb, 3316 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[8a7]"></a>tcp_timewait_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[8a1]"></a>tcp_create_segment</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[8ad]"></a>tcp_output_alloc_header</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[8b3]"></a>tcp_output_segment</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[a9]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.cyclic_timer)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[888]"></a>sys_check_timeouts</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[88f]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[b9]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[8c1]"></a>udp_input_local_match</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[8c0]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[70c]"></a>dhcp_bind</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[70f]"></a>dhcp_check</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[715]"></a>dhcp_create_msg</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[71b]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_dec_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[70b]"></a>dhcp_decline</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[721]"></a>dhcp_delete_msg</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[712]"></a>dhcp_discover</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[725]"></a>dhcp_handle_ack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[726]"></a>dhcp_handle_nak</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[727]"></a>dhcp_handle_offer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[729]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_inc_pcb_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[719]"></a>dhcp_option</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[71a]"></a>dhcp_option_byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[71d]"></a>dhcp_option_long</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_long &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[723]"></a>dhcp_option_short</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_option_short &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[71e]"></a>dhcp_option_trailer</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option_trailer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[72e]"></a>dhcp_parse_reply</STRONG> (Thumb, 1260 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[730]"></a>dhcp_rebind</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[732]"></a>dhcp_reboot</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[aa]"></a>dhcp_recv</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_inc_pcb_refcount)
</UL>
<P><STRONG><a name="[728]"></a>dhcp_select</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[70d]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[714]"></a>dhcp_t1_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[713]"></a>dhcp_t2_timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[724]"></a>dhcp_timeout</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[766]"></a>etharp_find_entry</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[765]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[76b]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[769]"></a>etharp_raw</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[76e]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[768]"></a>etharp_update_arp_entry</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[7d1]"></a>icmp_send_response</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[7fd]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[7ff]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip4_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[809]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, ip4_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[80a]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[808]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[80d]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, ip4_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[807]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ip4_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[b5]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ip4_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[6db]"></a>accel_6500_self_test</STRONG> (Thumb, 968 bytes, Stack size 128 bytes, inv_mpu.o(i.accel_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = accel_6500_self_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[6f4]"></a>compass_self_test</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, inv_mpu.o(i.compass_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = compass_self_test &rArr; mpu_set_bypass &rArr; MPU_Read_Len &rArr; SOFT_IIC_Read_Byte &rArr; SOFT_IIC_NAck &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[7ce]"></a>get_st_6500_biases</STRONG> (Thumb, 1498 bytes, Stack size 600 bytes, inv_mpu.o(i.get_st_6500_biases))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = get_st_6500_biases &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[7cf]"></a>gyro_6500_self_test</STRONG> (Thumb, 906 bytes, Stack size 120 bytes, inv_mpu.o(i.gyro_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = gyro_6500_self_test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[82a]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_int_enable &rArr; MPU_Write_Len &rArr; SOFT_IIC_Wait_Ack &rArr; SOFT_IIC_Stop &rArr; SOFT_IIC_Delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[83c]"></a>setup_compass</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, inv_mpu.o(i.setup_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = setup_compass &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[752]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[b3]"></a>inv_generate_eMPL_outputs</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_generate_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_generate_eMPL_outputs &rArr; inv_get_quaternion_set &rArr; inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> empl_outputs.o(i.inv_start_eMPL_outputs)
</UL>
<P><STRONG><a name="[7de]"></a>inv_init_eMPL_outputs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_init_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_eMPL_outputs &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
</UL>

<P><STRONG><a name="[af]"></a>inv_start_eMPL_outputs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_start_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = inv_start_eMPL_outputs &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> empl_outputs.o(i.inv_enable_eMPL_outputs)
</UL>
<P><STRONG><a name="[b2]"></a>inv_db_load_func</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, data_builder.o(i.inv_db_load_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_db_load_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_found
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_builder.o(i.inv_init_data_builder)
</UL>
<P><STRONG><a name="[b1]"></a>inv_db_save_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_db_save_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_db_save_func
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_builder.o(i.inv_init_data_builder)
</UL>
<P><STRONG><a name="[7e2]"></a>inv_set_contiguous</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_contiguous))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_on_data
</UL>

<P><STRONG><a name="[7dc]"></a>inv_q30_to_float</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q30_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
</UL>

<P><STRONG><a name="[7f3]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[6c0]"></a>__print_result_location</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, mpl.o(i.__print_result_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __print_result_location &rArr; _MLPrintLog &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[ed]"></a>AbortSequence</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.AbortSequence))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ChipEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.ChipEnable))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>Control</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, nand_membus.o(i.Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>DevicePower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.DevicePower))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>ExecuteSequence</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nand_membus.o(i.ExecuteSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExecuteSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nand_membus.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>GetDeviceBusy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nand_membus.o(i.GetDeviceBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetDeviceBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_NAND0_GetDeviceBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>GetStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, nand_membus.o(i.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nand_membus.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nand_membus.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>InquireECC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.InquireECC))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>PowerControl</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nand_membus.o(i.PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ReadData</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nand_membus.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>SendAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nand_membus.o(i.SendAddress))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>SendCommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nand_membus.o(i.SendCommand))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nand_membus.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>WriteData</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nand_membus.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>WriteProtect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.WriteProtect))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[6d9]"></a>stdin_getchar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_io.o(i.stdin_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[6da]"></a>stdout_putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[ad]"></a>NAND0_HW_SignalEventHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_config.o(i.NAND0_HW_SignalEventHandler))
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config_nand)
</UL>
<P><STRONG><a name="[ae]"></a>NAND0_Media_SignalEventHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_config.o(i.NAND0_Media_SignalEventHandler))
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_MediaEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config_nand)
</UL>
<P><STRONG><a name="[7bf]"></a>fs_config_nand</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fs_config.o(i.fs_config_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fs_config_nand &rArr; fs_mutex_new &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[f6]"></a>nand0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = nand0_DevCtrl &rArr; ftl_DevCtrl &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>nand0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = nand0_Init &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>nand0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_RdInfo))
<BR><BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>nand0_RdSect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_config.o(i.nand0_RdSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = nand0_RdSect &rArr; ftl_ReadSect &rArr; RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>nand0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand0_UnInit &rArr; ftl_UnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>nand0_WrSect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_config.o(i.nand0_WrSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = nand0_WrSect &rArr; ftl_WriteSect &rArr; RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[68b]"></a>touchgfx::expand_rgb_565(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx14expand_rgb_565Et))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawTextureMapScanLine(const touchgfx::DrawingSurface&, const touchgfx::Gradients&, const touchgfx::Edge*, const touchgfx::Edge*, const touchgfx::TextureSurface&, const touchgfx::Rect&, const touchgfx::Rect&, unsigned short, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[29c]"></a>inv_check_peaks</STRONG> (Thumb, 486 bytes, Stack size 72 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = inv_check_peaks &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2b7]"></a>inv_ignore_compass_data</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_ignore_compass_data &rArr; inv_add_compass_block_data &rArr; inv_get_current_calibrated_compass &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_large_mag_field
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_state
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2bc]"></a>inv_bias_stability</STRONG> (Thumb, 368 bytes, Stack size 120 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_bias_stability &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2c5]"></a>inv_set_peaks</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_set_peaks
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[2cd]"></a>inv_init_sensitivity_const</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_init_sensitivity_const &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_vector_compass_cal
</UL>

<P><STRONG><a name="[2e6]"></a>inv_reset_packet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_reset_packet &rArr; inv_init_maxmin
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[2fa]"></a>inv_find_synchronized_compass_angle</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[90]"></a>inv_gtc_load</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_gtc_load
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>inv_gtc_store</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_gtc_store
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[30d]"></a>inv_gtc_compute_slope</STRONG> (Thumb, 478 bytes, Stack size 104 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_gtc_compute_slope &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[30e]"></a>inv_gtc_add_data</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_gtc_add_data &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[8e]"></a>inv_gtc_data_cb</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_gtc_data_cb &rArr; inv_gtc_compute_slope &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias_tc_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_motion_state
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_add_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[32c]"></a>accel_fusion</STRONG> (Thumb, 458 bytes, Stack size 128 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_norm4
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_multf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invertf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_addf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[330]"></a>inv_compute_quat_from_accel</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_compute_quat_from_accel &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[331]"></a>inv_normalize_quat</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_normalize_quat &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
</UL>

<P><STRONG><a name="[334]"></a>inv_process_dmp_quaternion</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_process_dmp_quaternion &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[91]"></a>inv_generate_quaternion</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_generate_quaternion &rArr; inv_generate_accel_gyro_quaternion &rArr; accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_store_gaming_quaternion
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternion_supervisor.o(.text)
</UL>
<P><STRONG><a name="[7ae]"></a>fs_component_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_component_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3ca]"></a>AllocBlock</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, fs_nftl.o(i.AllocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBlockInQueue
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumBlocksInQueue
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
</UL>

<P><STRONG><a name="[3ec]"></a>CachePgRead</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, fs_nftl.o(i.CachePgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
</UL>

<P><STRONG><a name="[3ef]"></a>CachePgWrite</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_nftl.o(i.CachePgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CachePgWrite &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
</UL>

<P><STRONG><a name="[4fc]"></a>CalcDataBlocks</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_nftl.o(i.CalcDataBlocks))
<BR><BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
</UL>

<P><STRONG><a name="[3ee]"></a>DecodeECC</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, fs_nftl.o(i.DecodeECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming8
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>

<P><STRONG><a name="[3f9]"></a>Drv_EraseBlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_nftl.o(i.Drv_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Drv_EraseBlock &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[3ed]"></a>Drv_ReadPage</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_nftl.o(i.Drv_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>

<P><STRONG><a name="[3fc]"></a>Drv_SetupFeatures</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, fs_nftl.o(i.Drv_SetupFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_SetupFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_feature_param
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_feature_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[3f1]"></a>Drv_WritePage</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fs_nftl.o(i.Drv_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
</UL>

<P><STRONG><a name="[3f0]"></a>EncodeECC</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fs_nftl.o(i.EncodeECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EncodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming8
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
</UL>

<P><STRONG><a name="[407]"></a>EraseBlock</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_nftl.o(i.EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = EraseBlock &rArr; MarkBlockBad &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
</UL>

<P><STRONG><a name="[3cb]"></a>FindEmptyBlock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fs_nftl.o(i.FindEmptyBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FindEmptyBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[3ce]"></a>ForceDataGc</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, fs_nftl.o(i.ForceDataGc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBlockInQueue
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[410]"></a>GcRun</STRONG> (Thumb, 914 bytes, Stack size 72 bytes, fs_nftl.o(i.GcRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GcRun &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdxCacheSlot
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
</UL>

<P><STRONG><a name="[3cf]"></a>GetBlockFromQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fs_nftl.o(i.GetBlockFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetBlockFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumBlocksInQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[416]"></a>GetIdxCacheSlot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fs_nftl.o(i.GetIdxCacheSlot))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
</UL>

<P><STRONG><a name="[417]"></a>GetLSN</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_nftl.o(i.GetLSN))
<BR><BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
</UL>

<P><STRONG><a name="[4cd]"></a>InitBtt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_nftl.o(i.InitBtt))
<BR><BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
</UL>

<P><STRONG><a name="[4cc]"></a>LoadBtt</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, fs_nftl.o(i.LoadBtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[7c7]"></a>Log2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_nftl.o(i.Log2))
<BR><BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[408]"></a>MarkBlockBad</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fs_nftl.o(i.MarkBlockBad))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MarkBlockBad &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[4e6]"></a>MoveBlock</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, fs_nftl.o(i.MoveBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MoveBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
</UL>

<P><STRONG><a name="[3cd]"></a>NumBlocksInQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_nftl.o(i.NumBlocksInQueue))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[3cc]"></a>PutBlockInQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fs_nftl.o(i.PutBlockInQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutBlockInQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[4fb]"></a>RdBootBlock</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fs_nftl.o(i.RdBootBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RdBootBlock &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDataBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[40f]"></a>RelocBlock</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, fs_nftl.o(i.RelocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
</UL>

<P><STRONG><a name="[523]"></a>ScanBlock</STRONG> (Thumb, 532 bytes, Stack size 64 bytes, fs_nftl.o(i.ScanBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ScanBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdxCacheSlot
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[4ce]"></a>ScanTable</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fs_nftl.o(i.ScanTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
</UL>

<P><STRONG><a name="[524]"></a>SearchBTT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fs_nftl.o(i.SearchBTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>

<P><STRONG><a name="[418]"></a>SetLSN</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_nftl.o(i.SetLSN))
<BR><BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
</UL>

<P><STRONG><a name="[411]"></a>UpdateBTT</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, fs_nftl.o(i.UpdateBTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = UpdateBTT &rArr;  ScanTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
</UL>

<P><STRONG><a name="[3f7]"></a>ecc_Hamming512</STRONG> (Thumb, 650 bytes, Stack size 36 bytes, fs_nftl.o(i.ecc_Hamming512))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
</UL>

<P><STRONG><a name="[3f6]"></a>ecc_Hamming8</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, fs_nftl.o(i.ecc_Hamming8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecc_Hamming8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
</UL>

<P><STRONG><a name="[7c6]"></a>ftl_Format</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, fs_nftl.o(i.ftl_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ftl_Format &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDataBlocks
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
</UL>

<P><STRONG><a name="[7c9]"></a>ftl_init_media</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, fs_nftl.o(i.ftl_init_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_setup_layout
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_SetupLayout
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EccToLayout
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>

<P><STRONG><a name="[7c8]"></a>ftl_init_resources</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, fs_nftl.o(i.ftl_init_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftl_init_resources
</UL>
<BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>

<P><STRONG><a name="[fe]"></a>EraseBlock</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, fs_nand_media.o(i.EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EraseBlock &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>GetFeatures</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, fs_nand_media.o(i.GetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetFeatures &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>Initialize</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_nand_media.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>ReadID</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, fs_nand_media.o(i.ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadID &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>ReadPage</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fs_nand_media.o(i.ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadPage &rArr; ReadPage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Seq
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[4fd]"></a>ReadPage_Cmd</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fs_nand_media.o(i.ReadPage_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadPage_Cmd &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
</UL>

<P><STRONG><a name="[4fe]"></a>ReadPage_Seq</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, fs_nand_media.o(i.ReadPage_Seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadPage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
</UL>

<P><STRONG><a name="[fb]"></a>ReadParamPage</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, fs_nand_media.o(i.ReadParamPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadParamPage &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ReadStatus</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, fs_nand_media.o(i.ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadStatus &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>ResetDevice</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, fs_nand_media.o(i.ResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetDevice &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[409]"></a>SendAddress</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fs_nand_media.o(i.SendAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeatures
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[101]"></a>SetFeatures</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, fs_nand_media.o(i.SetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SetFeatures &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>Uninitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fs_nand_media.o(i.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[41f]"></a>WaitDevReady</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_nand_media.o(i.WaitDevReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WaitDevReady &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
</UL>

<P><STRONG><a name="[40a]"></a>WaitDrvBusy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs_nand_media.o(i.WaitDrvBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Seq
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeatures
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDevice
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Seq
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[fd]"></a>WritePage</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fs_nand_media.o(i.WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WritePage &rArr; WritePage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Seq
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[536]"></a>WritePage_Cmd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, fs_nand_media.o(i.WritePage_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WritePage_Cmd &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
</UL>

<P><STRONG><a name="[537]"></a>WritePage_Seq</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, fs_nand_media.o(i.WritePage_Seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WritePage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
</UL>

<P><STRONG><a name="[340]"></a>inv_check_push</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_check_push &rArr; inv_set_accel_bias_mask &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_accuracy
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_found
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[344]"></a>inv_check_coverage_set_bias</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_check_coverage_set_bias &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[346]"></a>inv_combine_data_calculate_bias</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_combine_data_calculate_bias &rArr; inv_compute_bias &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[34c]"></a>set_sample_rate</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_sample_rate &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[6dc]"></a>alloc_clus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[6dd]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[6df]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[6e6]"></a>bs_read</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bs_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[6e8]"></a>bs_write</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, fs_fat.o(i.bs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bs_write &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[6e1]"></a>cache_fat</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[845]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[6ef]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[6f0]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[6f9]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[6ff]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[705]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[6fe]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_flush &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[7b2]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[700]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
</UL>

<P><STRONG><a name="[6fa]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[7b3]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[80e]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[79a]"></a>file_locked</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[78c]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[6fd]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[6fc]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[7b1]"></a>frec_allocate</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[7b4]"></a>frec_find</STRONG> (Thumb, 538 bytes, Stack size 128 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[7ba]"></a>frec_find_elink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[78a]"></a>frec_next</STRONG> (Thumb, 424 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[797]"></a>fsinfo_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsinfo_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[786]"></a>fsinfo_write</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[6de]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[6e0]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[791]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_read
</UL>

<P><STRONG><a name="[7a0]"></a>label_read</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fs_fat.o(i.label_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = label_read &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
</UL>

<P><STRONG><a name="[78e]"></a>label_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.label_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = label_write &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[7b5]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[79d]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[7b6]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[78d]"></a>mbr_write</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fs_fat.o(i.mbr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbr_write &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[844]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[846]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[7bb]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[85c]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[85b]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[847]"></a>name_validate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[79c]"></a>path_create</STRONG> (Thumb, 558 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[788]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[789]"></a>path_open</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[799]"></a>path_validate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = path_validate &rArr; name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[798]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[6e7]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
</UL>

<P><STRONG><a name="[7b8]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[7b9]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[7b7]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[79b]"></a>unlink_clus</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[6f1]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[6e9]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
</UL>

<P><STRONG><a name="[709]"></a>delete_list_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>

<P><STRONG><a name="[708]"></a>delete_list_discon</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>

<P><STRONG><a name="[707]"></a>delete_list_update</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[75e]"></a>elink_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_discon
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[75f]"></a>elink_discon</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_discon))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
</UL>

<P><STRONG><a name="[761]"></a>elink_rewind</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_rewind))
<BR><BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[38a]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[93]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
